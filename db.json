{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1615428245000},{"_id":"source/tags/index.md","hash":"b4bfa1c29be75fe03f6e6e07e4d9c840e4da1cc3","modified":1615428911000},{"_id":"source/_posts/Go笔记-函数.md","hash":"e15785e94d0ac19729d3cc434705bbc08d3c2701","modified":1615802484485},{"_id":"source/_posts/Go笔记-基础结构和数据类型.md","hash":"9dea6fa15d9e2747c78112aea62369a9d86c5898","modified":1615618022889},{"_id":"source/_posts/Go笔记-包.md","hash":"d35fe72d34709df31ed23ba31d8ce119c9a133ac","modified":1617086739361},{"_id":"source/_posts/Go笔记-Map.md","hash":"bcf435d55a90f06c9d491f1cfdde32583b8c6695","modified":1617002129262},{"_id":"source/_posts/Go笔记-读写数据.md","hash":"20791e99fcc07bbb8d0958459c850a7bf9d7db79","modified":1619331769553},{"_id":"source/_posts/Go笔记-数组与切片.md","hash":"76aa95a1cdbb89c1cf26cd0bf696587db8ec2738","modified":1616585874357},{"_id":"source/_posts/Go笔记-接口与反射.md","hash":"af7e6de27e2761fcdc23eb200e7380a5e75cf872","modified":1618560990522},{"_id":"source/_posts/Go笔记-结构体与方法.md","hash":"54f14a35117d2b5bca6c74a1fbfb8aed0e56d1c2","modified":1617265831035},{"_id":"source/_posts/Kubernetes中进行简单应用部署.md","hash":"d121b025318239ff5af0224c15d29733cb8f1626","modified":1615535839173},{"_id":"source/_posts/Kubernetes快速搭建与启动.md","hash":"5b3712b449932d776d1bf91979d210e014bf9990","modified":1615524143375},{"_id":"source/_posts/Nginx深入了解-基础-一.md","hash":"8439e712ee78538f2c99ad12d60613a8b899b9cf","modified":1615448192523},{"_id":"source/_posts/MYSQL事务隔离.md","hash":"45c98abff737d7f19e09d6673cb48ccb9fb0922a","modified":1615426782577},{"_id":"source/_posts/Nginx深入了解-基础-二.md","hash":"f0a364da94255a9b3cf291fd61ffebe7122b8f3f","modified":1615447299536},{"_id":"source/_posts/Nginx深入了解-基础-三.md","hash":"c0251e63913ac8e82b7328c48f897ac686100d77","modified":1615442159911},{"_id":"source/_posts/Nginx深入了解-进阶-一.md","hash":"4ff72eb2d900915b82278b68e3cff535e854a5aa","modified":1615426789416},{"_id":"source/_posts/Nginx深入了解-进阶-三.md","hash":"c0d20aede5e53e25805ad35794bc1b0ea310e96e","modified":1615426794037},{"_id":"source/_posts/Nginx深入了解-高级-一.md","hash":"664df7283b9cc67ec1ad2c1b204be5847837a0d4","modified":1615426812235},{"_id":"source/_posts/Nginx深入了解-高级-三.md","hash":"4c650bddbfbf713e332ac5c0f4ea1e171c2139cb","modified":1615426818333},{"_id":"source/_posts/Nginx深入了解-基础-四.md","hash":"4cafaacacc56fb0952f865e5f2ae91d3af7ef29c","modified":1615429597796},{"_id":"source/_posts/Nginx深入了解-进阶-二.md","hash":"9fb2596a27130aa862795da01be3a6b8e514f910","modified":1615426800158},{"_id":"source/_posts/Nginx深入了解-高级-二.md","hash":"31b2bb28b18e57feccc98a7b4d6eb99ccac15d9b","modified":1615426823803},{"_id":"source/_posts/Nginx深入了解-高级-五.md","hash":"184ba633b536b7c5dd4ed867c492a145a22d0d39","modified":1615426831762},{"_id":"source/_posts/Nginx深入了解-高级-四.md","hash":"68cc3787c9fbd9df2a0b116cc744d46cd8c4d4ab","modified":1615426836186},{"_id":"source/_posts/Nginx深入了解-进阶-四.md","hash":"64d4d38a85f211d5b65bc59ffc01fa65eb20c087","modified":1615426806769},{"_id":"source/_posts/Redis在实际工作中遇到的各种应用场景.md","hash":"7da688ec5637df102a592929d33fa304a0949a17","modified":1615426842388},{"_id":"source/_posts/Redis集群快速搭建.md","hash":"919e419f12bafa85c868b482f1e81cd3a785ae39","modified":1615428810469},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1615425760000},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1615425760000},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1615425760000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1615425760000},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1615425760000},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1615425760000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1615425760000},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1615425760000},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1615425760000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1615425760000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1615425760000},{"_id":"themes/next/_config.yml","hash":"f9dd0ae25056716d8e627b04c7fe764d9649718d","modified":1646475576591},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1615425760000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1615425760000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1615425760000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1615425760000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1615425760000},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1615425760000},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1615425760000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1615425760000},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1615425760000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1615425760000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1615425760000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1615425760000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1615425760000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1615425760000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1615425760000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1615425760000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1615425760000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1615425760000},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1615425760000},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1615425760000},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1615425760000},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1615425760000},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1615425760000},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1615425760000},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1615425760000},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1615425760000},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1615425760000},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1615425760000},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1615425760000},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1615425760000},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1615425760000},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1615425760000},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1615425760000},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1615425760000},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1615425760000},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1615425760000},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1615425760000},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1615425760000},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1615425760000},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1615425760000},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1615425760000},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1615425760000},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1615425760000},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1615425760000},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1615425760000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1615425760000},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1615425760000},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1615425760000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1615425760000},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1615425760000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1615425760000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1615425760000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1615425760000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1615425760000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1615425760000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1615425760000},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1615425760000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1615425760000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1615425760000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1615425760000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1615425760000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1615425760000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1615425760000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1615425760000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1615425760000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1615425760000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1615425760000},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1615425760000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1615425760000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1615425760000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1615425760000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1615425760000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1615425760000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1615425760000},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1615425760000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1615425760000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1615425760000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1615425760000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1615425760000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1615425760000},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1615425760000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1615425760000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1615425760000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1615425760000},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1615425760000},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1615425760000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1615425760000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1615425760000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1615425760000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1615425760000},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1615425760000},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1615425760000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1615425760000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1615425760000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1615425760000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1615425760000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1615425760000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1615425760000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1615425760000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1615425760000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1615425760000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1615425760000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1615425760000},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1615425760000},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1615425760000},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1615425761000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1615425761000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1615425761000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1615425761000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1615425761000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1615425761000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1615425761000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1615425761000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1615425761000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1615425761000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1615425761000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1615425761000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1615425761000},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1615425761000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1615425761000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1615425761000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1615425760000},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1615425761000},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1615425761000},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1615425761000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1615425760000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1615425760000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1615425761000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1615425760000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1615425760000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1615425760000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1615425760000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1615425760000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1615425760000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1615425760000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1615425760000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1615425760000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1615425760000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1615425760000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1615425760000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1615425760000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1615425760000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1615425760000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1615425760000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1615425760000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1615425760000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1615425760000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1615425760000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1615425760000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1615425760000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1615425760000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1615425760000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1615425760000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1615425760000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1615425760000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1615425760000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1615425760000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1615425760000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1615425760000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1615425760000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1615425760000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1615425760000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1615425760000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1615425760000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1615425760000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1615425760000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1615425760000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1615425760000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1615425760000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1615425760000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1615425760000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1615425760000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1615425760000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1615425760000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1615425760000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1615425760000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1615425760000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1615425760000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1615425760000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1615425760000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1615425760000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1615425760000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1615425760000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1615425760000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1615425761000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1615425761000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1615425761000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1615425761000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1615425761000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1615425761000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1615425761000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1615425760000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1615425761000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1615425761000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1615425761000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1615425761000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1615425760000},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1615425761000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1615425761000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1615425761000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1615425761000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1615425761000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1615425761000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1615425761000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1615425761000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1615425761000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1615425761000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1615425761000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1615425761000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1615425761000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1615425760000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1615425761000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1615425760000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1615425760000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1615425760000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1615425761000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1615425760000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1615425760000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1615425760000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1615425760000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1615425760000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1615425760000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1615425761000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1615425760000},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1615425761000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1615425760000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1615425760000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1615425760000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1615425760000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1615425760000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1615425760000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1615425760000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1615425760000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1615425760000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1615425760000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1615425760000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1615425760000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1615425760000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1615425760000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1615425760000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1615425760000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1615425760000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1615425760000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1615425760000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1615425760000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1615425760000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1615425760000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1615425760000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1615425760000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1615425760000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1615425760000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1615425760000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1615425760000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1615425760000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1615425760000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1615425760000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1615425760000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1615425760000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1615425761000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1615425761000},{"_id":"public/404.html","hash":"28851bda086b7ae9660fd3f1be25be951c86d282","modified":1646476282717},{"_id":"public/tags/index.html","hash":"103ff298140ff55f78a4413ba43a92c6d7ebc318","modified":1646476282717},{"_id":"public/2018/09/25/Nginx深入了解-高级-四/index.html","hash":"ab75846658d1381a4d86a161c2c6301b277cf773","modified":1646476282717},{"_id":"public/archives/index.html","hash":"b661c1f205812ddae599a33ee3d3f957a32a0f48","modified":1646476282717},{"_id":"public/archives/page/2/index.html","hash":"2011aff7f3244d03d44241c8f04eb40165e9b4dd","modified":1646476282717},{"_id":"public/archives/page/3/index.html","hash":"d78ae6fab9f3fd8f524436efd3278b86e83c4d6a","modified":1646476282717},{"_id":"public/archives/2018/index.html","hash":"6e2ebbbd84cbfddca53cbb5d76993149b6edbc3d","modified":1646476282717},{"_id":"public/archives/2018/page/2/index.html","hash":"ff9d3edf868a58eb61108de01fae2e7aa57234a0","modified":1646476282717},{"_id":"public/archives/2018/07/index.html","hash":"8108e9f96b5d003e3c89c15efe235fb824880695","modified":1646476282717},{"_id":"public/archives/2018/08/index.html","hash":"f2335593118fda14e0c44b2d1b7a8c07b07633c9","modified":1646476282717},{"_id":"public/archives/2018/09/index.html","hash":"dc13abd168fba52f13b91825025abf68a78401bb","modified":1646476282717},{"_id":"public/archives/2018/10/index.html","hash":"210176779f0938acddc1732e2983515d7a2b28e6","modified":1646476282717},{"_id":"public/archives/2019/index.html","hash":"ebdf840f1138bf2129f952d87766adf1c18c9ce5","modified":1646476282717},{"_id":"public/archives/2019/01/index.html","hash":"d50066d423eb5847b297e4c7bea5a5f0bef9e1ab","modified":1646476282717},{"_id":"public/archives/2019/02/index.html","hash":"4d843ba7cf970b6a68005ab28d7a13438842da47","modified":1646476282717},{"_id":"public/archives/2021/index.html","hash":"b920c48cd7b96b47406d041c9138555c2579175f","modified":1646476282717},{"_id":"public/archives/2021/03/index.html","hash":"a75c324af79d84c7e65b4d911ac87e795745d468","modified":1646476282717},{"_id":"public/archives/2021/04/index.html","hash":"d494ffe9346db930efa7b48324217730379c28c1","modified":1646476282717},{"_id":"public/tags/go/index.html","hash":"4ed08856660881d3a9ff2d10be0c96ed7770aa5e","modified":1646476381055},{"_id":"public/tags/k8s/index.html","hash":"feafa7e07c9813578944db6c3e45e35ca3d08b00","modified":1646476282717},{"_id":"public/tags/kubernetes/index.html","hash":"b52da7aac0b2660294fa305f5c70ad2d4553936a","modified":1646476282717},{"_id":"public/tags/mysql/index.html","hash":"4a5b562f0420d4ac0b2d0291954d610537b3510d","modified":1646476282717},{"_id":"public/tags/nginx/index.html","hash":"b4f7665e728d9ee94059cc2f127d44cfc5a212c2","modified":1646476282717},{"_id":"public/tags/nginx/page/2/index.html","hash":"f7b98c2a6d2c1594938db39eedfa99cf704dc6e7","modified":1646476282717},{"_id":"public/tags/redis/index.html","hash":"6e1ad77bdbe561a54cdc41a087ac4b3846928236","modified":1646476282717},{"_id":"public/2021/04/16/Go笔记-读写数据/index.html","hash":"658d411b23b408b0dbf7e8d75126e43e710a7f1b","modified":1646476282717},{"_id":"public/2021/04/02/Go笔记-接口与反射/index.html","hash":"f69102e3e02d783f23816654e9b66df277f05976","modified":1646476282717},{"_id":"public/2021/03/30/Go笔记-结构体与方法/index.html","hash":"31b83caf4099f7d3efc6b1f6426caf957102d95f","modified":1646476282717},{"_id":"public/2021/03/29/Go笔记-包/index.html","hash":"aceb59b9ba668c16ebb4bdaba8b0fb1131ba4a09","modified":1646476282717},{"_id":"public/2021/03/25/Go笔记-Map/index.html","hash":"d7d12ccb29c2a096ab83aa820127b3715bdbf561","modified":1646476282717},{"_id":"public/2021/03/14/Go笔记-函数/index.html","hash":"60c378bf0aaea9be1703304395686c9bc8669661","modified":1646476282717},{"_id":"public/2021/03/13/Go笔记-基础结构和数据类型/index.html","hash":"7571a6ae5b2ab87acc3ba0d5faee3893e4709e1c","modified":1646476282717},{"_id":"public/2021/03/18/Go笔记-数组与切片/index.html","hash":"7306ed4ba3e59449ec01e6b84daa7811def7d2ed","modified":1646476282717},{"_id":"public/2021/03/12/Kubernetes中进行简单应用部署/index.html","hash":"f2590e334abd81d0cf3f113926d570d049cdd6a5","modified":1646476282717},{"_id":"public/2019/02/19/Redis集群快速搭建/index.html","hash":"07b797395d113cb3501b36fea3b64eea7147fcb3","modified":1646476282717},{"_id":"public/2019/01/30/Redis在实际工作中遇到的各种应用场景/index.html","hash":"77b4e18c45a76ee411d237adc41cd6e881483c68","modified":1646476282717},{"_id":"public/2021/03/11/Kubernetes快速搭建与启动/index.html","hash":"fa2359f1caea63a8b771b2db41a95edb3ff79827","modified":1646476282717},{"_id":"public/2019/01/27/MYSQL事务隔离/index.html","hash":"b68362588c3b883ff96ac82a08a3009ac10db893","modified":1646476282717},{"_id":"public/2018/10/12/Nginx深入了解-高级-五/index.html","hash":"331d70e519e441d06f2a868f395fd6f804ea2caa","modified":1646476282717},{"_id":"public/2018/08/30/Nginx深入了解-高级-三/index.html","hash":"1c565fa592c066cf77d12cee37f3f9c41396cb48","modified":1646476282717},{"_id":"public/2018/08/18/Nginx深入了解-高级-二/index.html","hash":"bcf8e9f3b8ef3d424f70fc0b357decb3bf2ed857","modified":1646476282717},{"_id":"public/2018/08/13/Nginx深入了解-高级-一/index.html","hash":"92feb612dcfd78d70e9aed98dfdda2d0a8617820","modified":1646476282717},{"_id":"public/2018/08/13/Nginx深入了解-进阶-四/index.html","hash":"cded820cde661ac6c814ee04b39a7760d80d0392","modified":1646476282717},{"_id":"public/2018/08/11/Nginx深入了解-进阶-三/index.html","hash":"d39bcacb5cc7d639214ff79a313c256139dfdbe7","modified":1646476282717},{"_id":"public/2018/08/05/Nginx深入了解-进阶-二/index.html","hash":"da755bfc71599d1592cfd89d75f9ab0e16dfc67f","modified":1646476282717},{"_id":"public/2018/07/23/Nginx深入了解-进阶-一/index.html","hash":"f8c282fe8b8221b40a80e0c7d214f1924ce22a01","modified":1646476282717},{"_id":"public/2018/07/20/Nginx深入了解-基础-四/index.html","hash":"86cda357f1240814d872308e7137325334da7adc","modified":1646476282717},{"_id":"public/2018/07/19/Nginx深入了解-基础-三/index.html","hash":"184d55acdc682d477736d7f88179e669140a4b6a","modified":1646476282717},{"_id":"public/2018/07/17/Nginx深入了解-基础-一/index.html","hash":"10370206e1445d3287d94a6ed70ed8966e0c321f","modified":1646476282717},{"_id":"public/2018/07/17/Nginx深入了解-基础-二/index.html","hash":"576c02243eaa708e1bd30c8b2808a775e0d7ffd6","modified":1646476282717},{"_id":"public/index.html","hash":"a56815d45f1c45f83ca6de598f42537d8bc84d91","modified":1646476381055},{"_id":"public/page/2/index.html","hash":"3094f23fff84ba36ca4133b91ae01d0d7aa8ed73","modified":1646476282717},{"_id":"public/page/3/index.html","hash":"64bde7750f136c66b0be9a08a8948a1b0182100c","modified":1646476282717},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1632819817294},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1632819817294},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1632819817294},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1632819817294},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1632819817294},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1632819817294},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1632819817294},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1632819817294},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1632819817294},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1632819817294},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1632819817294},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1632819817294},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1632819817294},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1632819817294},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1632819817294},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1632819817294},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1632819817294},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1632819817294},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1632819817294},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1632819817294},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1632819817294},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1632819817294},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1632819817294},{"_id":"public/css/main.css","hash":"4346ebd41c55eb395ed38fee284f1f30e84bea7a","modified":1632819817294},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1632819817294},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1632819817294},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1632819817294},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1632819817294},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1632819817294},{"_id":"source/_posts/Go笔记-错误处理与测试.md","hash":"415c1ef7566fa2d2e6efe5cde3c2957588b93145","modified":1619503273876},{"_id":"public/2021/04/26/Go笔记-错误处理与测试/index.html","hash":"e074c532e707a2ffdbf353ebdbb77d8f6e995056","modified":1646476282717},{"_id":"public/archives/2021/page/2/index.html","hash":"41bd0d91a19c991cc524a07dc3d6a6ef8be5de69","modified":1646476282717},{"_id":"source/_posts/API服务.md","hash":"53bc57d51f41fd051d2d4766bec09de71d20e8f9","modified":1632819988324},{"_id":"public/archives/2021/09/index.html","hash":"6001911ca5cbcf46ded19423743e6abad44773a1","modified":1632968231949},{"_id":"public/2021/09/28/API服务/index.html","hash":"fe0c563531f06861103c2ada5b2ea7a59b3b15b8","modified":1632968231949},{"_id":"source/_posts/Go搭建CLI应用程序.md","hash":"f41d096f7ce4ac9613720391fdf039cc6de3cac3","modified":1632968224197},{"_id":"public/tags/Go/index.html","hash":"a251d0712e946664dcc1d6839b547c5982d23b12","modified":1632968231949},{"_id":"public/2021/09/30/Go搭建CLI应用程序/index.html","hash":"80ae3b96d0875fbe2a3873b1a0a45b129ca3ec66","modified":1632968231949},{"_id":"source/_posts/Go高效并发模式.md","hash":"534f7e9dde094aa072838fa6f1a8a46988966752","modified":1646476366606},{"_id":"public/archives/2022/index.html","hash":"26597ae966167c523a07b9f89e29cbaf9355d40f","modified":1646476282717},{"_id":"public/archives/2022/03/index.html","hash":"29ca56f0c8d55e8a0101618b401084c52ff9d697","modified":1646476282717},{"_id":"public/2022/03/05/Go高效并发模式/index.html","hash":"ab5f765f37f13cd686423368dfdb164e3ba729b3","modified":1646476381055}],"Category":[],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2021-03-22T02:19:35.754Z","updated":"2021-03-11T02:04:05.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cknwscb1w0001w7c90xld7gbp","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"标签","date":"2021-03-11T02:14:36.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-03-11 10:14:36\ntype: \"tags\"\n---\n","updated":"2021-03-11T02:15:11.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cknwscb1y0003w7c91be0375j","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Go笔记-Map","date":"2021-03-25T05:57:32.000Z","_content":"\nGo语言中`Map`是一种元素对的集合`(key=>value)`，一个`key`对应的值为`value`，可以根据`key`快速的定位到`value`，也称之为关联数组或者字典。\n\n<!-- more -->\n\n#### 声明和初始化Map\n\nMap是一种引用结构，声明如下：\n\n```go\nvar map1 make[keytype]valuetype\n// 如\nvar map1 make[string]int\n```\n\n声明时不需要指定`map`的长度，`map`会根据内容动态增长。未初始化的`map`值为`nil`\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar mapLit map[string]int\n\tvar mapAssigned map[string]int\n\n\tmapLit = map[string]int{\"one\": 1, \"two\": 2}\n\tmapAssigned = mapLit\n\tmapAssigned[\"two\"] = 3\n\n\tfmt.Printf(\"mapLit at \\\"two\\\" is: %d\\n\", mapLit[\"two\"]) // 3\n}\n```\n\n不要使用`new`来构造`map`，而是使用`make`。\n\n##### Map的容量\n\nMap会根据新增的`key-value`动态的进行伸缩，所以`Map`没有固定长度和最大限制，对于比较大的或者会快速扩张的`Map`，最好是能标明其容量。\n\n##### 使用切片作为Map的值\n\n`Map`中一个`key`对应一个`value`值，`value`是一个原始类型，如果我们需要一个`key`对应到多个`value`值时，此时我们就可以使用切片作为`key`的值来解决这个问题。\n\n```go\nmap1 := make(map[int][]int)\nmap2 := make(map[int]*[]int)\n```\n\n#### 判断Map中键值对是否存在及删除元素操作\n\n##### 判断键值对是否存在\n\n```go\nmap1 := make(map[string]int)\n\nmap1[\"key1\"] = 1\n```\n\n我们可以通过`map1[\"key1\"]`来获取`map1`中`key1`的值，但如果`key1`不存在，`val1`就是一个值类型的空值。这种情况没有办法区分`key1`是否存在，还是说`val1`本来就是一个空值。\n\n此时我们就需要判断`key1`是否存在`map1`中：\n\n```go\nval1, isPresent = map1[\"key1\"]\n```\n\n`isPresent`是一个`bool`值，`true`说明存在，相反说明`map1`中没有`key1`。\n\n```go\nif _, ok := map1[key1]; ok {\n  // TODO\n}\n```\n\n##### 从Map中删除元素\n\n使用`delete(map1, key1)`就可以删除`map1`中键为`key1`的元素。就算`key1`不存在，也不会报错。\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar mapLit map[string]int\n\tvar mapAssigned map[string]int\n\n\tmapLit = map[string]int{\"one\": 1, \"two\": 2}\n\tmapAssigned = mapLit\n\tmapAssigned[\"two\"] = 3\n\n\tfmt.Printf(\"mapLit at \\\"two\\\" is: %d\\n\", mapLit[\"two\"]) // 3\n\n\tdelete(mapLit, \"one\")\n\n  fmt.Println(mapLit) // map[two:3]\n}\n```\n\n##### Map排序\n\nmap默认是无序的，如果想要对map进行排序，需要将map的key或者value拷贝到一个切片中，再对切片食用`sort`进行排序。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n  \"sort\"\n)\n\nvar barVal = map[string]int{\"alpha\":35,\"bravo\":56,\"charlie\":23,\"delta\":87,\"echo\":56}\n\nfunc main() {\n  fmt.Println(\"before sort:\")\n  for k, v := range barVal {\n    fmt.Printf(\"Key: %v, Value: %v /\", k, v)\n  }\n  keys := make([]string, len(barVal))\n  i := 0\n  for k, _ := range barVal {\n    keys[i] = k\n    i++\n  }\n  \n  sort.Strings(keys)\n  fmt.Println()\n  fmt.Println(\"after sort:\")\n  for _, k := range keys {\n    fmt.Printf(\"Key: %v, Value: %v /\", k, barVal[k])\n  }\n}\n```\n\n```\n// out\nbefore sort:\nKey: echo, Value: 56 /Key: alpha, Value: 35 /Key: bravo, Value: 56 /Key: charlie, Value: 23 /Key: delta, Value: 87 /\nafter sort:\nKey: alpha, Value: 35 /Key: bravo, Value: 56 /Key: charlie, Value: 23 /Key: delta, Value: 87 /Key: echo, Value: 56 /\n```\n\n","source":"_posts/Go笔记-Map.md","raw":"---\ntitle: Go笔记-Map\ndate: 2021-03-25 13:57:32\ntags: go\n---\n\nGo语言中`Map`是一种元素对的集合`(key=>value)`，一个`key`对应的值为`value`，可以根据`key`快速的定位到`value`，也称之为关联数组或者字典。\n\n<!-- more -->\n\n#### 声明和初始化Map\n\nMap是一种引用结构，声明如下：\n\n```go\nvar map1 make[keytype]valuetype\n// 如\nvar map1 make[string]int\n```\n\n声明时不需要指定`map`的长度，`map`会根据内容动态增长。未初始化的`map`值为`nil`\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar mapLit map[string]int\n\tvar mapAssigned map[string]int\n\n\tmapLit = map[string]int{\"one\": 1, \"two\": 2}\n\tmapAssigned = mapLit\n\tmapAssigned[\"two\"] = 3\n\n\tfmt.Printf(\"mapLit at \\\"two\\\" is: %d\\n\", mapLit[\"two\"]) // 3\n}\n```\n\n不要使用`new`来构造`map`，而是使用`make`。\n\n##### Map的容量\n\nMap会根据新增的`key-value`动态的进行伸缩，所以`Map`没有固定长度和最大限制，对于比较大的或者会快速扩张的`Map`，最好是能标明其容量。\n\n##### 使用切片作为Map的值\n\n`Map`中一个`key`对应一个`value`值，`value`是一个原始类型，如果我们需要一个`key`对应到多个`value`值时，此时我们就可以使用切片作为`key`的值来解决这个问题。\n\n```go\nmap1 := make(map[int][]int)\nmap2 := make(map[int]*[]int)\n```\n\n#### 判断Map中键值对是否存在及删除元素操作\n\n##### 判断键值对是否存在\n\n```go\nmap1 := make(map[string]int)\n\nmap1[\"key1\"] = 1\n```\n\n我们可以通过`map1[\"key1\"]`来获取`map1`中`key1`的值，但如果`key1`不存在，`val1`就是一个值类型的空值。这种情况没有办法区分`key1`是否存在，还是说`val1`本来就是一个空值。\n\n此时我们就需要判断`key1`是否存在`map1`中：\n\n```go\nval1, isPresent = map1[\"key1\"]\n```\n\n`isPresent`是一个`bool`值，`true`说明存在，相反说明`map1`中没有`key1`。\n\n```go\nif _, ok := map1[key1]; ok {\n  // TODO\n}\n```\n\n##### 从Map中删除元素\n\n使用`delete(map1, key1)`就可以删除`map1`中键为`key1`的元素。就算`key1`不存在，也不会报错。\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar mapLit map[string]int\n\tvar mapAssigned map[string]int\n\n\tmapLit = map[string]int{\"one\": 1, \"two\": 2}\n\tmapAssigned = mapLit\n\tmapAssigned[\"two\"] = 3\n\n\tfmt.Printf(\"mapLit at \\\"two\\\" is: %d\\n\", mapLit[\"two\"]) // 3\n\n\tdelete(mapLit, \"one\")\n\n  fmt.Println(mapLit) // map[two:3]\n}\n```\n\n##### Map排序\n\nmap默认是无序的，如果想要对map进行排序，需要将map的key或者value拷贝到一个切片中，再对切片食用`sort`进行排序。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n  \"sort\"\n)\n\nvar barVal = map[string]int{\"alpha\":35,\"bravo\":56,\"charlie\":23,\"delta\":87,\"echo\":56}\n\nfunc main() {\n  fmt.Println(\"before sort:\")\n  for k, v := range barVal {\n    fmt.Printf(\"Key: %v, Value: %v /\", k, v)\n  }\n  keys := make([]string, len(barVal))\n  i := 0\n  for k, _ := range barVal {\n    keys[i] = k\n    i++\n  }\n  \n  sort.Strings(keys)\n  fmt.Println()\n  fmt.Println(\"after sort:\")\n  for _, k := range keys {\n    fmt.Printf(\"Key: %v, Value: %v /\", k, barVal[k])\n  }\n}\n```\n\n```\n// out\nbefore sort:\nKey: echo, Value: 56 /Key: alpha, Value: 35 /Key: bravo, Value: 56 /Key: charlie, Value: 23 /Key: delta, Value: 87 /\nafter sort:\nKey: alpha, Value: 35 /Key: bravo, Value: 56 /Key: charlie, Value: 23 /Key: delta, Value: 87 /Key: echo, Value: 56 /\n```\n\n","slug":"Go笔记-Map","published":1,"updated":"2021-03-29T07:15:29.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb1q0000w7c975asc7hl","content":"<p>Go语言中<code>Map</code>是一种元素对的集合<code>(key=&gt;value)</code>，一个<code>key</code>对应的值为<code>value</code>，可以根据<code>key</code>快速的定位到<code>value</code>，也称之为关联数组或者字典。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"声明和初始化Map\"><a href=\"#声明和初始化Map\" class=\"headerlink\" title=\"声明和初始化Map\"></a>声明和初始化Map</h4><p>Map是一种引用结构，声明如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map1 <span class=\"built_in\">make</span>[keytype]valuetype</span><br><span class=\"line\"><span class=\"comment\">// 如</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> map1 <span class=\"built_in\">make</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure>\n\n<p>声明时不需要指定<code>map</code>的长度，<code>map</code>会根据内容动态增长。未初始化的<code>map</code>值为<code>nil</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapLit <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapAssigned <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tmapLit = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">&quot;one&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;two&quot;</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">\tmapAssigned = mapLit</span><br><span class=\"line\">\tmapAssigned[<span class=\"string\">&quot;two&quot;</span>] = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;mapLit at \\&quot;two\\&quot; is: %d\\n&quot;</span>, mapLit[<span class=\"string\">&quot;two&quot;</span>]) <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不要使用<code>new</code>来构造<code>map</code>，而是使用<code>make</code>。</p>\n<h5 id=\"Map的容量\"><a href=\"#Map的容量\" class=\"headerlink\" title=\"Map的容量\"></a>Map的容量</h5><p>Map会根据新增的<code>key-value</code>动态的进行伸缩，所以<code>Map</code>没有固定长度和最大限制，对于比较大的或者会快速扩张的<code>Map</code>，最好是能标明其容量。</p>\n<h5 id=\"使用切片作为Map的值\"><a href=\"#使用切片作为Map的值\" class=\"headerlink\" title=\"使用切片作为Map的值\"></a>使用切片作为Map的值</h5><p><code>Map</code>中一个<code>key</code>对应一个<code>value</code>值，<code>value</code>是一个原始类型，如果我们需要一个<code>key</code>对应到多个<code>value</code>值时，此时我们就可以使用切片作为<code>key</code>的值来解决这个问题。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">map2 := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]*[]<span class=\"keyword\">int</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"判断Map中键值对是否存在及删除元素操作\"><a href=\"#判断Map中键值对是否存在及删除元素操作\" class=\"headerlink\" title=\"判断Map中键值对是否存在及删除元素操作\"></a>判断Map中键值对是否存在及删除元素操作</h4><h5 id=\"判断键值对是否存在\"><a href=\"#判断键值对是否存在\" class=\"headerlink\" title=\"判断键值对是否存在\"></a>判断键值对是否存在</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">map1[<span class=\"string\">&quot;key1&quot;</span>] = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以通过<code>map1[&quot;key1&quot;]</code>来获取<code>map1</code>中<code>key1</code>的值，但如果<code>key1</code>不存在，<code>val1</code>就是一个值类型的空值。这种情况没有办法区分<code>key1</code>是否存在，还是说<code>val1</code>本来就是一个空值。</p>\n<p>此时我们就需要判断<code>key1</code>是否存在<code>map1</code>中：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val1, isPresent = map1[<span class=\"string\">&quot;key1&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><code>isPresent</code>是一个<code>bool</code>值，<code>true</code>说明存在，相反说明<code>map1</code>中没有<code>key1</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> _, ok := map1[key1]; ok &#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"从Map中删除元素\"><a href=\"#从Map中删除元素\" class=\"headerlink\" title=\"从Map中删除元素\"></a>从Map中删除元素</h5><p>使用<code>delete(map1, key1)</code>就可以删除<code>map1</code>中键为<code>key1</code>的元素。就算<code>key1</code>不存在，也不会报错。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapLit <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapAssigned <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tmapLit = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">&quot;one&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;two&quot;</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">\tmapAssigned = mapLit</span><br><span class=\"line\">\tmapAssigned[<span class=\"string\">&quot;two&quot;</span>] = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;mapLit at \\&quot;two\\&quot; is: %d\\n&quot;</span>, mapLit[<span class=\"string\">&quot;two&quot;</span>]) <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">delete</span>(mapLit, <span class=\"string\">&quot;one&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Println(mapLit) <span class=\"comment\">// map[two:3]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Map排序\"><a href=\"#Map排序\" class=\"headerlink\" title=\"Map排序\"></a>Map排序</h5><p>map默认是无序的，如果想要对map进行排序，需要将map的key或者value拷贝到一个切片中，再对切片食用<code>sort</code>进行排序。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;sort&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> barVal = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">&quot;alpha&quot;</span>:<span class=\"number\">35</span>,<span class=\"string\">&quot;bravo&quot;</span>:<span class=\"number\">56</span>,<span class=\"string\">&quot;charlie&quot;</span>:<span class=\"number\">23</span>,<span class=\"string\">&quot;delta&quot;</span>:<span class=\"number\">87</span>,<span class=\"string\">&quot;echo&quot;</span>:<span class=\"number\">56</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;before sort:&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> barVal &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Key: %v, Value: %v /&quot;</span>, k, v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  keys := <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"built_in\">len</span>(barVal))</span><br><span class=\"line\">  i := <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> k, _ := <span class=\"keyword\">range</span> barVal &#123;</span><br><span class=\"line\">    keys[i] = k</span><br><span class=\"line\">    i++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  sort.Strings(keys)</span><br><span class=\"line\">  fmt.Println()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;after sort:&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, k := <span class=\"keyword\">range</span> keys &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Key: %v, Value: %v /&quot;</span>, k, barVal[k])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; out</span><br><span class=\"line\">before sort:</span><br><span class=\"line\">Key: echo, Value: 56 &#x2F;Key: alpha, Value: 35 &#x2F;Key: bravo, Value: 56 &#x2F;Key: charlie, Value: 23 &#x2F;Key: delta, Value: 87 &#x2F;</span><br><span class=\"line\">after sort:</span><br><span class=\"line\">Key: alpha, Value: 35 &#x2F;Key: bravo, Value: 56 &#x2F;Key: charlie, Value: 23 &#x2F;Key: delta, Value: 87 &#x2F;Key: echo, Value: 56 &#x2F;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>Go语言中<code>Map</code>是一种元素对的集合<code>(key=&gt;value)</code>，一个<code>key</code>对应的值为<code>value</code>，可以根据<code>key</code>快速的定位到<code>value</code>，也称之为关联数组或者字典。</p>","more":"<h4 id=\"声明和初始化Map\"><a href=\"#声明和初始化Map\" class=\"headerlink\" title=\"声明和初始化Map\"></a>声明和初始化Map</h4><p>Map是一种引用结构，声明如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map1 <span class=\"built_in\">make</span>[keytype]valuetype</span><br><span class=\"line\"><span class=\"comment\">// 如</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> map1 <span class=\"built_in\">make</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure>\n\n<p>声明时不需要指定<code>map</code>的长度，<code>map</code>会根据内容动态增长。未初始化的<code>map</code>值为<code>nil</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapLit <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapAssigned <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tmapLit = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">&quot;one&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;two&quot;</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">\tmapAssigned = mapLit</span><br><span class=\"line\">\tmapAssigned[<span class=\"string\">&quot;two&quot;</span>] = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;mapLit at \\&quot;two\\&quot; is: %d\\n&quot;</span>, mapLit[<span class=\"string\">&quot;two&quot;</span>]) <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不要使用<code>new</code>来构造<code>map</code>，而是使用<code>make</code>。</p>\n<h5 id=\"Map的容量\"><a href=\"#Map的容量\" class=\"headerlink\" title=\"Map的容量\"></a>Map的容量</h5><p>Map会根据新增的<code>key-value</code>动态的进行伸缩，所以<code>Map</code>没有固定长度和最大限制，对于比较大的或者会快速扩张的<code>Map</code>，最好是能标明其容量。</p>\n<h5 id=\"使用切片作为Map的值\"><a href=\"#使用切片作为Map的值\" class=\"headerlink\" title=\"使用切片作为Map的值\"></a>使用切片作为Map的值</h5><p><code>Map</code>中一个<code>key</code>对应一个<code>value</code>值，<code>value</code>是一个原始类型，如果我们需要一个<code>key</code>对应到多个<code>value</code>值时，此时我们就可以使用切片作为<code>key</code>的值来解决这个问题。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>][]<span class=\"keyword\">int</span>)</span><br><span class=\"line\">map2 := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]*[]<span class=\"keyword\">int</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"判断Map中键值对是否存在及删除元素操作\"><a href=\"#判断Map中键值对是否存在及删除元素操作\" class=\"headerlink\" title=\"判断Map中键值对是否存在及删除元素操作\"></a>判断Map中键值对是否存在及删除元素操作</h4><h5 id=\"判断键值对是否存在\"><a href=\"#判断键值对是否存在\" class=\"headerlink\" title=\"判断键值对是否存在\"></a>判断键值对是否存在</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map1 := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">map1[<span class=\"string\">&quot;key1&quot;</span>] = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以通过<code>map1[&quot;key1&quot;]</code>来获取<code>map1</code>中<code>key1</code>的值，但如果<code>key1</code>不存在，<code>val1</code>就是一个值类型的空值。这种情况没有办法区分<code>key1</code>是否存在，还是说<code>val1</code>本来就是一个空值。</p>\n<p>此时我们就需要判断<code>key1</code>是否存在<code>map1</code>中：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">val1, isPresent = map1[<span class=\"string\">&quot;key1&quot;</span>]</span><br></pre></td></tr></table></figure>\n\n<p><code>isPresent</code>是一个<code>bool</code>值，<code>true</code>说明存在，相反说明<code>map1</code>中没有<code>key1</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> _, ok := map1[key1]; ok &#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"从Map中删除元素\"><a href=\"#从Map中删除元素\" class=\"headerlink\" title=\"从Map中删除元素\"></a>从Map中删除元素</h5><p>使用<code>delete(map1, key1)</code>就可以删除<code>map1</code>中键为<code>key1</code>的元素。就算<code>key1</code>不存在，也不会报错。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapLit <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mapAssigned <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tmapLit = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">&quot;one&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;two&quot;</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">\tmapAssigned = mapLit</span><br><span class=\"line\">\tmapAssigned[<span class=\"string\">&quot;two&quot;</span>] = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;mapLit at \\&quot;two\\&quot; is: %d\\n&quot;</span>, mapLit[<span class=\"string\">&quot;two&quot;</span>]) <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">delete</span>(mapLit, <span class=\"string\">&quot;one&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Println(mapLit) <span class=\"comment\">// map[two:3]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Map排序\"><a href=\"#Map排序\" class=\"headerlink\" title=\"Map排序\"></a>Map排序</h5><p>map默认是无序的，如果想要对map进行排序，需要将map的key或者value拷贝到一个切片中，再对切片食用<code>sort</code>进行排序。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;sort&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> barVal = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">&quot;alpha&quot;</span>:<span class=\"number\">35</span>,<span class=\"string\">&quot;bravo&quot;</span>:<span class=\"number\">56</span>,<span class=\"string\">&quot;charlie&quot;</span>:<span class=\"number\">23</span>,<span class=\"string\">&quot;delta&quot;</span>:<span class=\"number\">87</span>,<span class=\"string\">&quot;echo&quot;</span>:<span class=\"number\">56</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;before sort:&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> barVal &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Key: %v, Value: %v /&quot;</span>, k, v)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  keys := <span class=\"built_in\">make</span>([]<span class=\"keyword\">string</span>, <span class=\"built_in\">len</span>(barVal))</span><br><span class=\"line\">  i := <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> k, _ := <span class=\"keyword\">range</span> barVal &#123;</span><br><span class=\"line\">    keys[i] = k</span><br><span class=\"line\">    i++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  sort.Strings(keys)</span><br><span class=\"line\">  fmt.Println()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;after sort:&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, k := <span class=\"keyword\">range</span> keys &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Key: %v, Value: %v /&quot;</span>, k, barVal[k])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; out</span><br><span class=\"line\">before sort:</span><br><span class=\"line\">Key: echo, Value: 56 &#x2F;Key: alpha, Value: 35 &#x2F;Key: bravo, Value: 56 &#x2F;Key: charlie, Value: 23 &#x2F;Key: delta, Value: 87 &#x2F;</span><br><span class=\"line\">after sort:</span><br><span class=\"line\">Key: alpha, Value: 35 &#x2F;Key: bravo, Value: 56 &#x2F;Key: charlie, Value: 23 &#x2F;Key: delta, Value: 87 &#x2F;Key: echo, Value: 56 &#x2F;</span><br></pre></td></tr></table></figure>"},{"title":"Go笔记-包","date":"2021-03-29T07:16:18.000Z","_content":"\nGo语言中的内置包(package)多达150多个，像`fmt`、`os`等，go语言的内置包称之为标准库，对应的列表可以查询[这里](https://gowalker.org/search?q=gorepos)。\n\n<!-- more -->\n\n#### regexp包\n\nregexp用来进行正则表达式匹配的标准库。\n\n```go\nok, _ := regexp.Match(pat, []byte(searchIn))\n```\n\n`ok`返回`boolean`值`true/false`。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n  \"regexp\"\n)\n\nfunc main() {\n  //目标字符串\n\tsearchIn := \"John: 2578.34 William: 4567.23 Steve: 5632.18\"\n\tpat := \"[0-9]+.[0-9]+\" //正则\n\n\tf := func(s string) string{\n    \tv, _ := strconv.ParseFloat(s, 32)\n    \treturn strconv.FormatFloat(v * 2, 'f', 2, 32)\n\t}\n\n\tif ok, _ := regexp.Match(pat, []byte(searchIn)); ok {\n    fmt.Println(\"匹配成功!\")\n\t}\n\n\tre, _ := regexp.Compile(pat)\n\t//将匹配到的部分替换为\"##.#\"\n\tstr := re.ReplaceAllString(searchIn, \"##.#\")\n\tfmt.Println(str) // John: ##.# William: ##.# Steve: ##.#\n\t//参数为函数时\n\tstr2 := re.ReplaceAllStringFunc(searchIn, f)\n\tfmt.Println(str2) // John: 5156.68 William: 9134.46 Steve: 11264.36\n}\n```\n\n#### 锁和sync\n\nGo中锁是通过`sync`包中的`Mutex`来实现的。\n\n`sync.Mutex`是一个互斥锁，它可以保证在临界区入口同一个时间只能有一个线程进入临界区，线程将有序的对同一变量进行访问。\n\neg:\n\n```go\nimport \"sync\"\n\ntype Info struct {\n  mu sync.Mutex\n  Str string\n}\n\nfunc Update(info *Info) {\n  info.mu.Lock()\n  info.Str = \"new string\"\n  info.mu.Unlock()\n}\n```\n\n有时我们允许在同一时间有多个线程对变量进行访问，但是又不允许同时对其修改，我们需要使用`sync`包中的`RWMutex`锁可以通过`Rlock()`来允许同一时间多个线程对变量进行读操作，但是同一时间只能有一个线程进行写操作。\n\n","source":"_posts/Go笔记-包.md","raw":"---\ntitle: Go笔记-包\ndate: 2021-03-29 15:16:18\ntags: go\n---\n\nGo语言中的内置包(package)多达150多个，像`fmt`、`os`等，go语言的内置包称之为标准库，对应的列表可以查询[这里](https://gowalker.org/search?q=gorepos)。\n\n<!-- more -->\n\n#### regexp包\n\nregexp用来进行正则表达式匹配的标准库。\n\n```go\nok, _ := regexp.Match(pat, []byte(searchIn))\n```\n\n`ok`返回`boolean`值`true/false`。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n  \"regexp\"\n)\n\nfunc main() {\n  //目标字符串\n\tsearchIn := \"John: 2578.34 William: 4567.23 Steve: 5632.18\"\n\tpat := \"[0-9]+.[0-9]+\" //正则\n\n\tf := func(s string) string{\n    \tv, _ := strconv.ParseFloat(s, 32)\n    \treturn strconv.FormatFloat(v * 2, 'f', 2, 32)\n\t}\n\n\tif ok, _ := regexp.Match(pat, []byte(searchIn)); ok {\n    fmt.Println(\"匹配成功!\")\n\t}\n\n\tre, _ := regexp.Compile(pat)\n\t//将匹配到的部分替换为\"##.#\"\n\tstr := re.ReplaceAllString(searchIn, \"##.#\")\n\tfmt.Println(str) // John: ##.# William: ##.# Steve: ##.#\n\t//参数为函数时\n\tstr2 := re.ReplaceAllStringFunc(searchIn, f)\n\tfmt.Println(str2) // John: 5156.68 William: 9134.46 Steve: 11264.36\n}\n```\n\n#### 锁和sync\n\nGo中锁是通过`sync`包中的`Mutex`来实现的。\n\n`sync.Mutex`是一个互斥锁，它可以保证在临界区入口同一个时间只能有一个线程进入临界区，线程将有序的对同一变量进行访问。\n\neg:\n\n```go\nimport \"sync\"\n\ntype Info struct {\n  mu sync.Mutex\n  Str string\n}\n\nfunc Update(info *Info) {\n  info.mu.Lock()\n  info.Str = \"new string\"\n  info.mu.Unlock()\n}\n```\n\n有时我们允许在同一时间有多个线程对变量进行访问，但是又不允许同时对其修改，我们需要使用`sync`包中的`RWMutex`锁可以通过`Rlock()`来允许同一时间多个线程对变量进行读操作，但是同一时间只能有一个线程进行写操作。\n\n","slug":"Go笔记-包","published":1,"updated":"2021-03-30T06:45:39.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb1w0002w7c94ww2a0vi","content":"<p>Go语言中的内置包(package)多达150多个，像<code>fmt</code>、<code>os</code>等，go语言的内置包称之为标准库，对应的列表可以查询<a href=\"https://gowalker.org/search?q=gorepos\">这里</a>。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"regexp包\"><a href=\"#regexp包\" class=\"headerlink\" title=\"regexp包\"></a>regexp包</h4><p>regexp用来进行正则表达式匹配的标准库。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ok, _ := regexp.Match(pat, []<span class=\"keyword\">byte</span>(searchIn))</span><br></pre></td></tr></table></figure>\n\n<p><code>ok</code>返回<code>boolean</code>值<code>true/false</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;regexp&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//目标字符串</span></span><br><span class=\"line\">\tsearchIn := <span class=\"string\">&quot;John: 2578.34 William: 4567.23 Steve: 5632.18&quot;</span></span><br><span class=\"line\">\tpat := <span class=\"string\">&quot;[0-9]+.[0-9]+&quot;</span> <span class=\"comment\">//正则</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tf := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span>&#123;</span><br><span class=\"line\">    \tv, _ := strconv.ParseFloat(s, <span class=\"number\">32</span>)</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> strconv.FormatFloat(v * <span class=\"number\">2</span>, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ok, _ := regexp.Match(pat, []<span class=\"keyword\">byte</span>(searchIn)); ok &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;匹配成功!&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tre, _ := regexp.Compile(pat)</span><br><span class=\"line\">\t<span class=\"comment\">//将匹配到的部分替换为&quot;##.#&quot;</span></span><br><span class=\"line\">\tstr := re.ReplaceAllString(searchIn, <span class=\"string\">&quot;##.#&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(str) <span class=\"comment\">// John: ##.# William: ##.# Steve: ##.#</span></span><br><span class=\"line\">\t<span class=\"comment\">//参数为函数时</span></span><br><span class=\"line\">\tstr2 := re.ReplaceAllStringFunc(searchIn, f)</span><br><span class=\"line\">\tfmt.Println(str2) <span class=\"comment\">// John: 5156.68 William: 9134.46 Steve: 11264.36</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"锁和sync\"><a href=\"#锁和sync\" class=\"headerlink\" title=\"锁和sync\"></a>锁和sync</h4><p>Go中锁是通过<code>sync</code>包中的<code>Mutex</code>来实现的。</p>\n<p><code>sync.Mutex</code>是一个互斥锁，它可以保证在临界区入口同一个时间只能有一个线程进入临界区，线程将有序的对同一变量进行访问。</p>\n<p>eg:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Info <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  mu sync.Mutex</span><br><span class=\"line\">  Str <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Update</span><span class=\"params\">(info *Info)</span></span> &#123;</span><br><span class=\"line\">  info.mu.Lock()</span><br><span class=\"line\">  info.Str = <span class=\"string\">&quot;new string&quot;</span></span><br><span class=\"line\">  info.mu.Unlock()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有时我们允许在同一时间有多个线程对变量进行访问，但是又不允许同时对其修改，我们需要使用<code>sync</code>包中的<code>RWMutex</code>锁可以通过<code>Rlock()</code>来允许同一时间多个线程对变量进行读操作，但是同一时间只能有一个线程进行写操作。</p>\n","site":{"data":{}},"excerpt":"<p>Go语言中的内置包(package)多达150多个，像<code>fmt</code>、<code>os</code>等，go语言的内置包称之为标准库，对应的列表可以查询<a href=\"https://gowalker.org/search?q=gorepos\">这里</a>。</p>","more":"<h4 id=\"regexp包\"><a href=\"#regexp包\" class=\"headerlink\" title=\"regexp包\"></a>regexp包</h4><p>regexp用来进行正则表达式匹配的标准库。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ok, _ := regexp.Match(pat, []<span class=\"keyword\">byte</span>(searchIn))</span><br></pre></td></tr></table></figure>\n\n<p><code>ok</code>返回<code>boolean</code>值<code>true/false</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;regexp&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//目标字符串</span></span><br><span class=\"line\">\tsearchIn := <span class=\"string\">&quot;John: 2578.34 William: 4567.23 Steve: 5632.18&quot;</span></span><br><span class=\"line\">\tpat := <span class=\"string\">&quot;[0-9]+.[0-9]+&quot;</span> <span class=\"comment\">//正则</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tf := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(s <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span>&#123;</span><br><span class=\"line\">    \tv, _ := strconv.ParseFloat(s, <span class=\"number\">32</span>)</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> strconv.FormatFloat(v * <span class=\"number\">2</span>, <span class=\"string\">&#x27;f&#x27;</span>, <span class=\"number\">2</span>, <span class=\"number\">32</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ok, _ := regexp.Match(pat, []<span class=\"keyword\">byte</span>(searchIn)); ok &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;匹配成功!&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tre, _ := regexp.Compile(pat)</span><br><span class=\"line\">\t<span class=\"comment\">//将匹配到的部分替换为&quot;##.#&quot;</span></span><br><span class=\"line\">\tstr := re.ReplaceAllString(searchIn, <span class=\"string\">&quot;##.#&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(str) <span class=\"comment\">// John: ##.# William: ##.# Steve: ##.#</span></span><br><span class=\"line\">\t<span class=\"comment\">//参数为函数时</span></span><br><span class=\"line\">\tstr2 := re.ReplaceAllStringFunc(searchIn, f)</span><br><span class=\"line\">\tfmt.Println(str2) <span class=\"comment\">// John: 5156.68 William: 9134.46 Steve: 11264.36</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"锁和sync\"><a href=\"#锁和sync\" class=\"headerlink\" title=\"锁和sync\"></a>锁和sync</h4><p>Go中锁是通过<code>sync</code>包中的<code>Mutex</code>来实现的。</p>\n<p><code>sync.Mutex</code>是一个互斥锁，它可以保证在临界区入口同一个时间只能有一个线程进入临界区，线程将有序的对同一变量进行访问。</p>\n<p>eg:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Info <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  mu sync.Mutex</span><br><span class=\"line\">  Str <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Update</span><span class=\"params\">(info *Info)</span></span> &#123;</span><br><span class=\"line\">  info.mu.Lock()</span><br><span class=\"line\">  info.Str = <span class=\"string\">&quot;new string&quot;</span></span><br><span class=\"line\">  info.mu.Unlock()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有时我们允许在同一时间有多个线程对变量进行访问，但是又不允许同时对其修改，我们需要使用<code>sync</code>包中的<code>RWMutex</code>锁可以通过<code>Rlock()</code>来允许同一时间多个线程对变量进行读操作，但是同一时间只能有一个线程进行写操作。</p>"},{"title":"Go笔记-函数","date":"2021-03-14T04:53:12.000Z","_content":"\nGo是编译型语言，所以函数编写的顺序是无关紧要的。编写多个函数的主要目的是将一个需要很多行代码的复杂问题分解为一系列简单的函数来解决，有助于代码复用。\n\n<!-- more -->\n\nGo里有三种类型的函数：\n\n- 带有参数的普通函数\n- 匿名函数\n- 方法\n\n除了```main()```、```init()```函数外，其它所有类型的函数都可以有参数与返回值。函数参数、返回值以及它们的类型被统称为函数签名。\n\n函数被调用格式：\n\n```go\n包.函数名(参数1, 参数2, ...)\n```\n\n函数是一等公民，它们可以赋值给变量，```add := binOp```。\n\n#### 函数参数与返回值\n\nGo函数可以传递多个参数，并且可以有多个返回值，这是相对于C、C++、Java等其他语言的一大特性。\n\n任何一个有返回值的函数，都必须以```return```或者```panic```结束。在函数块里，```return```之后的语句都不会被执行，如果一个函数需要返回值，这个函数里每一个分支都要有返回值。如下面这个函数不会被编译：\n\n```go\nfunc (st *Stack) Pop() int {\n    v := 0\n    for ix := len(st) - 1; ix >= 0; ix-- {\n        if v = st[ix]; v != 0 {\n            st[ix] = 0\n            return v\n        }\n    }\n}\n```\n\n正确的写法:\n\n```go\nfunc (st *Stack) Pop() int {\n    v := 0\n    for ix := len(st) - 1; ix >= 0; ix-- {\n        if v = st[ix]; v != 0 {\n            st[ix] = 0\n            return v\n        }\n    }\n  \treturn v\n}\n```\n\n##### 函数传参\n\n- 函数的参数传递有两种：按值传递、按引用传递。\n\n  - Go默认使用按值传递来传递参数，函数在接收参数后被修改，不会影响原来参数的值。\n\n    ```go\n    Function(arg type){}\n    ```\n\n  - 如果希望函数可以直接修改参数的值，就要使用按引用传递来进行传参，此时传递给函数的是一个指针。\n\n    ```go\n    Function(a *A){}\n    ```\n\n    \n\n##### 返回值\n\n当函数需要返回多个非命名返回值时，需要使用```()```把他们括起来，如```(int, int)```\n\n```go\nfunc getX2AndX3(input int) (int, int) {\n    return 2 * input, 3 * input\n}\n```\n\n当函数需要返回命名返回值时，即使是一个返回值也需要括起来\n\n```go\nfunc getX2AndX3_2(input int) (x2 int, x3 int) {\n    x2 = 2 * input\n    x3 = 3 * input\n    return\n}\n```\n\n##### 空白符\n\n空白符```_```用来匹配一些使用不到的返回值，然后丢弃掉。\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var i1 int\n    var f1 float32\n    i1, _, f1 = ThreeValues()\n    fmt.Printf(\"The int: %d, the float: %f \\n\", i1, f1)\n}\n\nfunc ThreeValues() (int, int, float32) {\n    return 5, 6, 7.5\n}\n```\n\n##### 改变外部变量\n\n使用按值传递，不但可以节省内存，还可以改变外部变量的值，修改的值不需要再```return```回来。\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc Multiply(a, b int, reply *int) {\n    *reply = a * b\n}\n\nfunc main() {\n    n := 0\n    reply := &n\n    Multiply(10, 5, reply)\n    fmt.Println(\"Multiply:\", *reply)\n}\n```\n\n#### 传递变长参数\n\n函数传参如```Function(...type)```的形式传递，说明函数处理的是一个变长的参数。\n\n```go\nfunc myFunc(a, b, c ...int) {}\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tx := min(1, 3, 2, 0)\n\tfmt.Printf(\"The minimum is: %d\\n\", x)\n\tslice := []int{7,9,3,5,1}\n\tx = min(slice...)\n\tfmt.Printf(\"The minimum in the slice is: %d\", x)\n}\n\nfunc min(s ...int) int {\n\tif len(s)==0 {\n\t\treturn 0\n\t}\n\tmin := s[0]\n\tfor _, v := range s {\n\t\tif v < min {\n\t\t\tmin = v\n\t\t}\n\t}\n\treturn min\n}\n```\n\n#### defer和追踪\n\n关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 `return` 语句之后）一刻才执行某个语句或函数\n\n类似于其他语言如`Java`的`finally`\n\n```go\npackage main\nimport \"fmt\"\n\nfunc main() {\n\tfunction1()\n}\n\nfunc function1() {\n\tfmt.Printf(\"In function1 at the top\\n\")\n\tdefer function2()\n\tfmt.Printf(\"In function1 at the bottom!\\n\")\n}\n\nfunc function2() {\n\tfmt.Printf(\"Function2: Deferred until the end of the calling function!\")\n}\n```\n\n输出\n\n```\nIn function1 at the top\nIn function1 at the bottom!\nFunction2: Deferred until the end of the calling function!\n```\n\ndefer常见的一些操作：\n\n- 关闭文件流\n\n```go\ndefer file.Close()\n```\n\n- 解锁一个加锁的资源\n\n```go\nmu.Lock()  \ndefer mu.Unlock() \n```\n\n- 关闭数据库\n\n```go\ndefer disconnectFromDB()\n```\n\n#### 闭包\n\n不希望1给函数起名，可使用闭包:\n\n```go\nfunc(x, y int) int { return x + y }\n```\n\n匿名函数不能独立存在：\n\n```go\nfplus := func(x, y int) int { return x + y }\n```\n\n通过变量名对函数进行调用\n\n```go\nfplus(3,4)\n```\n\n也可以直接对匿名函数进行调用：\n\n```go\nfunc(x, y int) int { \n  return x + y \n}(3, 4)\n```\n\n#### 计算函数执行时间\n\n```go\nstart := time.Now()\nfunction()\nend := time.Now()\ndelta := end.Sub(start)\nfmt.Printf(\"function took this amount of time: %s\\n\", delta)\n```\n\n#### 通过内存缓存来提升性能\n\n通过在内存中缓存和重复利用相同计算的结果，称之为内存缓存。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nconst LIM = 41\n\nvar fibs [LIM]uint64\n\nfunc main() {\n\tvar result uint64 = 0\n\tstart := time.Now()\n\tfor i := 0; i < LIM; i++ {\n\t\tresult = fibonacci(i)\n\t\tfmt.Printf(\"fibonacci(%d) is: %d\\n\", i, result)\n\t}\n\tend := time.Now()\n\tdelta := end.Sub(start)\n\tfmt.Printf(\"func took this amount of time: %s\\n\", delta)\n}\nfunc fibonacci(n int) (res uint64) {\n\t// 见哈是否有缓存值\n\tif fibs[n] != 0 {\n\t\tres = fibs[n]\n\t\treturn\n\t}\n\tif n <= 1 {\n\t\tres = 1\n\t} else {\n\t\tres = fibonacci(n-1) + fibonacci(n-2)\n\t}\n\tfibs[n] = res // 缓存值\n\treturn\n}\n```\n\n","source":"_posts/Go笔记-函数.md","raw":"---\ntitle: Go笔记-函数\ndate: 2021-03-14 12:53:12\ntags: go\n---\n\nGo是编译型语言，所以函数编写的顺序是无关紧要的。编写多个函数的主要目的是将一个需要很多行代码的复杂问题分解为一系列简单的函数来解决，有助于代码复用。\n\n<!-- more -->\n\nGo里有三种类型的函数：\n\n- 带有参数的普通函数\n- 匿名函数\n- 方法\n\n除了```main()```、```init()```函数外，其它所有类型的函数都可以有参数与返回值。函数参数、返回值以及它们的类型被统称为函数签名。\n\n函数被调用格式：\n\n```go\n包.函数名(参数1, 参数2, ...)\n```\n\n函数是一等公民，它们可以赋值给变量，```add := binOp```。\n\n#### 函数参数与返回值\n\nGo函数可以传递多个参数，并且可以有多个返回值，这是相对于C、C++、Java等其他语言的一大特性。\n\n任何一个有返回值的函数，都必须以```return```或者```panic```结束。在函数块里，```return```之后的语句都不会被执行，如果一个函数需要返回值，这个函数里每一个分支都要有返回值。如下面这个函数不会被编译：\n\n```go\nfunc (st *Stack) Pop() int {\n    v := 0\n    for ix := len(st) - 1; ix >= 0; ix-- {\n        if v = st[ix]; v != 0 {\n            st[ix] = 0\n            return v\n        }\n    }\n}\n```\n\n正确的写法:\n\n```go\nfunc (st *Stack) Pop() int {\n    v := 0\n    for ix := len(st) - 1; ix >= 0; ix-- {\n        if v = st[ix]; v != 0 {\n            st[ix] = 0\n            return v\n        }\n    }\n  \treturn v\n}\n```\n\n##### 函数传参\n\n- 函数的参数传递有两种：按值传递、按引用传递。\n\n  - Go默认使用按值传递来传递参数，函数在接收参数后被修改，不会影响原来参数的值。\n\n    ```go\n    Function(arg type){}\n    ```\n\n  - 如果希望函数可以直接修改参数的值，就要使用按引用传递来进行传参，此时传递给函数的是一个指针。\n\n    ```go\n    Function(a *A){}\n    ```\n\n    \n\n##### 返回值\n\n当函数需要返回多个非命名返回值时，需要使用```()```把他们括起来，如```(int, int)```\n\n```go\nfunc getX2AndX3(input int) (int, int) {\n    return 2 * input, 3 * input\n}\n```\n\n当函数需要返回命名返回值时，即使是一个返回值也需要括起来\n\n```go\nfunc getX2AndX3_2(input int) (x2 int, x3 int) {\n    x2 = 2 * input\n    x3 = 3 * input\n    return\n}\n```\n\n##### 空白符\n\n空白符```_```用来匹配一些使用不到的返回值，然后丢弃掉。\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    var i1 int\n    var f1 float32\n    i1, _, f1 = ThreeValues()\n    fmt.Printf(\"The int: %d, the float: %f \\n\", i1, f1)\n}\n\nfunc ThreeValues() (int, int, float32) {\n    return 5, 6, 7.5\n}\n```\n\n##### 改变外部变量\n\n使用按值传递，不但可以节省内存，还可以改变外部变量的值，修改的值不需要再```return```回来。\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n)\n\nfunc Multiply(a, b int, reply *int) {\n    *reply = a * b\n}\n\nfunc main() {\n    n := 0\n    reply := &n\n    Multiply(10, 5, reply)\n    fmt.Println(\"Multiply:\", *reply)\n}\n```\n\n#### 传递变长参数\n\n函数传参如```Function(...type)```的形式传递，说明函数处理的是一个变长的参数。\n\n```go\nfunc myFunc(a, b, c ...int) {}\n```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tx := min(1, 3, 2, 0)\n\tfmt.Printf(\"The minimum is: %d\\n\", x)\n\tslice := []int{7,9,3,5,1}\n\tx = min(slice...)\n\tfmt.Printf(\"The minimum in the slice is: %d\", x)\n}\n\nfunc min(s ...int) int {\n\tif len(s)==0 {\n\t\treturn 0\n\t}\n\tmin := s[0]\n\tfor _, v := range s {\n\t\tif v < min {\n\t\t\tmin = v\n\t\t}\n\t}\n\treturn min\n}\n```\n\n#### defer和追踪\n\n关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 `return` 语句之后）一刻才执行某个语句或函数\n\n类似于其他语言如`Java`的`finally`\n\n```go\npackage main\nimport \"fmt\"\n\nfunc main() {\n\tfunction1()\n}\n\nfunc function1() {\n\tfmt.Printf(\"In function1 at the top\\n\")\n\tdefer function2()\n\tfmt.Printf(\"In function1 at the bottom!\\n\")\n}\n\nfunc function2() {\n\tfmt.Printf(\"Function2: Deferred until the end of the calling function!\")\n}\n```\n\n输出\n\n```\nIn function1 at the top\nIn function1 at the bottom!\nFunction2: Deferred until the end of the calling function!\n```\n\ndefer常见的一些操作：\n\n- 关闭文件流\n\n```go\ndefer file.Close()\n```\n\n- 解锁一个加锁的资源\n\n```go\nmu.Lock()  \ndefer mu.Unlock() \n```\n\n- 关闭数据库\n\n```go\ndefer disconnectFromDB()\n```\n\n#### 闭包\n\n不希望1给函数起名，可使用闭包:\n\n```go\nfunc(x, y int) int { return x + y }\n```\n\n匿名函数不能独立存在：\n\n```go\nfplus := func(x, y int) int { return x + y }\n```\n\n通过变量名对函数进行调用\n\n```go\nfplus(3,4)\n```\n\n也可以直接对匿名函数进行调用：\n\n```go\nfunc(x, y int) int { \n  return x + y \n}(3, 4)\n```\n\n#### 计算函数执行时间\n\n```go\nstart := time.Now()\nfunction()\nend := time.Now()\ndelta := end.Sub(start)\nfmt.Printf(\"function took this amount of time: %s\\n\", delta)\n```\n\n#### 通过内存缓存来提升性能\n\n通过在内存中缓存和重复利用相同计算的结果，称之为内存缓存。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nconst LIM = 41\n\nvar fibs [LIM]uint64\n\nfunc main() {\n\tvar result uint64 = 0\n\tstart := time.Now()\n\tfor i := 0; i < LIM; i++ {\n\t\tresult = fibonacci(i)\n\t\tfmt.Printf(\"fibonacci(%d) is: %d\\n\", i, result)\n\t}\n\tend := time.Now()\n\tdelta := end.Sub(start)\n\tfmt.Printf(\"func took this amount of time: %s\\n\", delta)\n}\nfunc fibonacci(n int) (res uint64) {\n\t// 见哈是否有缓存值\n\tif fibs[n] != 0 {\n\t\tres = fibs[n]\n\t\treturn\n\t}\n\tif n <= 1 {\n\t\tres = 1\n\t} else {\n\t\tres = fibonacci(n-1) + fibonacci(n-2)\n\t}\n\tfibs[n] = res // 缓存值\n\treturn\n}\n```\n\n","slug":"Go笔记-函数","published":1,"updated":"2021-03-15T10:01:24.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb200005w7c91jupargg","content":"<p>Go是编译型语言，所以函数编写的顺序是无关紧要的。编写多个函数的主要目的是将一个需要很多行代码的复杂问题分解为一系列简单的函数来解决，有助于代码复用。</p>\n<span id=\"more\"></span>\n\n<p>Go里有三种类型的函数：</p>\n<ul>\n<li>带有参数的普通函数</li>\n<li>匿名函数</li>\n<li>方法</li>\n</ul>\n<p>除了<code>main()</code>、<code>init()</code>函数外，其它所有类型的函数都可以有参数与返回值。函数参数、返回值以及它们的类型被统称为函数签名。</p>\n<p>函数被调用格式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">包.函数名(参数<span class=\"number\">1</span>, 参数<span class=\"number\">2</span>, ...)</span><br></pre></td></tr></table></figure>\n\n<p>函数是一等公民，它们可以赋值给变量，<code>add := binOp</code>。</p>\n<h4 id=\"函数参数与返回值\"><a href=\"#函数参数与返回值\" class=\"headerlink\" title=\"函数参数与返回值\"></a>函数参数与返回值</h4><p>Go函数可以传递多个参数，并且可以有多个返回值，这是相对于C、C++、Java等其他语言的一大特性。</p>\n<p>任何一个有返回值的函数，都必须以<code>return</code>或者<code>panic</code>结束。在函数块里，<code>return</code>之后的语句都不会被执行，如果一个函数需要返回值，这个函数里每一个分支都要有返回值。如下面这个函数不会被编译：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(st *Stack)</span> <span class=\"title\">Pop</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    v := <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ix := <span class=\"built_in\">len</span>(st) - <span class=\"number\">1</span>; ix &gt;= <span class=\"number\">0</span>; ix-- &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> v = st[ix]; v != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            st[ix] = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> v</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>正确的写法:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(st *Stack)</span> <span class=\"title\">Pop</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    v := <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ix := <span class=\"built_in\">len</span>(st) - <span class=\"number\">1</span>; ix &gt;= <span class=\"number\">0</span>; ix-- &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> v = st[ix]; v != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            st[ix] = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> v</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> v</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数传参\"><a href=\"#函数传参\" class=\"headerlink\" title=\"函数传参\"></a>函数传参</h5><ul>\n<li><p>函数的参数传递有两种：按值传递、按引用传递。</p>\n<ul>\n<li><p>Go默认使用按值传递来传递参数，函数在接收参数后被修改，不会影响原来参数的值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function(arg <span class=\"keyword\">type</span>)&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>如果希望函数可以直接修改参数的值，就要使用按引用传递来进行传参，此时传递给函数的是一个指针。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function(a *A)&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h5><p>当函数需要返回多个非命名返回值时，需要使用<code>()</code>把他们括起来，如<code>(int, int)</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getX2AndX3</span><span class=\"params\">(input <span class=\"keyword\">int</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * input, <span class=\"number\">3</span> * input</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当函数需要返回命名返回值时，即使是一个返回值也需要括起来</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getX2AndX3_2</span><span class=\"params\">(input <span class=\"keyword\">int</span>)</span> <span class=\"params\">(x2 <span class=\"keyword\">int</span>, x3 <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    x2 = <span class=\"number\">2</span> * input</span><br><span class=\"line\">    x3 = <span class=\"number\">3</span> * input</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"空白符\"><a href=\"#空白符\" class=\"headerlink\" title=\"空白符\"></a>空白符</h5><p>空白符<code>_</code>用来匹配一些使用不到的返回值，然后丢弃掉。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i1 <span class=\"keyword\">int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> f1 <span class=\"keyword\">float32</span></span><br><span class=\"line\">    i1, _, f1 = ThreeValues()</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;The int: %d, the float: %f \\n&quot;</span>, i1, f1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ThreeValues</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>, <span class=\"keyword\">float32</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7.5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"改变外部变量\"><a href=\"#改变外部变量\" class=\"headerlink\" title=\"改变外部变量\"></a>改变外部变量</h5><p>使用按值传递，不但可以节省内存，还可以改变外部变量的值，修改的值不需要再<code>return</code>回来。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Multiply</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>, reply *<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    *reply = a * b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    n := <span class=\"number\">0</span></span><br><span class=\"line\">    reply := &amp;n</span><br><span class=\"line\">    Multiply(<span class=\"number\">10</span>, <span class=\"number\">5</span>, reply)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Multiply:&quot;</span>, *reply)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"传递变长参数\"><a href=\"#传递变长参数\" class=\"headerlink\" title=\"传递变长参数\"></a>传递变长参数</h4><p>函数传参如<code>Function(...type)</code>的形式传递，说明函数处理的是一个变长的参数。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">myFunc</span><span class=\"params\">(a, b, c ...<span class=\"keyword\">int</span>)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx := min(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;The minimum is: %d\\n&quot;</span>, x)</span><br><span class=\"line\">\tslice := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">\tx = min(slice...)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;The minimum in the slice is: %d&quot;</span>, x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">min</span><span class=\"params\">(s ...<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s)==<span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmin := s[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> s &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> v &lt; min &#123;</span><br><span class=\"line\">\t\t\tmin = v</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> min</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"defer和追踪\"><a href=\"#defer和追踪\" class=\"headerlink\" title=\"defer和追踪\"></a>defer和追踪</h4><p>关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 <code>return</code> 语句之后）一刻才执行某个语句或函数</p>\n<p>类似于其他语言如<code>Java</code>的<code>finally</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfunction1()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">function1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;In function1 at the top\\n&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> function2()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;In function1 at the bottom!\\n&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">function2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;Function2: Deferred until the end of the calling function!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In function1 at the top</span><br><span class=\"line\">In function1 at the bottom!</span><br><span class=\"line\">Function2: Deferred until the end of the calling function!</span><br></pre></td></tr></table></figure>\n\n<p>defer常见的一些操作：</p>\n<ul>\n<li>关闭文件流</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">defer</span> file.Close()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解锁一个加锁的资源</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mu.Lock()  </span><br><span class=\"line\"><span class=\"keyword\">defer</span> mu.Unlock() </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关闭数据库</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">defer</span> disconnectFromDB()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h4><p>不希望1给函数起名，可使用闭包:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x, y <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123; <span class=\"keyword\">return</span> x + y &#125;</span><br></pre></td></tr></table></figure>\n\n<p>匿名函数不能独立存在：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fplus := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x, y <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123; <span class=\"keyword\">return</span> x + y &#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过变量名对函数进行调用</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fplus(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n\n<p>也可以直接对匿名函数进行调用：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x, y <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y </span><br><span class=\"line\">&#125;(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"计算函数执行时间\"><a href=\"#计算函数执行时间\" class=\"headerlink\" title=\"计算函数执行时间\"></a>计算函数执行时间</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start := time.Now()</span><br><span class=\"line\">function()</span><br><span class=\"line\">end := time.Now()</span><br><span class=\"line\">delta := end.Sub(start)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;function took this amount of time: %s\\n&quot;</span>, delta)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"通过内存缓存来提升性能\"><a href=\"#通过内存缓存来提升性能\" class=\"headerlink\" title=\"通过内存缓存来提升性能\"></a>通过内存缓存来提升性能</h4><p>通过在内存中缓存和重复利用相同计算的结果，称之为内存缓存。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> LIM = <span class=\"number\">41</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fibs [LIM]<span class=\"keyword\">uint64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> result <span class=\"keyword\">uint64</span> = <span class=\"number\">0</span></span><br><span class=\"line\">\tstart := time.Now()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; LIM; i++ &#123;</span><br><span class=\"line\">\t\tresult = fibonacci(i)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;fibonacci(%d) is: %d\\n&quot;</span>, i, result)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tend := time.Now()</span><br><span class=\"line\">\tdelta := end.Sub(start)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;func took this amount of time: %s\\n&quot;</span>, delta)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> <span class=\"params\">(res <span class=\"keyword\">uint64</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 见哈是否有缓存值</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> fibs[n] != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tres = fibs[n]</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n &lt;= <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\tres = <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tres = fibonacci(n<span class=\"number\">-1</span>) + fibonacci(n<span class=\"number\">-2</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfibs[n] = res <span class=\"comment\">// 缓存值</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>Go是编译型语言，所以函数编写的顺序是无关紧要的。编写多个函数的主要目的是将一个需要很多行代码的复杂问题分解为一系列简单的函数来解决，有助于代码复用。</p>","more":"<p>Go里有三种类型的函数：</p>\n<ul>\n<li>带有参数的普通函数</li>\n<li>匿名函数</li>\n<li>方法</li>\n</ul>\n<p>除了<code>main()</code>、<code>init()</code>函数外，其它所有类型的函数都可以有参数与返回值。函数参数、返回值以及它们的类型被统称为函数签名。</p>\n<p>函数被调用格式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">包.函数名(参数<span class=\"number\">1</span>, 参数<span class=\"number\">2</span>, ...)</span><br></pre></td></tr></table></figure>\n\n<p>函数是一等公民，它们可以赋值给变量，<code>add := binOp</code>。</p>\n<h4 id=\"函数参数与返回值\"><a href=\"#函数参数与返回值\" class=\"headerlink\" title=\"函数参数与返回值\"></a>函数参数与返回值</h4><p>Go函数可以传递多个参数，并且可以有多个返回值，这是相对于C、C++、Java等其他语言的一大特性。</p>\n<p>任何一个有返回值的函数，都必须以<code>return</code>或者<code>panic</code>结束。在函数块里，<code>return</code>之后的语句都不会被执行，如果一个函数需要返回值，这个函数里每一个分支都要有返回值。如下面这个函数不会被编译：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(st *Stack)</span> <span class=\"title\">Pop</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    v := <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ix := <span class=\"built_in\">len</span>(st) - <span class=\"number\">1</span>; ix &gt;= <span class=\"number\">0</span>; ix-- &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> v = st[ix]; v != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            st[ix] = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> v</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>正确的写法:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(st *Stack)</span> <span class=\"title\">Pop</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">    v := <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ix := <span class=\"built_in\">len</span>(st) - <span class=\"number\">1</span>; ix &gt;= <span class=\"number\">0</span>; ix-- &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> v = st[ix]; v != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">            st[ix] = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> v</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> v</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数传参\"><a href=\"#函数传参\" class=\"headerlink\" title=\"函数传参\"></a>函数传参</h5><ul>\n<li><p>函数的参数传递有两种：按值传递、按引用传递。</p>\n<ul>\n<li><p>Go默认使用按值传递来传递参数，函数在接收参数后被修改，不会影响原来参数的值。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function(arg <span class=\"keyword\">type</span>)&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>如果希望函数可以直接修改参数的值，就要使用按引用传递来进行传参，此时传递给函数的是一个指针。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function(a *A)&#123;&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h5><p>当函数需要返回多个非命名返回值时，需要使用<code>()</code>把他们括起来，如<code>(int, int)</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getX2AndX3</span><span class=\"params\">(input <span class=\"keyword\">int</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * input, <span class=\"number\">3</span> * input</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当函数需要返回命名返回值时，即使是一个返回值也需要括起来</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getX2AndX3_2</span><span class=\"params\">(input <span class=\"keyword\">int</span>)</span> <span class=\"params\">(x2 <span class=\"keyword\">int</span>, x3 <span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    x2 = <span class=\"number\">2</span> * input</span><br><span class=\"line\">    x3 = <span class=\"number\">3</span> * input</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"空白符\"><a href=\"#空白符\" class=\"headerlink\" title=\"空白符\"></a>空白符</h5><p>空白符<code>_</code>用来匹配一些使用不到的返回值，然后丢弃掉。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i1 <span class=\"keyword\">int</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> f1 <span class=\"keyword\">float32</span></span><br><span class=\"line\">    i1, _, f1 = ThreeValues()</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;The int: %d, the float: %f \\n&quot;</span>, i1, f1)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ThreeValues</span><span class=\"params\">()</span> <span class=\"params\">(<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>, <span class=\"keyword\">float32</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7.5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"改变外部变量\"><a href=\"#改变外部变量\" class=\"headerlink\" title=\"改变外部变量\"></a>改变外部变量</h5><p>使用按值传递，不但可以节省内存，还可以改变外部变量的值，修改的值不需要再<code>return</code>回来。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Multiply</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>, reply *<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">    *reply = a * b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    n := <span class=\"number\">0</span></span><br><span class=\"line\">    reply := &amp;n</span><br><span class=\"line\">    Multiply(<span class=\"number\">10</span>, <span class=\"number\">5</span>, reply)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Multiply:&quot;</span>, *reply)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"传递变长参数\"><a href=\"#传递变长参数\" class=\"headerlink\" title=\"传递变长参数\"></a>传递变长参数</h4><p>函数传参如<code>Function(...type)</code>的形式传递，说明函数处理的是一个变长的参数。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">myFunc</span><span class=\"params\">(a, b, c ...<span class=\"keyword\">int</span>)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tx := min(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;The minimum is: %d\\n&quot;</span>, x)</span><br><span class=\"line\">\tslice := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">7</span>,<span class=\"number\">9</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">\tx = min(slice...)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;The minimum in the slice is: %d&quot;</span>, x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">min</span><span class=\"params\">(s ...<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s)==<span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmin := s[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> s &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> v &lt; min &#123;</span><br><span class=\"line\">\t\t\tmin = v</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> min</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"defer和追踪\"><a href=\"#defer和追踪\" class=\"headerlink\" title=\"defer和追踪\"></a>defer和追踪</h4><p>关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 <code>return</code> 语句之后）一刻才执行某个语句或函数</p>\n<p>类似于其他语言如<code>Java</code>的<code>finally</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfunction1()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">function1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;In function1 at the top\\n&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> function2()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;In function1 at the bottom!\\n&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">function2</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;Function2: Deferred until the end of the calling function!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In function1 at the top</span><br><span class=\"line\">In function1 at the bottom!</span><br><span class=\"line\">Function2: Deferred until the end of the calling function!</span><br></pre></td></tr></table></figure>\n\n<p>defer常见的一些操作：</p>\n<ul>\n<li>关闭文件流</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">defer</span> file.Close()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解锁一个加锁的资源</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mu.Lock()  </span><br><span class=\"line\"><span class=\"keyword\">defer</span> mu.Unlock() </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关闭数据库</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">defer</span> disconnectFromDB()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h4><p>不希望1给函数起名，可使用闭包:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x, y <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123; <span class=\"keyword\">return</span> x + y &#125;</span><br></pre></td></tr></table></figure>\n\n<p>匿名函数不能独立存在：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fplus := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x, y <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123; <span class=\"keyword\">return</span> x + y &#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过变量名对函数进行调用</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fplus(<span class=\"number\">3</span>,<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n\n<p>也可以直接对匿名函数进行调用：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x, y <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y </span><br><span class=\"line\">&#125;(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"计算函数执行时间\"><a href=\"#计算函数执行时间\" class=\"headerlink\" title=\"计算函数执行时间\"></a>计算函数执行时间</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">start := time.Now()</span><br><span class=\"line\">function()</span><br><span class=\"line\">end := time.Now()</span><br><span class=\"line\">delta := end.Sub(start)</span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;function took this amount of time: %s\\n&quot;</span>, delta)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"通过内存缓存来提升性能\"><a href=\"#通过内存缓存来提升性能\" class=\"headerlink\" title=\"通过内存缓存来提升性能\"></a>通过内存缓存来提升性能</h4><p>通过在内存中缓存和重复利用相同计算的结果，称之为内存缓存。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> LIM = <span class=\"number\">41</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fibs [LIM]<span class=\"keyword\">uint64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> result <span class=\"keyword\">uint64</span> = <span class=\"number\">0</span></span><br><span class=\"line\">\tstart := time.Now()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; LIM; i++ &#123;</span><br><span class=\"line\">\t\tresult = fibonacci(i)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;fibonacci(%d) is: %d\\n&quot;</span>, i, result)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tend := time.Now()</span><br><span class=\"line\">\tdelta := end.Sub(start)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;func took this amount of time: %s\\n&quot;</span>, delta)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> <span class=\"params\">(res <span class=\"keyword\">uint64</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 见哈是否有缓存值</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> fibs[n] != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tres = fibs[n]</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n &lt;= <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\tres = <span class=\"number\">1</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tres = fibonacci(n<span class=\"number\">-1</span>) + fibonacci(n<span class=\"number\">-2</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfibs[n] = res <span class=\"comment\">// 缓存值</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Go笔记-基础结构和数据类型","date":"2021-03-13T02:12:56.000Z","_content":"\n\n\nGo语言中基本的结构和数据类型：关键字与标识符、```Go```程序的基本结构和要素、常量、变量、```strings```和```strconv```包、时间和日期、指针。\n\n<!-- more -->\n\n#### 一，关键字和标识符\n\nGo语言区分大小写，有效的标识符必须以字母开头，后面紧跟0或多个字符或数字。\n\nGo语言中使用到的关键字和保留字。\n\n| break    | default     | func   | interface | select |\n| -------- | ----------- | ------ | --------- | ------ |\n| case     | defer       | go     | map       | struct |\n| chan     | else        | goto   | package   | switch |\n| const    | fallthrough | if     | range     | type   |\n| continue | for         | import | return    | var    |\n\n#### 二，```Go```程序的基本结构和要素\n\n- 包\n\n使用关键字```import```导入第三方或者官方标准库。\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  fmt.Println(\"Hello World\")\n}\n```\n\n当一个包中的标识符(包括常量、变量、函数名、类型、结构体字段)以大写字母开头，这对外是可见的，否则外部导入不可使用。\n\n- 函数\n\n> 函数的定义:\n\n```go\nfunc 函数名() {}\nfunc 函数名(参数 类型,参数 类型) 返回值/类型 {}\n```\n\n括号中可以传递一个或者多个参数，参数后必须有参数类型。\n\n> 实例\n\n```go\n// 相当于private\nfunc sum(a, b int) int {\n  return a + b\n}\n\n// 相当于public\nfunc Add(a, b int) int() {\n  return a + b\n}\n```\n\n- 注释\n\n```go\npackage main\n\nimport \"fmt\" // Package implementing fromatted I/O\n\n/*\n多行注释\n*/\nfunc main() {\n  fmt.Println(\"Hello World!\") // 单行注释\n}\n```\n\n- 类型\n\n基本类型：```int```、```float```、```bool```、```string```\n\n复合类型：```struct```、```array```、```slice```、```map```、```channel```\n\n- 类型转换\n\ngo语言中一个类型的值可以被转换成另一种类型的值，go语言没有隐式转换、所有的转换必须是显示说明。\n\n```\nvalueTypeB = typeB(valueTypeA)\n```\n\n#### 三，常量\n\ngo语言中常量使用```const```关键字定义，用于存储不会变化的数据。\n\n存储在1常量中的数据类型只能是：布尔类型、数字型、浮点型。\n\n```go\nconst Pi = 3.1415926\nconst beef, two, c = \"drink\", 2, \"c\"\nconst (\n\tUnknown = 0\n  Female = 1\n  Male = 2\n)\n```\n\n#### 四，变量\n\n声明变量的一般形式是使用```var```关键字：```var identifier type```\n\n```go\nvar a int\nvar b string\nvar c, d int\n```\n\n变量声明后未赋值时，系统会自动赋予该变量类型的值：``` int```为```0```、```string```为空字符串、```float```为```0.0```、指针为```nil```\n\n变量命名规则遵循驼峰，首个字符单词小写、每个新单词首字母大写：```getNum```\n\n变量可以不指定类型，系统会根据变量的值自动推断出其类型。\n\n- 简短形式\n\n常量赋值可以不用```var```关键字，使用```:=```操作符。\n\n```go\na := 5\n```\n\n#### 五，strings和strconv包\n\n- 前缀和后缀\n\nHasPrefix判断字符串```s```是否以```prefix```开头：\n\n```go\nstring.HashPrefix(s, prefix string) bool\n```\n\n​\t  HasSuffix判断字符串```s```是否以```suffix```结尾:\n\n```go\nstring.HasSuffix(s, suffix string) bool\n```\n\n- 字符串包含\n\n  Contains判断字符串```s```是否包含```substr```:\n\n```go\nstrings.Contains(s, substr string) bool\n```\n\n- 判断子字符串或者字符在父字符串中出现的位置\n\nIndex返回字符串```str```在字符串```s```中的索引，```-1```表示字符串```s```不包含字符串```str```:\n\n```go\nstrings.Index(s, str string) int\n```\n\n- 字符串替换\n\nReplace用于将字符串```str```中的前```n```个字符串```old```替换为字符串```new```，并返回新的字符串，如果```n=-1```折替换所有字符串```old```为```new```:\n\n  ```go\n  strings.Replace(str, old, new string, n int) string\n  ```\n\n- 统计字符串出现的次数\n\nCount用于统计字符串```str```在字符串```s```中出现的次数：\n\n```go\nstrings.Count(s, str string) int\n```\n\n- 重复字符串\n\nRepeat用于重复```count```词字符串```s```并返回一个新的字符串\n\n```go\nstrings.Repeat(s string, count int) string\n```\n\n- 修改字符串大小写\n\n```go\nstrings.ToLower(s) string // 小写\nstrings.ToUpper(s) string // 大写\n```\n\n- 剔除字符串\n\n```go\nstrings.TrimSpace(s) // 剔除空白符\nstrings.TrimLeft(s)\nstrings.TrimRight(s)\nstrings.Trim(s, \"cunt\") // 剔除其他的字符串\n```\n\n- 分割字符串\n\n```go\nstrings.Fields(s) // 利用一个或多个空白1符号来作为动态长度的分隔符将字符串分割成若干小块，返回切片\nstrings.Split(s, sep) // 用于自定义分隔符号来对字符串进行分割，返回切片\n```\n\n- 拼接```slice```到字符串\n\nJoin用于将元素类型为```string```的```slice```使用分割富豪来进行拼接成一个字符串\n\n```go\nstrings.Join(s1 []string, sep string)\n```\n\n- 从字符串中读取内容\n\n函数```strings.Reader(str)```用于生成一个```Reader```并读取字符串中的内容，然后返回指向该```Reader```的指针:\n\n  ```go\nstrings.Reader(str)\nstrings.Read(str) // 从[]byte中读取内容\nstrings.ReadByte(str) // 从字符串中读取下一个byte或者rune\nstrings.ReadRune() 同上\n  ```\n\n#### 六，时间和日期\n\n时间和日期标准库```time```\n\n```go\npackage main\n\nimport(\n\t\"fmt\"\n  \"time\"\n)\n\nfunc main() {\n  t := time.Now()\n  t := time.Now.UTC()\n  week := 60 * 60 * 24 * 7 * 1e9\n  week_from_now := t.Add(time.Duration(week))\n}\n```\n\n#### 七，指针\n\nGo语言取址符为```&```，变量前使用```&```可以返回相应变量的内存地址。\n\n```go\nvar i1 = 5\nfmt.Printf(\"An integer: %d, it's location in memory: %p\\n\", i1, &i1)\n```\n\n定一个指针，指向上面的```i1```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  var i1 = 5\n  var intP *int\n  intP = &i1\n  fmt.Println(\"The Value of intP is\", *intP) // 5\n  \n  s := \"good bye\"\n  var p *string = &s\n  *p = \"ciao\"\n  fmt.Printf(\"Here is the pointer p: %p\\n\", p) // Here is the pointer p: 0xc00010a220\n  fmt.Printf(\"Here is the string *p %s\\n\", *p) // Here is the string *p ciao\n  fmt.Printf(\"Here is the string s: %s\\n\", s) // Here is the string s: ciao\n}\n```\n\n","source":"_posts/Go笔记-基础结构和数据类型.md","raw":"---\ntitle: Go笔记-基础结构和数据类型\ndate: 2021-03-13 10:12:56\ntags: go\n---\n\n\n\nGo语言中基本的结构和数据类型：关键字与标识符、```Go```程序的基本结构和要素、常量、变量、```strings```和```strconv```包、时间和日期、指针。\n\n<!-- more -->\n\n#### 一，关键字和标识符\n\nGo语言区分大小写，有效的标识符必须以字母开头，后面紧跟0或多个字符或数字。\n\nGo语言中使用到的关键字和保留字。\n\n| break    | default     | func   | interface | select |\n| -------- | ----------- | ------ | --------- | ------ |\n| case     | defer       | go     | map       | struct |\n| chan     | else        | goto   | package   | switch |\n| const    | fallthrough | if     | range     | type   |\n| continue | for         | import | return    | var    |\n\n#### 二，```Go```程序的基本结构和要素\n\n- 包\n\n使用关键字```import```导入第三方或者官方标准库。\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  fmt.Println(\"Hello World\")\n}\n```\n\n当一个包中的标识符(包括常量、变量、函数名、类型、结构体字段)以大写字母开头，这对外是可见的，否则外部导入不可使用。\n\n- 函数\n\n> 函数的定义:\n\n```go\nfunc 函数名() {}\nfunc 函数名(参数 类型,参数 类型) 返回值/类型 {}\n```\n\n括号中可以传递一个或者多个参数，参数后必须有参数类型。\n\n> 实例\n\n```go\n// 相当于private\nfunc sum(a, b int) int {\n  return a + b\n}\n\n// 相当于public\nfunc Add(a, b int) int() {\n  return a + b\n}\n```\n\n- 注释\n\n```go\npackage main\n\nimport \"fmt\" // Package implementing fromatted I/O\n\n/*\n多行注释\n*/\nfunc main() {\n  fmt.Println(\"Hello World!\") // 单行注释\n}\n```\n\n- 类型\n\n基本类型：```int```、```float```、```bool```、```string```\n\n复合类型：```struct```、```array```、```slice```、```map```、```channel```\n\n- 类型转换\n\ngo语言中一个类型的值可以被转换成另一种类型的值，go语言没有隐式转换、所有的转换必须是显示说明。\n\n```\nvalueTypeB = typeB(valueTypeA)\n```\n\n#### 三，常量\n\ngo语言中常量使用```const```关键字定义，用于存储不会变化的数据。\n\n存储在1常量中的数据类型只能是：布尔类型、数字型、浮点型。\n\n```go\nconst Pi = 3.1415926\nconst beef, two, c = \"drink\", 2, \"c\"\nconst (\n\tUnknown = 0\n  Female = 1\n  Male = 2\n)\n```\n\n#### 四，变量\n\n声明变量的一般形式是使用```var```关键字：```var identifier type```\n\n```go\nvar a int\nvar b string\nvar c, d int\n```\n\n变量声明后未赋值时，系统会自动赋予该变量类型的值：``` int```为```0```、```string```为空字符串、```float```为```0.0```、指针为```nil```\n\n变量命名规则遵循驼峰，首个字符单词小写、每个新单词首字母大写：```getNum```\n\n变量可以不指定类型，系统会根据变量的值自动推断出其类型。\n\n- 简短形式\n\n常量赋值可以不用```var```关键字，使用```:=```操作符。\n\n```go\na := 5\n```\n\n#### 五，strings和strconv包\n\n- 前缀和后缀\n\nHasPrefix判断字符串```s```是否以```prefix```开头：\n\n```go\nstring.HashPrefix(s, prefix string) bool\n```\n\n​\t  HasSuffix判断字符串```s```是否以```suffix```结尾:\n\n```go\nstring.HasSuffix(s, suffix string) bool\n```\n\n- 字符串包含\n\n  Contains判断字符串```s```是否包含```substr```:\n\n```go\nstrings.Contains(s, substr string) bool\n```\n\n- 判断子字符串或者字符在父字符串中出现的位置\n\nIndex返回字符串```str```在字符串```s```中的索引，```-1```表示字符串```s```不包含字符串```str```:\n\n```go\nstrings.Index(s, str string) int\n```\n\n- 字符串替换\n\nReplace用于将字符串```str```中的前```n```个字符串```old```替换为字符串```new```，并返回新的字符串，如果```n=-1```折替换所有字符串```old```为```new```:\n\n  ```go\n  strings.Replace(str, old, new string, n int) string\n  ```\n\n- 统计字符串出现的次数\n\nCount用于统计字符串```str```在字符串```s```中出现的次数：\n\n```go\nstrings.Count(s, str string) int\n```\n\n- 重复字符串\n\nRepeat用于重复```count```词字符串```s```并返回一个新的字符串\n\n```go\nstrings.Repeat(s string, count int) string\n```\n\n- 修改字符串大小写\n\n```go\nstrings.ToLower(s) string // 小写\nstrings.ToUpper(s) string // 大写\n```\n\n- 剔除字符串\n\n```go\nstrings.TrimSpace(s) // 剔除空白符\nstrings.TrimLeft(s)\nstrings.TrimRight(s)\nstrings.Trim(s, \"cunt\") // 剔除其他的字符串\n```\n\n- 分割字符串\n\n```go\nstrings.Fields(s) // 利用一个或多个空白1符号来作为动态长度的分隔符将字符串分割成若干小块，返回切片\nstrings.Split(s, sep) // 用于自定义分隔符号来对字符串进行分割，返回切片\n```\n\n- 拼接```slice```到字符串\n\nJoin用于将元素类型为```string```的```slice```使用分割富豪来进行拼接成一个字符串\n\n```go\nstrings.Join(s1 []string, sep string)\n```\n\n- 从字符串中读取内容\n\n函数```strings.Reader(str)```用于生成一个```Reader```并读取字符串中的内容，然后返回指向该```Reader```的指针:\n\n  ```go\nstrings.Reader(str)\nstrings.Read(str) // 从[]byte中读取内容\nstrings.ReadByte(str) // 从字符串中读取下一个byte或者rune\nstrings.ReadRune() 同上\n  ```\n\n#### 六，时间和日期\n\n时间和日期标准库```time```\n\n```go\npackage main\n\nimport(\n\t\"fmt\"\n  \"time\"\n)\n\nfunc main() {\n  t := time.Now()\n  t := time.Now.UTC()\n  week := 60 * 60 * 24 * 7 * 1e9\n  week_from_now := t.Add(time.Duration(week))\n}\n```\n\n#### 七，指针\n\nGo语言取址符为```&```，变量前使用```&```可以返回相应变量的内存地址。\n\n```go\nvar i1 = 5\nfmt.Printf(\"An integer: %d, it's location in memory: %p\\n\", i1, &i1)\n```\n\n定一个指针，指向上面的```i1```\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  var i1 = 5\n  var intP *int\n  intP = &i1\n  fmt.Println(\"The Value of intP is\", *intP) // 5\n  \n  s := \"good bye\"\n  var p *string = &s\n  *p = \"ciao\"\n  fmt.Printf(\"Here is the pointer p: %p\\n\", p) // Here is the pointer p: 0xc00010a220\n  fmt.Printf(\"Here is the string *p %s\\n\", *p) // Here is the string *p ciao\n  fmt.Printf(\"Here is the string s: %s\\n\", s) // Here is the string s: ciao\n}\n```\n\n","slug":"Go笔记-基础结构和数据类型","published":1,"updated":"2021-03-13T06:47:02.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb210006w7c982svazsw","content":"<p>Go语言中基本的结构和数据类型：关键字与标识符、<code>Go</code>程序的基本结构和要素、常量、变量、<code>strings</code>和<code>strconv</code>包、时间和日期、指针。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"一，关键字和标识符\"><a href=\"#一，关键字和标识符\" class=\"headerlink\" title=\"一，关键字和标识符\"></a>一，关键字和标识符</h4><p>Go语言区分大小写，有效的标识符必须以字母开头，后面紧跟0或多个字符或数字。</p>\n<p>Go语言中使用到的关键字和保留字。</p>\n<table>\n<thead>\n<tr>\n<th>break</th>\n<th>default</th>\n<th>func</th>\n<th>interface</th>\n<th>select</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>case</td>\n<td>defer</td>\n<td>go</td>\n<td>map</td>\n<td>struct</td>\n</tr>\n<tr>\n<td>chan</td>\n<td>else</td>\n<td>goto</td>\n<td>package</td>\n<td>switch</td>\n</tr>\n<tr>\n<td>const</td>\n<td>fallthrough</td>\n<td>if</td>\n<td>range</td>\n<td>type</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>for</td>\n<td>import</td>\n<td>return</td>\n<td>var</td>\n</tr>\n</tbody></table>\n<h4 id=\"二，Go程序的基本结构和要素\"><a href=\"#二，Go程序的基本结构和要素\" class=\"headerlink\" title=\"二，Go程序的基本结构和要素\"></a>二，<code>Go</code>程序的基本结构和要素</h4><ul>\n<li>包</li>\n</ul>\n<p>使用关键字<code>import</code>导入第三方或者官方标准库。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当一个包中的标识符(包括常量、变量、函数名、类型、结构体字段)以大写字母开头，这对外是可见的，否则外部导入不可使用。</p>\n<ul>\n<li>函数</li>\n</ul>\n<blockquote>\n<p>函数的定义:</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> 函数名<span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> 函数名<span class=\"params\">(参数 类型,参数 类型)</span> 返回值/类型</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>括号中可以传递一个或者多个参数，参数后必须有参数类型。</p>\n<blockquote>\n<p>实例</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 相当于private</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 相当于public</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Add</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注释</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span> <span class=\"comment\">// Package implementing fromatted I/O</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">多行注释</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;Hello World!&quot;</span>) <span class=\"comment\">// 单行注释</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>类型</li>\n</ul>\n<p>基本类型：<code>int</code>、<code>float</code>、<code>bool</code>、<code>string</code></p>\n<p>复合类型：<code>struct</code>、<code>array</code>、<code>slice</code>、<code>map</code>、<code>channel</code></p>\n<ul>\n<li>类型转换</li>\n</ul>\n<p>go语言中一个类型的值可以被转换成另一种类型的值，go语言没有隐式转换、所有的转换必须是显示说明。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valueTypeB &#x3D; typeB(valueTypeA)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三，常量\"><a href=\"#三，常量\" class=\"headerlink\" title=\"三，常量\"></a>三，常量</h4><p>go语言中常量使用<code>const</code>关键字定义，用于存储不会变化的数据。</p>\n<p>存储在1常量中的数据类型只能是：布尔类型、数字型、浮点型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Pi = <span class=\"number\">3.1415926</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> beef, two, c = <span class=\"string\">&quot;drink&quot;</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tUnknown = <span class=\"number\">0</span></span><br><span class=\"line\">  Female = <span class=\"number\">1</span></span><br><span class=\"line\">  Male = <span class=\"number\">2</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四，变量\"><a href=\"#四，变量\" class=\"headerlink\" title=\"四，变量\"></a>四，变量</h4><p>声明变量的一般形式是使用<code>var</code>关键字：<code>var identifier type</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b <span class=\"keyword\">string</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c, d <span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure>\n\n<p>变量声明后未赋值时，系统会自动赋予该变量类型的值：<code> int</code>为<code>0</code>、<code>string</code>为空字符串、<code>float</code>为<code>0.0</code>、指针为<code>nil</code></p>\n<p>变量命名规则遵循驼峰，首个字符单词小写、每个新单词首字母大写：<code>getNum</code></p>\n<p>变量可以不指定类型，系统会根据变量的值自动推断出其类型。</p>\n<ul>\n<li>简短形式</li>\n</ul>\n<p>常量赋值可以不用<code>var</code>关键字，使用<code>:=</code>操作符。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a := <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"五，strings和strconv包\"><a href=\"#五，strings和strconv包\" class=\"headerlink\" title=\"五，strings和strconv包\"></a>五，strings和strconv包</h4><ul>\n<li>前缀和后缀</li>\n</ul>\n<p>HasPrefix判断字符串<code>s</code>是否以<code>prefix</code>开头：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span>.HashPrefix(s, prefix <span class=\"keyword\">string</span>) <span class=\"keyword\">bool</span></span><br></pre></td></tr></table></figure>\n\n<p>​      HasSuffix判断字符串<code>s</code>是否以<code>suffix</code>结尾:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span>.HasSuffix(s, suffix <span class=\"keyword\">string</span>) <span class=\"keyword\">bool</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>字符串包含</p>\n<p>Contains判断字符串<code>s</code>是否包含<code>substr</code>:</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.Contains(s, substr <span class=\"keyword\">string</span>) <span class=\"keyword\">bool</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>判断子字符串或者字符在父字符串中出现的位置</li>\n</ul>\n<p>Index返回字符串<code>str</code>在字符串<code>s</code>中的索引，<code>-1</code>表示字符串<code>s</code>不包含字符串<code>str</code>:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.Index(s, str <span class=\"keyword\">string</span>) <span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>字符串替换</li>\n</ul>\n<p>Replace用于将字符串<code>str</code>中的前<code>n</code>个字符串<code>old</code>替换为字符串<code>new</code>，并返回新的字符串，如果<code>n=-1</code>折替换所有字符串<code>old</code>为<code>new</code>:</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.Replace(str, old, <span class=\"built_in\">new</span> <span class=\"keyword\">string</span>, n <span class=\"keyword\">int</span>) <span class=\"keyword\">string</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>统计字符串出现的次数</li>\n</ul>\n<p>Count用于统计字符串<code>str</code>在字符串<code>s</code>中出现的次数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.Count(s, str <span class=\"keyword\">string</span>) <span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重复字符串</li>\n</ul>\n<p>Repeat用于重复<code>count</code>词字符串<code>s</code>并返回一个新的字符串</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.Repeat(s <span class=\"keyword\">string</span>, count <span class=\"keyword\">int</span>) <span class=\"keyword\">string</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改字符串大小写</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.ToLower(s) <span class=\"keyword\">string</span> <span class=\"comment\">// 小写</span></span><br><span class=\"line\">strings.ToUpper(s) <span class=\"keyword\">string</span> <span class=\"comment\">// 大写</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>剔除字符串</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.TrimSpace(s) <span class=\"comment\">// 剔除空白符</span></span><br><span class=\"line\">strings.TrimLeft(s)</span><br><span class=\"line\">strings.TrimRight(s)</span><br><span class=\"line\">strings.Trim(s, <span class=\"string\">&quot;cunt&quot;</span>) <span class=\"comment\">// 剔除其他的字符串</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分割字符串</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.Fields(s) <span class=\"comment\">// 利用一个或多个空白1符号来作为动态长度的分隔符将字符串分割成若干小块，返回切片</span></span><br><span class=\"line\">strings.Split(s, sep) <span class=\"comment\">// 用于自定义分隔符号来对字符串进行分割，返回切片</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>拼接<code>slice</code>到字符串</li>\n</ul>\n<p>Join用于将元素类型为<code>string</code>的<code>slice</code>使用分割富豪来进行拼接成一个字符串</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.Join(s1 []<span class=\"keyword\">string</span>, sep <span class=\"keyword\">string</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从字符串中读取内容</li>\n</ul>\n<p>函数<code>strings.Reader(str)</code>用于生成一个<code>Reader</code>并读取字符串中的内容，然后返回指向该<code>Reader</code>的指针:</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.Reader(str)</span><br><span class=\"line\">strings.Read(str) <span class=\"comment\">// 从[]byte中读取内容</span></span><br><span class=\"line\">strings.ReadByte(str) <span class=\"comment\">// 从字符串中读取下一个byte或者rune</span></span><br><span class=\"line\">strings.ReadRune() 同上</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"六，时间和日期\"><a href=\"#六，时间和日期\" class=\"headerlink\" title=\"六，时间和日期\"></a>六，时间和日期</h4><p>时间和日期标准库<code>time</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  t := time.Now()</span><br><span class=\"line\">  t := time.Now.UTC()</span><br><span class=\"line\">  week := <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">7</span> * <span class=\"number\">1e9</span></span><br><span class=\"line\">  week_from_now := t.Add(time.Duration(week))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"七，指针\"><a href=\"#七，指针\" class=\"headerlink\" title=\"七，指针\"></a>七，指针</h4><p>Go语言取址符为<code>&amp;</code>，变量前使用<code>&amp;</code>可以返回相应变量的内存地址。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i1 = <span class=\"number\">5</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;An integer: %d, it&#x27;s location in memory: %p\\n&quot;</span>, i1, &amp;i1)</span><br></pre></td></tr></table></figure>\n\n<p>定一个指针，指向上面的<code>i1</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i1 = <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> intP *<span class=\"keyword\">int</span></span><br><span class=\"line\">  intP = &amp;i1</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;The Value of intP is&quot;</span>, *intP) <span class=\"comment\">// 5</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  s := <span class=\"string\">&quot;good bye&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> p *<span class=\"keyword\">string</span> = &amp;s</span><br><span class=\"line\">  *p = <span class=\"string\">&quot;ciao&quot;</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">&quot;Here is the pointer p: %p\\n&quot;</span>, p) <span class=\"comment\">// Here is the pointer p: 0xc00010a220</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">&quot;Here is the string *p %s\\n&quot;</span>, *p) <span class=\"comment\">// Here is the string *p ciao</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">&quot;Here is the string s: %s\\n&quot;</span>, s) <span class=\"comment\">// Here is the string s: ciao</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>Go语言中基本的结构和数据类型：关键字与标识符、<code>Go</code>程序的基本结构和要素、常量、变量、<code>strings</code>和<code>strconv</code>包、时间和日期、指针。</p>","more":"<h4 id=\"一，关键字和标识符\"><a href=\"#一，关键字和标识符\" class=\"headerlink\" title=\"一，关键字和标识符\"></a>一，关键字和标识符</h4><p>Go语言区分大小写，有效的标识符必须以字母开头，后面紧跟0或多个字符或数字。</p>\n<p>Go语言中使用到的关键字和保留字。</p>\n<table>\n<thead>\n<tr>\n<th>break</th>\n<th>default</th>\n<th>func</th>\n<th>interface</th>\n<th>select</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>case</td>\n<td>defer</td>\n<td>go</td>\n<td>map</td>\n<td>struct</td>\n</tr>\n<tr>\n<td>chan</td>\n<td>else</td>\n<td>goto</td>\n<td>package</td>\n<td>switch</td>\n</tr>\n<tr>\n<td>const</td>\n<td>fallthrough</td>\n<td>if</td>\n<td>range</td>\n<td>type</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>for</td>\n<td>import</td>\n<td>return</td>\n<td>var</td>\n</tr>\n</tbody></table>\n<h4 id=\"二，Go程序的基本结构和要素\"><a href=\"#二，Go程序的基本结构和要素\" class=\"headerlink\" title=\"二，Go程序的基本结构和要素\"></a>二，<code>Go</code>程序的基本结构和要素</h4><ul>\n<li>包</li>\n</ul>\n<p>使用关键字<code>import</code>导入第三方或者官方标准库。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当一个包中的标识符(包括常量、变量、函数名、类型、结构体字段)以大写字母开头，这对外是可见的，否则外部导入不可使用。</p>\n<ul>\n<li>函数</li>\n</ul>\n<blockquote>\n<p>函数的定义:</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> 函数名<span class=\"params\">()</span></span> &#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> 函数名<span class=\"params\">(参数 类型,参数 类型)</span> 返回值/类型</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>括号中可以传递一个或者多个参数，参数后必须有参数类型。</p>\n<blockquote>\n<p>实例</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 相当于private</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 相当于public</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Add</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注释</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span> <span class=\"comment\">// Package implementing fromatted I/O</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">多行注释</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;Hello World!&quot;</span>) <span class=\"comment\">// 单行注释</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>类型</li>\n</ul>\n<p>基本类型：<code>int</code>、<code>float</code>、<code>bool</code>、<code>string</code></p>\n<p>复合类型：<code>struct</code>、<code>array</code>、<code>slice</code>、<code>map</code>、<code>channel</code></p>\n<ul>\n<li>类型转换</li>\n</ul>\n<p>go语言中一个类型的值可以被转换成另一种类型的值，go语言没有隐式转换、所有的转换必须是显示说明。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">valueTypeB &#x3D; typeB(valueTypeA)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三，常量\"><a href=\"#三，常量\" class=\"headerlink\" title=\"三，常量\"></a>三，常量</h4><p>go语言中常量使用<code>const</code>关键字定义，用于存储不会变化的数据。</p>\n<p>存储在1常量中的数据类型只能是：布尔类型、数字型、浮点型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Pi = <span class=\"number\">3.1415926</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> beef, two, c = <span class=\"string\">&quot;drink&quot;</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tUnknown = <span class=\"number\">0</span></span><br><span class=\"line\">  Female = <span class=\"number\">1</span></span><br><span class=\"line\">  Male = <span class=\"number\">2</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四，变量\"><a href=\"#四，变量\" class=\"headerlink\" title=\"四，变量\"></a>四，变量</h4><p>声明变量的一般形式是使用<code>var</code>关键字：<code>var identifier type</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a <span class=\"keyword\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b <span class=\"keyword\">string</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c, d <span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure>\n\n<p>变量声明后未赋值时，系统会自动赋予该变量类型的值：<code> int</code>为<code>0</code>、<code>string</code>为空字符串、<code>float</code>为<code>0.0</code>、指针为<code>nil</code></p>\n<p>变量命名规则遵循驼峰，首个字符单词小写、每个新单词首字母大写：<code>getNum</code></p>\n<p>变量可以不指定类型，系统会根据变量的值自动推断出其类型。</p>\n<ul>\n<li>简短形式</li>\n</ul>\n<p>常量赋值可以不用<code>var</code>关键字，使用<code>:=</code>操作符。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a := <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"五，strings和strconv包\"><a href=\"#五，strings和strconv包\" class=\"headerlink\" title=\"五，strings和strconv包\"></a>五，strings和strconv包</h4><ul>\n<li>前缀和后缀</li>\n</ul>\n<p>HasPrefix判断字符串<code>s</code>是否以<code>prefix</code>开头：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span>.HashPrefix(s, prefix <span class=\"keyword\">string</span>) <span class=\"keyword\">bool</span></span><br></pre></td></tr></table></figure>\n\n<p>​      HasSuffix判断字符串<code>s</code>是否以<code>suffix</code>结尾:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">string</span>.HasSuffix(s, suffix <span class=\"keyword\">string</span>) <span class=\"keyword\">bool</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>字符串包含</p>\n<p>Contains判断字符串<code>s</code>是否包含<code>substr</code>:</p>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.Contains(s, substr <span class=\"keyword\">string</span>) <span class=\"keyword\">bool</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>判断子字符串或者字符在父字符串中出现的位置</li>\n</ul>\n<p>Index返回字符串<code>str</code>在字符串<code>s</code>中的索引，<code>-1</code>表示字符串<code>s</code>不包含字符串<code>str</code>:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.Index(s, str <span class=\"keyword\">string</span>) <span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>字符串替换</li>\n</ul>\n<p>Replace用于将字符串<code>str</code>中的前<code>n</code>个字符串<code>old</code>替换为字符串<code>new</code>，并返回新的字符串，如果<code>n=-1</code>折替换所有字符串<code>old</code>为<code>new</code>:</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.Replace(str, old, <span class=\"built_in\">new</span> <span class=\"keyword\">string</span>, n <span class=\"keyword\">int</span>) <span class=\"keyword\">string</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>统计字符串出现的次数</li>\n</ul>\n<p>Count用于统计字符串<code>str</code>在字符串<code>s</code>中出现的次数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.Count(s, str <span class=\"keyword\">string</span>) <span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重复字符串</li>\n</ul>\n<p>Repeat用于重复<code>count</code>词字符串<code>s</code>并返回一个新的字符串</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.Repeat(s <span class=\"keyword\">string</span>, count <span class=\"keyword\">int</span>) <span class=\"keyword\">string</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改字符串大小写</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.ToLower(s) <span class=\"keyword\">string</span> <span class=\"comment\">// 小写</span></span><br><span class=\"line\">strings.ToUpper(s) <span class=\"keyword\">string</span> <span class=\"comment\">// 大写</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>剔除字符串</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.TrimSpace(s) <span class=\"comment\">// 剔除空白符</span></span><br><span class=\"line\">strings.TrimLeft(s)</span><br><span class=\"line\">strings.TrimRight(s)</span><br><span class=\"line\">strings.Trim(s, <span class=\"string\">&quot;cunt&quot;</span>) <span class=\"comment\">// 剔除其他的字符串</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>分割字符串</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.Fields(s) <span class=\"comment\">// 利用一个或多个空白1符号来作为动态长度的分隔符将字符串分割成若干小块，返回切片</span></span><br><span class=\"line\">strings.Split(s, sep) <span class=\"comment\">// 用于自定义分隔符号来对字符串进行分割，返回切片</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>拼接<code>slice</code>到字符串</li>\n</ul>\n<p>Join用于将元素类型为<code>string</code>的<code>slice</code>使用分割富豪来进行拼接成一个字符串</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.Join(s1 []<span class=\"keyword\">string</span>, sep <span class=\"keyword\">string</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>从字符串中读取内容</li>\n</ul>\n<p>函数<code>strings.Reader(str)</code>用于生成一个<code>Reader</code>并读取字符串中的内容，然后返回指向该<code>Reader</code>的指针:</p>\n  <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strings.Reader(str)</span><br><span class=\"line\">strings.Read(str) <span class=\"comment\">// 从[]byte中读取内容</span></span><br><span class=\"line\">strings.ReadByte(str) <span class=\"comment\">// 从字符串中读取下一个byte或者rune</span></span><br><span class=\"line\">strings.ReadRune() 同上</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"六，时间和日期\"><a href=\"#六，时间和日期\" class=\"headerlink\" title=\"六，时间和日期\"></a>六，时间和日期</h4><p>时间和日期标准库<code>time</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span>(</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  t := time.Now()</span><br><span class=\"line\">  t := time.Now.UTC()</span><br><span class=\"line\">  week := <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span> * <span class=\"number\">7</span> * <span class=\"number\">1e9</span></span><br><span class=\"line\">  week_from_now := t.Add(time.Duration(week))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"七，指针\"><a href=\"#七，指针\" class=\"headerlink\" title=\"七，指针\"></a>七，指针</h4><p>Go语言取址符为<code>&amp;</code>，变量前使用<code>&amp;</code>可以返回相应变量的内存地址。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i1 = <span class=\"number\">5</span></span><br><span class=\"line\">fmt.Printf(<span class=\"string\">&quot;An integer: %d, it&#x27;s location in memory: %p\\n&quot;</span>, i1, &amp;i1)</span><br></pre></td></tr></table></figure>\n\n<p>定一个指针，指向上面的<code>i1</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i1 = <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> intP *<span class=\"keyword\">int</span></span><br><span class=\"line\">  intP = &amp;i1</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;The Value of intP is&quot;</span>, *intP) <span class=\"comment\">// 5</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  s := <span class=\"string\">&quot;good bye&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> p *<span class=\"keyword\">string</span> = &amp;s</span><br><span class=\"line\">  *p = <span class=\"string\">&quot;ciao&quot;</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">&quot;Here is the pointer p: %p\\n&quot;</span>, p) <span class=\"comment\">// Here is the pointer p: 0xc00010a220</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">&quot;Here is the string *p %s\\n&quot;</span>, *p) <span class=\"comment\">// Here is the string *p ciao</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">&quot;Here is the string s: %s\\n&quot;</span>, s) <span class=\"comment\">// Here is the string s: ciao</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Go笔记-接口与反射","date":"2021-04-02T06:30:33.000Z","_content":"\nGo语言中没有继承和类的概念，但是有接口，通过接口可以实现面向对象中的很多特性。接口提供了一组方式来说明其对象的行为。\n\n<!-- more -->\n\n#### 接口\n\n##### 定义\n\n接口定义了一组方法，这些方法不包含其具体的实现，也不包含变量。如下：\n\n```go\ntype Foo interface {\n  Method1(params) return_type\n  Method2(params) return_type\n  ......\n}\n```\n\n按照接口约定，只包含一个方法的接口名由[e]r后缀组成，如：`Printer`、`Reader`，`Writer`等，一些不常用的方法以`able`或者`I`结尾，如：`Recoverable`。\n\n##### 接口嵌套接口\n\n一个接口可以包含另外的一个或者多个其它接口。如：\n\n```go\ntype ReadWrite interface {\n  Read(b Buffer) bool\n  Write(b Buffer) bool\n}\n\ntype Lock interface {\n  Lock()\n  Unlock()\n}\n\ntype File interface {\n  ReadWite\n  Lock\n  Close()\n}\n```\n\n##### 类型断言\n\n类型断言用来检测接口变量的类型和转换接口变量，通常一个接口类型的变量`varI`可以包含任何类型的值，需要有一种方法来检测它的类型。\n\n```go\nv := varI(T)\n```\n\n安全的方式：\n\n```go\nif _, ok := varI.(T); ok {\n  // TODO\n}\n```\n\neg:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n  \"math\"\n)\n\ntype Square struct {\n  side float32\n}\n\ntype Circle struct {\n  radius float32\n}\n\ntype Shaper interface {\n  Area() float32\n}\n\nfunc (s *Square) Area() float32 {\n  return s.side * s.side\n}\n\nfunc (c *Circle) Area() float32 {\n  return math.Pi * c.radius * c.radius\n}\n\nfunc main() {\n  var areaIntf Shaper\n  sq1 := new(Square)\n  sq1.side = 5\n  \n  areaIntf = sq1\n  \n  if t, ok := areaIntf.(Square); ok {\n    fmt.Printf(\"the type of areaIntf is: %T\\n\", t)\n  }\n}\n```\n\n##### 接口类型判断\n\n接口类型同样可以使用`type-switch`来判断：\n\n```go\nswitch areaIntf.(type) {\n  case *Square:\n  \t//\n  case *Circle:\n  \t//\n  case nil:\n  \t//\n\tdefault:\n  \t//\n}\n```\n\neg:\n\n```go\nfunc classifier(items ...interface{}) {\n  for i, x := range items {\n    switch x.(type) {\n      case bool:\n      fmt.Println(\"bool\")\n    \tcase float32:\n      fmt.Println(\"float32\")\n      ......\n    }\n  }\n}\n```\n\n##### 测试一个值是否实现了某个接口\n\n假定一个值`v`，判断它是否实现了`Stringer`接口：\n\n```go\ntype Stringer interface {\n  String() string\n}\n\nif _, ok := v.(Stringer); ok {\n  // ok\n}\n```\n\n","source":"_posts/Go笔记-接口与反射.md","raw":"---\ntitle: Go笔记-接口与反射\ndate: 2021-04-02 14:30:33\ntags: go\n---\n\nGo语言中没有继承和类的概念，但是有接口，通过接口可以实现面向对象中的很多特性。接口提供了一组方式来说明其对象的行为。\n\n<!-- more -->\n\n#### 接口\n\n##### 定义\n\n接口定义了一组方法，这些方法不包含其具体的实现，也不包含变量。如下：\n\n```go\ntype Foo interface {\n  Method1(params) return_type\n  Method2(params) return_type\n  ......\n}\n```\n\n按照接口约定，只包含一个方法的接口名由[e]r后缀组成，如：`Printer`、`Reader`，`Writer`等，一些不常用的方法以`able`或者`I`结尾，如：`Recoverable`。\n\n##### 接口嵌套接口\n\n一个接口可以包含另外的一个或者多个其它接口。如：\n\n```go\ntype ReadWrite interface {\n  Read(b Buffer) bool\n  Write(b Buffer) bool\n}\n\ntype Lock interface {\n  Lock()\n  Unlock()\n}\n\ntype File interface {\n  ReadWite\n  Lock\n  Close()\n}\n```\n\n##### 类型断言\n\n类型断言用来检测接口变量的类型和转换接口变量，通常一个接口类型的变量`varI`可以包含任何类型的值，需要有一种方法来检测它的类型。\n\n```go\nv := varI(T)\n```\n\n安全的方式：\n\n```go\nif _, ok := varI.(T); ok {\n  // TODO\n}\n```\n\neg:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n  \"math\"\n)\n\ntype Square struct {\n  side float32\n}\n\ntype Circle struct {\n  radius float32\n}\n\ntype Shaper interface {\n  Area() float32\n}\n\nfunc (s *Square) Area() float32 {\n  return s.side * s.side\n}\n\nfunc (c *Circle) Area() float32 {\n  return math.Pi * c.radius * c.radius\n}\n\nfunc main() {\n  var areaIntf Shaper\n  sq1 := new(Square)\n  sq1.side = 5\n  \n  areaIntf = sq1\n  \n  if t, ok := areaIntf.(Square); ok {\n    fmt.Printf(\"the type of areaIntf is: %T\\n\", t)\n  }\n}\n```\n\n##### 接口类型判断\n\n接口类型同样可以使用`type-switch`来判断：\n\n```go\nswitch areaIntf.(type) {\n  case *Square:\n  \t//\n  case *Circle:\n  \t//\n  case nil:\n  \t//\n\tdefault:\n  \t//\n}\n```\n\neg:\n\n```go\nfunc classifier(items ...interface{}) {\n  for i, x := range items {\n    switch x.(type) {\n      case bool:\n      fmt.Println(\"bool\")\n    \tcase float32:\n      fmt.Println(\"float32\")\n      ......\n    }\n  }\n}\n```\n\n##### 测试一个值是否实现了某个接口\n\n假定一个值`v`，判断它是否实现了`Stringer`接口：\n\n```go\ntype Stringer interface {\n  String() string\n}\n\nif _, ok := v.(Stringer); ok {\n  // ok\n}\n```\n\n","slug":"Go笔记-接口与反射","published":1,"updated":"2021-04-16T08:16:30.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb220007w7c94zuu799x","content":"<p>Go语言中没有继承和类的概念，但是有接口，通过接口可以实现面向对象中的很多特性。接口提供了一组方式来说明其对象的行为。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h4><h5 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>接口定义了一组方法，这些方法不包含其具体的实现，也不包含变量。如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Foo <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Method1(params) return_type</span><br><span class=\"line\">  Method2(params) return_type</span><br><span class=\"line\">  ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>按照接口约定，只包含一个方法的接口名由[e]r后缀组成，如：<code>Printer</code>、<code>Reader</code>，<code>Writer</code>等，一些不常用的方法以<code>able</code>或者<code>I</code>结尾，如：<code>Recoverable</code>。</p>\n<h5 id=\"接口嵌套接口\"><a href=\"#接口嵌套接口\" class=\"headerlink\" title=\"接口嵌套接口\"></a>接口嵌套接口</h5><p>一个接口可以包含另外的一个或者多个其它接口。如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ReadWrite <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Read(b Buffer) <span class=\"keyword\">bool</span></span><br><span class=\"line\">  Write(b Buffer) <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Lock <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Lock()</span><br><span class=\"line\">  Unlock()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> File <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  ReadWite</span><br><span class=\"line\">  Lock</span><br><span class=\"line\">  Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h5><p>类型断言用来检测接口变量的类型和转换接口变量，通常一个接口类型的变量<code>varI</code>可以包含任何类型的值，需要有一种方法来检测它的类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v := varI(T)</span><br></pre></td></tr></table></figure>\n\n<p>安全的方式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> _, ok := varI.(T); ok &#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Square <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  side <span class=\"keyword\">float32</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Circle <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  radius <span class=\"keyword\">float32</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Shaper <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Area() <span class=\"keyword\">float32</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Square)</span> <span class=\"title\">Area</span><span class=\"params\">()</span> <span class=\"title\">float32</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.side * s.side</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Circle)</span> <span class=\"title\">Area</span><span class=\"params\">()</span> <span class=\"title\">float32</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> math.Pi * c.radius * c.radius</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> areaIntf Shaper</span><br><span class=\"line\">  sq1 := <span class=\"built_in\">new</span>(Square)</span><br><span class=\"line\">  sq1.side = <span class=\"number\">5</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  areaIntf = sq1</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> t, ok := areaIntf.(Square); ok &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;the type of areaIntf is: %T\\n&quot;</span>, t)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"接口类型判断\"><a href=\"#接口类型判断\" class=\"headerlink\" title=\"接口类型判断\"></a>接口类型判断</h5><p>接口类型同样可以使用<code>type-switch</code>来判断：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> areaIntf.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> *Square:</span><br><span class=\"line\">  \t<span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> *Circle:</span><br><span class=\"line\">  \t<span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"literal\">nil</span>:</span><br><span class=\"line\">  \t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">  \t<span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">classifier</span><span class=\"params\">(items ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, x := <span class=\"keyword\">range</span> items &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> x.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"keyword\">bool</span>:</span><br><span class=\"line\">      fmt.Println(<span class=\"string\">&quot;bool&quot;</span>)</span><br><span class=\"line\">    \t<span class=\"keyword\">case</span> <span class=\"keyword\">float32</span>:</span><br><span class=\"line\">      fmt.Println(<span class=\"string\">&quot;float32&quot;</span>)</span><br><span class=\"line\">      ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"测试一个值是否实现了某个接口\"><a href=\"#测试一个值是否实现了某个接口\" class=\"headerlink\" title=\"测试一个值是否实现了某个接口\"></a>测试一个值是否实现了某个接口</h5><p>假定一个值<code>v</code>，判断它是否实现了<code>Stringer</code>接口：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Stringer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  String() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> _, ok := v.(Stringer); ok &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ok</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>Go语言中没有继承和类的概念，但是有接口，通过接口可以实现面向对象中的很多特性。接口提供了一组方式来说明其对象的行为。</p>","more":"<h4 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h4><h5 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>接口定义了一组方法，这些方法不包含其具体的实现，也不包含变量。如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Foo <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Method1(params) return_type</span><br><span class=\"line\">  Method2(params) return_type</span><br><span class=\"line\">  ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>按照接口约定，只包含一个方法的接口名由[e]r后缀组成，如：<code>Printer</code>、<code>Reader</code>，<code>Writer</code>等，一些不常用的方法以<code>able</code>或者<code>I</code>结尾，如：<code>Recoverable</code>。</p>\n<h5 id=\"接口嵌套接口\"><a href=\"#接口嵌套接口\" class=\"headerlink\" title=\"接口嵌套接口\"></a>接口嵌套接口</h5><p>一个接口可以包含另外的一个或者多个其它接口。如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ReadWrite <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Read(b Buffer) <span class=\"keyword\">bool</span></span><br><span class=\"line\">  Write(b Buffer) <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Lock <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Lock()</span><br><span class=\"line\">  Unlock()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> File <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  ReadWite</span><br><span class=\"line\">  Lock</span><br><span class=\"line\">  Close()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"类型断言\"><a href=\"#类型断言\" class=\"headerlink\" title=\"类型断言\"></a>类型断言</h5><p>类型断言用来检测接口变量的类型和转换接口变量，通常一个接口类型的变量<code>varI</code>可以包含任何类型的值，需要有一种方法来检测它的类型。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v := varI(T)</span><br></pre></td></tr></table></figure>\n\n<p>安全的方式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> _, ok := varI.(T); ok &#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Square <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  side <span class=\"keyword\">float32</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Circle <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  radius <span class=\"keyword\">float32</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Shaper <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Area() <span class=\"keyword\">float32</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(s *Square)</span> <span class=\"title\">Area</span><span class=\"params\">()</span> <span class=\"title\">float32</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.side * s.side</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Circle)</span> <span class=\"title\">Area</span><span class=\"params\">()</span> <span class=\"title\">float32</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> math.Pi * c.radius * c.radius</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> areaIntf Shaper</span><br><span class=\"line\">  sq1 := <span class=\"built_in\">new</span>(Square)</span><br><span class=\"line\">  sq1.side = <span class=\"number\">5</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  areaIntf = sq1</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> t, ok := areaIntf.(Square); ok &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;the type of areaIntf is: %T\\n&quot;</span>, t)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"接口类型判断\"><a href=\"#接口类型判断\" class=\"headerlink\" title=\"接口类型判断\"></a>接口类型判断</h5><p>接口类型同样可以使用<code>type-switch</code>来判断：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> areaIntf.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> *Square:</span><br><span class=\"line\">  \t<span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> *Circle:</span><br><span class=\"line\">  \t<span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"literal\">nil</span>:</span><br><span class=\"line\">  \t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">  \t<span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">classifier</span><span class=\"params\">(items ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, x := <span class=\"keyword\">range</span> items &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> x.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"keyword\">bool</span>:</span><br><span class=\"line\">      fmt.Println(<span class=\"string\">&quot;bool&quot;</span>)</span><br><span class=\"line\">    \t<span class=\"keyword\">case</span> <span class=\"keyword\">float32</span>:</span><br><span class=\"line\">      fmt.Println(<span class=\"string\">&quot;float32&quot;</span>)</span><br><span class=\"line\">      ......</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"测试一个值是否实现了某个接口\"><a href=\"#测试一个值是否实现了某个接口\" class=\"headerlink\" title=\"测试一个值是否实现了某个接口\"></a>测试一个值是否实现了某个接口</h5><p>假定一个值<code>v</code>，判断它是否实现了<code>Stringer</code>接口：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Stringer <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  String() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> _, ok := v.(Stringer); ok &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ok</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Go笔记-数组与切片","date":"2021-03-18T03:35:36.000Z","_content":"\nGo与其他语言一样，使用```[]```来表示数组，不过数组在Go中不够灵活，几乎不怎么使用，而是使用切片```slice```来代替。切片```slice```在构建数组上非常便捷，而且功能强大。\n\n<!-- more -->\n\n#### 数组\n\nGo语言中数组是一种具有相同唯一类型的一组已经编号且长度固定的数据向序列。\n\n##### 声明\n\n```go\n// 声明一个长度为5，int类型的数组\nvar arr1 [5]int\n```\n\n上面的数组声明后，会被初始化默认值```0```。\n\n##### 数组的值\n\n获取数组的值:\n\n```go\narr[index] // index为数组下标，范围0到len(arr) - 1\n```\n\n数组是可变的，可以被赋予新的值：\n\n```go\narr[i] = value\n```\n\nGo语言中的数组是一种值类型的，也可以通过```new```来创建数组。\n\n```go\nvar arr1 = new([5]arr)\n```\n\n区别于：```var arr2 [5]int```的是：\n\n```arr1```的类型是```*[5]int```，```arr2```的类型是```[5]int```。\n\n当我们把数组赋值给另一个数组时，会做一次数组内存的拷贝:\n\n```go\narr2 := *arr1\narr2[2] = 1\n```\n\n重新赋值后```arr2```不会改变`arr1`的值。\n\n在函数传参中传入数组时`func1(arr2)`，实际上就产生了一次内存拷贝，函数`func1`不会改变原始`arr2`的值。\n\n如果想要改变原始数组`arr2`，那么`arr2`必须通过操作符`&`来通过引用方式传入`func1(&arr2)`。\n\neg:\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  var arr [3]int\n  f(arr)\n  fp(&arr)\n}\n\nfunc f(a [3]int) {\n  fmt.Println(a) // [0 0 0]\n}\n\nfunc fp(a *[3]int) {\n  fmt.Println(a) // &[0 0 0]\n}\n```\n\n##### 多维数组\n\n```go\n[3][5]int\n```\n\n#### 切片\n\n切片是一种*引用*类型的结构。和数组一样，切片是可以索引的，与数组不同，切片的长度是可变的，切片是一个长度可变的数组。\n\n##### 声明切片\n\n```go\nvar identifier []type\n```\n\n##### 初始化切片\n\n```go\nvar slice1 []type = arr1[start:end]\n// eg\ns := []int{1,2,3}\n```\n\n获取切片长度使用`len(slice1)`，获取容量`cap(slice1)`\n\n> 不能将指针指向`slice`，因为它本身就是一个引用类型（指针）。\n\n##### 切片作为参数传递\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  a := []int{1,2,3,4,5}\n  s := sum(a)\n  fmt.Printf(\"Sum is: %v\", s)\n}\n\nfunc sum(a []int) int {\n  s := 0\n  for i := 0; i < len(a); i++ {\n    s += a[i]\n  }\n  \n  return s\n}\n```\n\n##### 使用`make()`创建切片\n\n```go\nmake([]int, len)\n\nvar slice1 []type = make([]type, len)\n// 简写\nslice1 := make([]type, len)\n```\n\neg:\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  var slice1 []int = make([]int, 10)\n  for i := 0; i < len(slcie1); i++ {\n    slice1[i] = 5 * i\n  }\n  \n  for i := 0; i < len(slice1); i++ {\n    fmt.Printf(\"Slice at %d is %d\\n\", i, slice1[i])\n  }\n}\n```\n\n##### make()和new()的区别\n\n- `new(T)`为每个新的类型`T`分配一片内存，初始化为`0`，返回新类型为`*T`的内存地址，返回一个指向类型为`T`，值为`0`的地址的指针，适用于值类型为*数组*和*结构体*\n- `make(T)`返回的是一个类型为`T`的初始值，适用于2种内建的引用类型：*切片*、`map`和`channel`\n\n`new`用来*分配内存*，`make`用来*初始化*。\n\n##### bytes包\n\n`bytes`包类似于字符串。`[]bytes`类型的切片在`Go`语言中十分常见。\n\n```go\nb := make([]bytes, len)\n```\n\n`bytes`中的`Buffer`类型十分有用，如常见的字符串追加，我们通常会使用`+=`，有了`Buffer`后可以使用如下：\n\n```go\nimport (\n\t\"bytes\"\n  \"fmt\"\n)\n\nvar buffer bytes.Buffer\n\nfor {\n  if s, ok := getNextString(); ok {\n    buffer.WriteString(s)\n  } else {\n    break\n  }\n}\n\nfmt.Print(buffer.String(), \"\\n\")\n```\n\n这种方法比`+=`更节省内存和`CPU`\n\n##### 切片的复制和追加\n\n有时我们需要增加切片的容量，此时我们需要做的就是创建一个新的更大的切片，然后将原切片拷贝出来。此时就需要用到切片的拷贝`copy`和追加`append`。\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  slForm := []int{1,2,3}\n  slTo := make([]int, 10)\n  n := copy(slTo, slForm)\n  fmt.Println(slTo) // [1 2 3 0 0 0 0 0 0 0]\n  fmt.Printf(\"Copied %d elements\\n\", n) // Copied 3 elements\n  \n  sl3 := []int{1,2,3}\n  sl3 = append(sl3, 4, 5, 6)\n  fmt.Println(sl3) // [1 2 3 4 5 6]\n}\n```\n\n##### 字符串、数组、切片\n\n- 修改字符串中的某个字符\n\nGo中的字符串是不可变的，如果想要修改字符串中的某个字符，必须先将字符串转换成字节数组，然后通过修改数组中的元素来达到修改字符串的目的。\n\n```go\n// 将hello修改为cello\ns := \"hello\"\nc := []byte(s)\nc[0] = \"c\"\ns2 := string(c) // cello\n```\n\n- 搜索、排序切片和数组\n\nGo官方标准库```sort```提供了常见的搜索和排序操作。如：\n\n>- `func Ints(a []int)`实现对`int`类型的切片排序：`sort.Ints(arri)`\n>- `func Strings(s []string)`实现对字符串的排序：`sort.Strings(s)`\n>- `func SearchInt(a []int, n int) int`实现搜索`int`类型的切片，返回的是索引值\n>- `func SearchStrings(s []string, str string) int`实现对字符串类型切片的查找\n\n还有其他的方法可查看官方文档。\n\n##### 切片和垃圾回收\n\n切片的底层是一个数组，数组的容量可能大于实际定义是的容量，只有当切片没有任何指向的时候，底层的数组才会被释放。\n\n```go\na := make([]int, 32)\nb := a[1:16]\na = append(a, 1) // a重新分配内存\na[2] = 42 // a,b不再共享内存，a变化不会影响到b\n```\n\n`append`函数在`cap`不够用的时候，会重新分配内存，扩大容量，如果够用就不会重新分配。\n\n","source":"_posts/Go笔记-数组与切片.md","raw":"---\ntitle: Go笔记-数组与切片\ndate: 2021-03-18 11:35:36\ntags: go\n---\n\nGo与其他语言一样，使用```[]```来表示数组，不过数组在Go中不够灵活，几乎不怎么使用，而是使用切片```slice```来代替。切片```slice```在构建数组上非常便捷，而且功能强大。\n\n<!-- more -->\n\n#### 数组\n\nGo语言中数组是一种具有相同唯一类型的一组已经编号且长度固定的数据向序列。\n\n##### 声明\n\n```go\n// 声明一个长度为5，int类型的数组\nvar arr1 [5]int\n```\n\n上面的数组声明后，会被初始化默认值```0```。\n\n##### 数组的值\n\n获取数组的值:\n\n```go\narr[index] // index为数组下标，范围0到len(arr) - 1\n```\n\n数组是可变的，可以被赋予新的值：\n\n```go\narr[i] = value\n```\n\nGo语言中的数组是一种值类型的，也可以通过```new```来创建数组。\n\n```go\nvar arr1 = new([5]arr)\n```\n\n区别于：```var arr2 [5]int```的是：\n\n```arr1```的类型是```*[5]int```，```arr2```的类型是```[5]int```。\n\n当我们把数组赋值给另一个数组时，会做一次数组内存的拷贝:\n\n```go\narr2 := *arr1\narr2[2] = 1\n```\n\n重新赋值后```arr2```不会改变`arr1`的值。\n\n在函数传参中传入数组时`func1(arr2)`，实际上就产生了一次内存拷贝，函数`func1`不会改变原始`arr2`的值。\n\n如果想要改变原始数组`arr2`，那么`arr2`必须通过操作符`&`来通过引用方式传入`func1(&arr2)`。\n\neg:\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  var arr [3]int\n  f(arr)\n  fp(&arr)\n}\n\nfunc f(a [3]int) {\n  fmt.Println(a) // [0 0 0]\n}\n\nfunc fp(a *[3]int) {\n  fmt.Println(a) // &[0 0 0]\n}\n```\n\n##### 多维数组\n\n```go\n[3][5]int\n```\n\n#### 切片\n\n切片是一种*引用*类型的结构。和数组一样，切片是可以索引的，与数组不同，切片的长度是可变的，切片是一个长度可变的数组。\n\n##### 声明切片\n\n```go\nvar identifier []type\n```\n\n##### 初始化切片\n\n```go\nvar slice1 []type = arr1[start:end]\n// eg\ns := []int{1,2,3}\n```\n\n获取切片长度使用`len(slice1)`，获取容量`cap(slice1)`\n\n> 不能将指针指向`slice`，因为它本身就是一个引用类型（指针）。\n\n##### 切片作为参数传递\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  a := []int{1,2,3,4,5}\n  s := sum(a)\n  fmt.Printf(\"Sum is: %v\", s)\n}\n\nfunc sum(a []int) int {\n  s := 0\n  for i := 0; i < len(a); i++ {\n    s += a[i]\n  }\n  \n  return s\n}\n```\n\n##### 使用`make()`创建切片\n\n```go\nmake([]int, len)\n\nvar slice1 []type = make([]type, len)\n// 简写\nslice1 := make([]type, len)\n```\n\neg:\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  var slice1 []int = make([]int, 10)\n  for i := 0; i < len(slcie1); i++ {\n    slice1[i] = 5 * i\n  }\n  \n  for i := 0; i < len(slice1); i++ {\n    fmt.Printf(\"Slice at %d is %d\\n\", i, slice1[i])\n  }\n}\n```\n\n##### make()和new()的区别\n\n- `new(T)`为每个新的类型`T`分配一片内存，初始化为`0`，返回新类型为`*T`的内存地址，返回一个指向类型为`T`，值为`0`的地址的指针，适用于值类型为*数组*和*结构体*\n- `make(T)`返回的是一个类型为`T`的初始值，适用于2种内建的引用类型：*切片*、`map`和`channel`\n\n`new`用来*分配内存*，`make`用来*初始化*。\n\n##### bytes包\n\n`bytes`包类似于字符串。`[]bytes`类型的切片在`Go`语言中十分常见。\n\n```go\nb := make([]bytes, len)\n```\n\n`bytes`中的`Buffer`类型十分有用，如常见的字符串追加，我们通常会使用`+=`，有了`Buffer`后可以使用如下：\n\n```go\nimport (\n\t\"bytes\"\n  \"fmt\"\n)\n\nvar buffer bytes.Buffer\n\nfor {\n  if s, ok := getNextString(); ok {\n    buffer.WriteString(s)\n  } else {\n    break\n  }\n}\n\nfmt.Print(buffer.String(), \"\\n\")\n```\n\n这种方法比`+=`更节省内存和`CPU`\n\n##### 切片的复制和追加\n\n有时我们需要增加切片的容量，此时我们需要做的就是创建一个新的更大的切片，然后将原切片拷贝出来。此时就需要用到切片的拷贝`copy`和追加`append`。\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  slForm := []int{1,2,3}\n  slTo := make([]int, 10)\n  n := copy(slTo, slForm)\n  fmt.Println(slTo) // [1 2 3 0 0 0 0 0 0 0]\n  fmt.Printf(\"Copied %d elements\\n\", n) // Copied 3 elements\n  \n  sl3 := []int{1,2,3}\n  sl3 = append(sl3, 4, 5, 6)\n  fmt.Println(sl3) // [1 2 3 4 5 6]\n}\n```\n\n##### 字符串、数组、切片\n\n- 修改字符串中的某个字符\n\nGo中的字符串是不可变的，如果想要修改字符串中的某个字符，必须先将字符串转换成字节数组，然后通过修改数组中的元素来达到修改字符串的目的。\n\n```go\n// 将hello修改为cello\ns := \"hello\"\nc := []byte(s)\nc[0] = \"c\"\ns2 := string(c) // cello\n```\n\n- 搜索、排序切片和数组\n\nGo官方标准库```sort```提供了常见的搜索和排序操作。如：\n\n>- `func Ints(a []int)`实现对`int`类型的切片排序：`sort.Ints(arri)`\n>- `func Strings(s []string)`实现对字符串的排序：`sort.Strings(s)`\n>- `func SearchInt(a []int, n int) int`实现搜索`int`类型的切片，返回的是索引值\n>- `func SearchStrings(s []string, str string) int`实现对字符串类型切片的查找\n\n还有其他的方法可查看官方文档。\n\n##### 切片和垃圾回收\n\n切片的底层是一个数组，数组的容量可能大于实际定义是的容量，只有当切片没有任何指向的时候，底层的数组才会被释放。\n\n```go\na := make([]int, 32)\nb := a[1:16]\na = append(a, 1) // a重新分配内存\na[2] = 42 // a,b不再共享内存，a变化不会影响到b\n```\n\n`append`函数在`cap`不够用的时候，会重新分配内存，扩大容量，如果够用就不会重新分配。\n\n","slug":"Go笔记-数组与切片","published":1,"updated":"2021-03-24T11:37:54.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb24000aw7c9h3f17smt","content":"<p>Go与其他语言一样，使用<code>[]</code>来表示数组，不过数组在Go中不够灵活，几乎不怎么使用，而是使用切片<code>slice</code>来代替。切片<code>slice</code>在构建数组上非常便捷，而且功能强大。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h4><p>Go语言中数组是一种具有相同唯一类型的一组已经编号且长度固定的数据向序列。</p>\n<h5 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个长度为5，int类型的数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 [<span class=\"number\">5</span>]<span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的数组声明后，会被初始化默认值<code>0</code>。</p>\n<h5 id=\"数组的值\"><a href=\"#数组的值\" class=\"headerlink\" title=\"数组的值\"></a>数组的值</h5><p>获取数组的值:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr[index] <span class=\"comment\">// index为数组下标，范围0到len(arr) - 1</span></span><br></pre></td></tr></table></figure>\n\n<p>数组是可变的，可以被赋予新的值：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr[i] = value</span><br></pre></td></tr></table></figure>\n\n<p>Go语言中的数组是一种值类型的，也可以通过<code>new</code>来创建数组。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = <span class=\"built_in\">new</span>([<span class=\"number\">5</span>]arr)</span><br></pre></td></tr></table></figure>\n\n<p>区别于：<code>var arr2 [5]int</code>的是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">当我们把数组赋值给另一个数组时，会做一次数组内存的拷贝:</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;go</span><br><span class=\"line\">arr2 :&#x3D; *arr1</span><br><span class=\"line\">arr2[2] &#x3D; 1</span><br></pre></td></tr></table></figure>\n\n<p>重新赋值后<code>arr2</code>不会改变<code>arr1</code>的值。</p>\n<p>在函数传参中传入数组时<code>func1(arr2)</code>，实际上就产生了一次内存拷贝，函数<code>func1</code>不会改变原始<code>arr2</code>的值。</p>\n<p>如果想要改变原始数组<code>arr2</code>，那么<code>arr2</code>必须通过操作符<code>&amp;</code>来通过引用方式传入<code>func1(&amp;arr2)</code>。</p>\n<p>eg:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr [<span class=\"number\">3</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">  f(arr)</span><br><span class=\"line\">  fp(&amp;arr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">(a [3]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(a) <span class=\"comment\">// [0 0 0]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fp</span><span class=\"params\">(a *[3]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(a) <span class=\"comment\">// &amp;[0 0 0]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">3</span>][<span class=\"number\">5</span>]<span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h4><p>切片是一种<em>引用</em>类型的结构。和数组一样，切片是可以索引的，与数组不同，切片的长度是可变的，切片是一个长度可变的数组。</p>\n<h5 id=\"声明切片\"><a href=\"#声明切片\" class=\"headerlink\" title=\"声明切片\"></a>声明切片</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> identifier []<span class=\"keyword\">type</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"初始化切片\"><a href=\"#初始化切片\" class=\"headerlink\" title=\"初始化切片\"></a>初始化切片</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> slice1 []<span class=\"keyword\">type</span> = arr1[start:end]</span><br><span class=\"line\"><span class=\"comment\">// eg</span></span><br><span class=\"line\">s := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>获取切片长度使用<code>len(slice1)</code>，获取容量<code>cap(slice1)</code></p>\n<blockquote>\n<p>不能将指针指向<code>slice</code>，因为它本身就是一个引用类型（指针）。</p>\n</blockquote>\n<h5 id=\"切片作为参数传递\"><a href=\"#切片作为参数传递\" class=\"headerlink\" title=\"切片作为参数传递\"></a>切片作为参数传递</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  a := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</span><br><span class=\"line\">  s := sum(a)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">&quot;Sum is: %v&quot;</span>, s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(a []<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">  s := <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ &#123;</span><br><span class=\"line\">    s += a[i]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用make-创建切片\"><a href=\"#使用make-创建切片\" class=\"headerlink\" title=\"使用make()创建切片\"></a>使用<code>make()</code>创建切片</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> slice1 []<span class=\"keyword\">type</span> = <span class=\"built_in\">make</span>([]<span class=\"keyword\">type</span>, <span class=\"built_in\">len</span>)</span><br><span class=\"line\"><span class=\"comment\">// 简写</span></span><br><span class=\"line\">slice1 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">type</span>, <span class=\"built_in\">len</span>)</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> slice1 []<span class=\"keyword\">int</span> = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(slcie1); i++ &#123;</span><br><span class=\"line\">    slice1[i] = <span class=\"number\">5</span> * i</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(slice1); i++ &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Slice at %d is %d\\n&quot;</span>, i, slice1[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"make-和new-的区别\"><a href=\"#make-和new-的区别\" class=\"headerlink\" title=\"make()和new()的区别\"></a>make()和new()的区别</h5><ul>\n<li><code>new(T)</code>为每个新的类型<code>T</code>分配一片内存，初始化为<code>0</code>，返回新类型为<code>*T</code>的内存地址，返回一个指向类型为<code>T</code>，值为<code>0</code>的地址的指针，适用于值类型为<em>数组</em>和<em>结构体</em></li>\n<li><code>make(T)</code>返回的是一个类型为<code>T</code>的初始值，适用于2种内建的引用类型：<em>切片</em>、<code>map</code>和<code>channel</code></li>\n</ul>\n<p><code>new</code>用来<em>分配内存</em>，<code>make</code>用来<em>初始化</em>。</p>\n<h5 id=\"bytes包\"><a href=\"#bytes包\" class=\"headerlink\" title=\"bytes包\"></a>bytes包</h5><p><code>bytes</code>包类似于字符串。<code>[]bytes</code>类型的切片在<code>Go</code>语言中十分常见。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b := <span class=\"built_in\">make</span>([]bytes, <span class=\"built_in\">len</span>)</span><br></pre></td></tr></table></figure>\n\n<p><code>bytes</code>中的<code>Buffer</code>类型十分有用，如常见的字符串追加，我们通常会使用<code>+=</code>，有了<code>Buffer</code>后可以使用如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;bytes&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> buffer bytes.Buffer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> s, ok := getNextString(); ok &#123;</span><br><span class=\"line\">    buffer.WriteString(s)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Print(buffer.String(), <span class=\"string\">&quot;\\n&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这种方法比<code>+=</code>更节省内存和<code>CPU</code></p>\n<h5 id=\"切片的复制和追加\"><a href=\"#切片的复制和追加\" class=\"headerlink\" title=\"切片的复制和追加\"></a>切片的复制和追加</h5><p>有时我们需要增加切片的容量，此时我们需要做的就是创建一个新的更大的切片，然后将原切片拷贝出来。此时就需要用到切片的拷贝<code>copy</code>和追加<code>append</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  slForm := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">  slTo := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">  n := <span class=\"built_in\">copy</span>(slTo, slForm)</span><br><span class=\"line\">  fmt.Println(slTo) <span class=\"comment\">// [1 2 3 0 0 0 0 0 0 0]</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">&quot;Copied %d elements\\n&quot;</span>, n) <span class=\"comment\">// Copied 3 elements</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  sl3 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">  sl3 = <span class=\"built_in\">append</span>(sl3, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">  fmt.Println(sl3) <span class=\"comment\">// [1 2 3 4 5 6]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"字符串、数组、切片\"><a href=\"#字符串、数组、切片\" class=\"headerlink\" title=\"字符串、数组、切片\"></a>字符串、数组、切片</h5><ul>\n<li>修改字符串中的某个字符</li>\n</ul>\n<p>Go中的字符串是不可变的，如果想要修改字符串中的某个字符，必须先将字符串转换成字节数组，然后通过修改数组中的元素来达到修改字符串的目的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将hello修改为cello</span></span><br><span class=\"line\">s := <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">c := []<span class=\"keyword\">byte</span>(s)</span><br><span class=\"line\">c[<span class=\"number\">0</span>] = <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">s2 := <span class=\"keyword\">string</span>(c) <span class=\"comment\">// cello</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>搜索、排序切片和数组</li>\n</ul>\n<p>Go官方标准库<code>sort</code>提供了常见的搜索和排序操作。如：</p>\n<blockquote>\n<ul>\n<li><code>func Ints(a []int)</code>实现对<code>int</code>类型的切片排序：<code>sort.Ints(arri)</code></li>\n<li><code>func Strings(s []string)</code>实现对字符串的排序：<code>sort.Strings(s)</code></li>\n<li><code>func SearchInt(a []int, n int) int</code>实现搜索<code>int</code>类型的切片，返回的是索引值</li>\n<li><code>func SearchStrings(s []string, str string) int</code>实现对字符串类型切片的查找</li>\n</ul>\n</blockquote>\n<p>还有其他的方法可查看官方文档。</p>\n<h5 id=\"切片和垃圾回收\"><a href=\"#切片和垃圾回收\" class=\"headerlink\" title=\"切片和垃圾回收\"></a>切片和垃圾回收</h5><p>切片的底层是一个数组，数组的容量可能大于实际定义是的容量，只有当切片没有任何指向的时候，底层的数组才会被释放。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">32</span>)</span><br><span class=\"line\">b := a[<span class=\"number\">1</span>:<span class=\"number\">16</span>]</span><br><span class=\"line\">a = <span class=\"built_in\">append</span>(a, <span class=\"number\">1</span>) <span class=\"comment\">// a重新分配内存</span></span><br><span class=\"line\">a[<span class=\"number\">2</span>] = <span class=\"number\">42</span> <span class=\"comment\">// a,b不再共享内存，a变化不会影响到b</span></span><br></pre></td></tr></table></figure>\n\n<p><code>append</code>函数在<code>cap</code>不够用的时候，会重新分配内存，扩大容量，如果够用就不会重新分配。</p>\n","site":{"data":{}},"excerpt":"<p>Go与其他语言一样，使用<code>[]</code>来表示数组，不过数组在Go中不够灵活，几乎不怎么使用，而是使用切片<code>slice</code>来代替。切片<code>slice</code>在构建数组上非常便捷，而且功能强大。</p>","more":"<h4 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h4><p>Go语言中数组是一种具有相同唯一类型的一组已经编号且长度固定的数据向序列。</p>\n<h5 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个长度为5，int类型的数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 [<span class=\"number\">5</span>]<span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的数组声明后，会被初始化默认值<code>0</code>。</p>\n<h5 id=\"数组的值\"><a href=\"#数组的值\" class=\"headerlink\" title=\"数组的值\"></a>数组的值</h5><p>获取数组的值:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr[index] <span class=\"comment\">// index为数组下标，范围0到len(arr) - 1</span></span><br></pre></td></tr></table></figure>\n\n<p>数组是可变的，可以被赋予新的值：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr[i] = value</span><br></pre></td></tr></table></figure>\n\n<p>Go语言中的数组是一种值类型的，也可以通过<code>new</code>来创建数组。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = <span class=\"built_in\">new</span>([<span class=\"number\">5</span>]arr)</span><br></pre></td></tr></table></figure>\n\n<p>区别于：<code>var arr2 [5]int</code>的是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">当我们把数组赋值给另一个数组时，会做一次数组内存的拷贝:</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;go</span><br><span class=\"line\">arr2 :&#x3D; *arr1</span><br><span class=\"line\">arr2[2] &#x3D; 1</span><br></pre></td></tr></table></figure>\n\n<p>重新赋值后<code>arr2</code>不会改变<code>arr1</code>的值。</p>\n<p>在函数传参中传入数组时<code>func1(arr2)</code>，实际上就产生了一次内存拷贝，函数<code>func1</code>不会改变原始<code>arr2</code>的值。</p>\n<p>如果想要改变原始数组<code>arr2</code>，那么<code>arr2</code>必须通过操作符<code>&amp;</code>来通过引用方式传入<code>func1(&amp;arr2)</code>。</p>\n<p>eg:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr [<span class=\"number\">3</span>]<span class=\"keyword\">int</span></span><br><span class=\"line\">  f(arr)</span><br><span class=\"line\">  fp(&amp;arr)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">(a [3]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(a) <span class=\"comment\">// [0 0 0]</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fp</span><span class=\"params\">(a *[3]<span class=\"keyword\">int</span>)</span></span> &#123;</span><br><span class=\"line\">  fmt.Println(a) <span class=\"comment\">// &amp;[0 0 0]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">3</span>][<span class=\"number\">5</span>]<span class=\"keyword\">int</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h4><p>切片是一种<em>引用</em>类型的结构。和数组一样，切片是可以索引的，与数组不同，切片的长度是可变的，切片是一个长度可变的数组。</p>\n<h5 id=\"声明切片\"><a href=\"#声明切片\" class=\"headerlink\" title=\"声明切片\"></a>声明切片</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> identifier []<span class=\"keyword\">type</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"初始化切片\"><a href=\"#初始化切片\" class=\"headerlink\" title=\"初始化切片\"></a>初始化切片</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> slice1 []<span class=\"keyword\">type</span> = arr1[start:end]</span><br><span class=\"line\"><span class=\"comment\">// eg</span></span><br><span class=\"line\">s := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<p>获取切片长度使用<code>len(slice1)</code>，获取容量<code>cap(slice1)</code></p>\n<blockquote>\n<p>不能将指针指向<code>slice</code>，因为它本身就是一个引用类型（指针）。</p>\n</blockquote>\n<h5 id=\"切片作为参数传递\"><a href=\"#切片作为参数传递\" class=\"headerlink\" title=\"切片作为参数传递\"></a>切片作为参数传递</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  a := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;</span><br><span class=\"line\">  s := sum(a)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">&quot;Sum is: %v&quot;</span>, s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(a []<span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">  s := <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(a); i++ &#123;</span><br><span class=\"line\">    s += a[i]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"使用make-创建切片\"><a href=\"#使用make-创建切片\" class=\"headerlink\" title=\"使用make()创建切片\"></a>使用<code>make()</code>创建切片</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"built_in\">len</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> slice1 []<span class=\"keyword\">type</span> = <span class=\"built_in\">make</span>([]<span class=\"keyword\">type</span>, <span class=\"built_in\">len</span>)</span><br><span class=\"line\"><span class=\"comment\">// 简写</span></span><br><span class=\"line\">slice1 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">type</span>, <span class=\"built_in\">len</span>)</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> slice1 []<span class=\"keyword\">int</span> = <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(slcie1); i++ &#123;</span><br><span class=\"line\">    slice1[i] = <span class=\"number\">5</span> * i</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(slice1); i++ &#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Slice at %d is %d\\n&quot;</span>, i, slice1[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"make-和new-的区别\"><a href=\"#make-和new-的区别\" class=\"headerlink\" title=\"make()和new()的区别\"></a>make()和new()的区别</h5><ul>\n<li><code>new(T)</code>为每个新的类型<code>T</code>分配一片内存，初始化为<code>0</code>，返回新类型为<code>*T</code>的内存地址，返回一个指向类型为<code>T</code>，值为<code>0</code>的地址的指针，适用于值类型为<em>数组</em>和<em>结构体</em></li>\n<li><code>make(T)</code>返回的是一个类型为<code>T</code>的初始值，适用于2种内建的引用类型：<em>切片</em>、<code>map</code>和<code>channel</code></li>\n</ul>\n<p><code>new</code>用来<em>分配内存</em>，<code>make</code>用来<em>初始化</em>。</p>\n<h5 id=\"bytes包\"><a href=\"#bytes包\" class=\"headerlink\" title=\"bytes包\"></a>bytes包</h5><p><code>bytes</code>包类似于字符串。<code>[]bytes</code>类型的切片在<code>Go</code>语言中十分常见。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b := <span class=\"built_in\">make</span>([]bytes, <span class=\"built_in\">len</span>)</span><br></pre></td></tr></table></figure>\n\n<p><code>bytes</code>中的<code>Buffer</code>类型十分有用，如常见的字符串追加，我们通常会使用<code>+=</code>，有了<code>Buffer</code>后可以使用如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;bytes&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> buffer bytes.Buffer</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> s, ok := getNextString(); ok &#123;</span><br><span class=\"line\">    buffer.WriteString(s)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Print(buffer.String(), <span class=\"string\">&quot;\\n&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>这种方法比<code>+=</code>更节省内存和<code>CPU</code></p>\n<h5 id=\"切片的复制和追加\"><a href=\"#切片的复制和追加\" class=\"headerlink\" title=\"切片的复制和追加\"></a>切片的复制和追加</h5><p>有时我们需要增加切片的容量，此时我们需要做的就是创建一个新的更大的切片，然后将原切片拷贝出来。此时就需要用到切片的拷贝<code>copy</code>和追加<code>append</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  slForm := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">  slTo := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">  n := <span class=\"built_in\">copy</span>(slTo, slForm)</span><br><span class=\"line\">  fmt.Println(slTo) <span class=\"comment\">// [1 2 3 0 0 0 0 0 0 0]</span></span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">&quot;Copied %d elements\\n&quot;</span>, n) <span class=\"comment\">// Copied 3 elements</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  sl3 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">  sl3 = <span class=\"built_in\">append</span>(sl3, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\">  fmt.Println(sl3) <span class=\"comment\">// [1 2 3 4 5 6]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"字符串、数组、切片\"><a href=\"#字符串、数组、切片\" class=\"headerlink\" title=\"字符串、数组、切片\"></a>字符串、数组、切片</h5><ul>\n<li>修改字符串中的某个字符</li>\n</ul>\n<p>Go中的字符串是不可变的，如果想要修改字符串中的某个字符，必须先将字符串转换成字节数组，然后通过修改数组中的元素来达到修改字符串的目的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将hello修改为cello</span></span><br><span class=\"line\">s := <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">c := []<span class=\"keyword\">byte</span>(s)</span><br><span class=\"line\">c[<span class=\"number\">0</span>] = <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">s2 := <span class=\"keyword\">string</span>(c) <span class=\"comment\">// cello</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>搜索、排序切片和数组</li>\n</ul>\n<p>Go官方标准库<code>sort</code>提供了常见的搜索和排序操作。如：</p>\n<blockquote>\n<ul>\n<li><code>func Ints(a []int)</code>实现对<code>int</code>类型的切片排序：<code>sort.Ints(arri)</code></li>\n<li><code>func Strings(s []string)</code>实现对字符串的排序：<code>sort.Strings(s)</code></li>\n<li><code>func SearchInt(a []int, n int) int</code>实现搜索<code>int</code>类型的切片，返回的是索引值</li>\n<li><code>func SearchStrings(s []string, str string) int</code>实现对字符串类型切片的查找</li>\n</ul>\n</blockquote>\n<p>还有其他的方法可查看官方文档。</p>\n<h5 id=\"切片和垃圾回收\"><a href=\"#切片和垃圾回收\" class=\"headerlink\" title=\"切片和垃圾回收\"></a>切片和垃圾回收</h5><p>切片的底层是一个数组，数组的容量可能大于实际定义是的容量，只有当切片没有任何指向的时候，底层的数组才会被释放。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">32</span>)</span><br><span class=\"line\">b := a[<span class=\"number\">1</span>:<span class=\"number\">16</span>]</span><br><span class=\"line\">a = <span class=\"built_in\">append</span>(a, <span class=\"number\">1</span>) <span class=\"comment\">// a重新分配内存</span></span><br><span class=\"line\">a[<span class=\"number\">2</span>] = <span class=\"number\">42</span> <span class=\"comment\">// a,b不再共享内存，a变化不会影响到b</span></span><br></pre></td></tr></table></figure>\n\n<p><code>append</code>函数在<code>cap</code>不够用的时候，会重新分配内存，扩大容量，如果够用就不会重新分配。</p>"},{"title":"Go笔记-结构体与方法","date":"2021-03-30T07:29:33.000Z","_content":"\nGo通过类型别名和结构体来支持用户自定义类型，需要定义一个类型，它由一系列属性组成，每个属性都有自己的类型和值的时候，就应该使用结构体，它把数据聚集在一起。然后可以访问这些数据。有点像`php`、`java`中的`class`。\n\n<!-- more -->\n\n#### 结构体\n\n##### 定义\n\n组成结构体类型的数据称之为字段，每个字段都有一个字段名和类型，且字段名是唯一的。\n\n定义如下：\n\n```go\ntype identifier struct {\n  field1 type1\n  field2 type2\n}\n```\n\neg:\n\n```go\ntype User struct {\n  Name string\n  Age int\n}\n```\n\n结构体的字段可以使任何类型，甚至结构体本身，也可以是*函数*或者*接口*。\n\n##### 使用new给一个新的结构体分配内存\n\n```go\nimport \"fmt\"\n\ntype struct1 struct {\n  i1 int\n  i2 float32\n  str string\n}\n\nfunc main() {\n  ms := new(struct1)\n  ms.i1 = 5\n  ms.i2 = 10.0\n  ms.str = \"hello\"\n  \n  fmt.Printf(\"i1 is: %d\\n\", ms.i1)\n  fmt.Printf(\"i2 is: %f\\n\", ms.i2)\n  fmt.Printf(\"str is: %ds\\n\", ms.str)\n  fmt.Println(ms)\n}\n```\n\n```\ni1 is: 5\ni2 is: 10.000000\nstr is: hello\n&{5, 10.0, hello}\n```\n\n##### 工厂方法创建结构体实例\n\nGo使用构造子工厂的方法实现构造函数。\n\n```go\ntype File struct {\n  fd int\n  name string\n}\n\n\nfunc NewFile(fd int, name string) *File {\n  if fd < 0 {\n    return nil\n  }\n  return &File{fd, name}\n}\n```\n\n调用\n\n```go\nf := NewFile(10, \"./test.txt\")\n```\n\n##### 强制使用工厂方法\n\n```go\ntype matrix struct {\n  ....\n}\n\nfunc NewMatrix(params) * matrix{\n  m := new(matrix)\n  return m\n}\n```\n\n使用\n\n```go\nfunc main() {\n  r := matrix.NewMatrix(params)\n}\n```\n\n##### 匿名字段和内嵌结构体\n\n结构体可以包含一个或者多个匿名字段，匿名字段没有显示名称，但是必须有字段类型，字段类型就是字段名称。匿名字段同时可以是一个结构体，当一个结构体中包含的一个匿名字段是一个结构体时相当于面向对象中的继承行为，在Go中是通过组合来实现的。\n\n```go\npackage main\n\nimport \"fmt\"\n\ntype innerS struct {\n  in1 string\n  in2 int\n}\n\ntype outerS struct {\n  a int\n  b string\n  int\n  innerS // 组合结构体\n}\n\nfunc main() {\n  outers := new(outerS)\n  outers.a = 1\n  outers.b = \"hello\"\n  outers.int = 2\n  outers.in1 = \"world\"\n  outers.in2 = 3\n  \n  // 使用结构体字面量\n  outers2 := outerS{4, \"kirintang\", 5, innerS{\"github\", 6}}\n}\n```\n\n> 组合结构体会出现一个问题，字段命名冲突，此时需要自行修改保证字段名不能一致。\n\n#### 方法\n\n##### 定义\n\n方法的定义一般格式为：\n\n```go\n// recv方法的1接收者\nfunc (recv receiver_type) methodName(parameter_list) (return_value_list) {\n  ......\n}\n```\n\n如果方法不需要使用`recv`的值，可以省略`_`：`receiver_type`必须和*方法名*在同样的包中声明。\n\n```go\nfunc (_ receiver_type) methodName(parameter_list) (return_value_list) {\n  ......\n}\n```\n\n`recv`相当于面向对象语言中的`this`或者`self`，`Go`中没有这两个关键字，所以可以写成`this`或者`self`来代替：\n\n```go\nfunc (this receiver_type) methodName(parameter_list) (return_value_list) {\n  ......\n}\n// 或者\nfunc (self receiver_type) methodName(parameter_list) (return_value_list) {\n  ......\n}\n```\n\neg:\n\n```go\nimport \"fmt\"\n\ntype TwoInt struct {\n\ta, b int\n}\n\nfunc main() {\n\ttwo1 := new(TwoInt)\n\ttwo1.a = 1\n\ttwo1.b = 2\n\n\tfmt.Printf(\"sum is: %d\\n\", two1.AddThem()) // 11\n\tfmt.Printf(\"sum of param: %d\\n\", two1.AddToParam(10)) // 21\n}\n\nfunc (tn *TwoInt) AddThem() int {\n  tn.b = 10\n\treturn tn.a + tn.b\n}\n\nfunc (tn *TwoInt) AddToParam(param int) int {\n\treturn tn.a + tn.b + param\n}\n```\n\n##### 函数和方法的区别\n\n函数将变量作为参数：`Function1(recv)`\n\n方法在变量上被调用：`recv.Method1()`\n\n##### 内嵌类型的方法和继承\n\n当一个匿名类型被嵌套在结构体中时，匿名类型的可见方法也会被嵌套进去，相当于外层类型继承了这些可见方法：子类型继承父类型的公共方法 (有面向对象内味儿了)。\n\n一个`Engine`的接口类型，一个`Car`的结构类型包含`Engine`类型的匿名字段：\n\n```go\ntype Engine interface {\n  Start()\n  Stop()\n}\n\ntype Car struct {\n  Engine\n}\n\nfunc (c *Car) GotoWork() {\n  c.Start()\n  c.Stop()\n}\n```\n\n","source":"_posts/Go笔记-结构体与方法.md","raw":"---\ntitle: Go笔记-结构体与方法\ndate: 2021-03-30 15:29:33\ntags: go\n---\n\nGo通过类型别名和结构体来支持用户自定义类型，需要定义一个类型，它由一系列属性组成，每个属性都有自己的类型和值的时候，就应该使用结构体，它把数据聚集在一起。然后可以访问这些数据。有点像`php`、`java`中的`class`。\n\n<!-- more -->\n\n#### 结构体\n\n##### 定义\n\n组成结构体类型的数据称之为字段，每个字段都有一个字段名和类型，且字段名是唯一的。\n\n定义如下：\n\n```go\ntype identifier struct {\n  field1 type1\n  field2 type2\n}\n```\n\neg:\n\n```go\ntype User struct {\n  Name string\n  Age int\n}\n```\n\n结构体的字段可以使任何类型，甚至结构体本身，也可以是*函数*或者*接口*。\n\n##### 使用new给一个新的结构体分配内存\n\n```go\nimport \"fmt\"\n\ntype struct1 struct {\n  i1 int\n  i2 float32\n  str string\n}\n\nfunc main() {\n  ms := new(struct1)\n  ms.i1 = 5\n  ms.i2 = 10.0\n  ms.str = \"hello\"\n  \n  fmt.Printf(\"i1 is: %d\\n\", ms.i1)\n  fmt.Printf(\"i2 is: %f\\n\", ms.i2)\n  fmt.Printf(\"str is: %ds\\n\", ms.str)\n  fmt.Println(ms)\n}\n```\n\n```\ni1 is: 5\ni2 is: 10.000000\nstr is: hello\n&{5, 10.0, hello}\n```\n\n##### 工厂方法创建结构体实例\n\nGo使用构造子工厂的方法实现构造函数。\n\n```go\ntype File struct {\n  fd int\n  name string\n}\n\n\nfunc NewFile(fd int, name string) *File {\n  if fd < 0 {\n    return nil\n  }\n  return &File{fd, name}\n}\n```\n\n调用\n\n```go\nf := NewFile(10, \"./test.txt\")\n```\n\n##### 强制使用工厂方法\n\n```go\ntype matrix struct {\n  ....\n}\n\nfunc NewMatrix(params) * matrix{\n  m := new(matrix)\n  return m\n}\n```\n\n使用\n\n```go\nfunc main() {\n  r := matrix.NewMatrix(params)\n}\n```\n\n##### 匿名字段和内嵌结构体\n\n结构体可以包含一个或者多个匿名字段，匿名字段没有显示名称，但是必须有字段类型，字段类型就是字段名称。匿名字段同时可以是一个结构体，当一个结构体中包含的一个匿名字段是一个结构体时相当于面向对象中的继承行为，在Go中是通过组合来实现的。\n\n```go\npackage main\n\nimport \"fmt\"\n\ntype innerS struct {\n  in1 string\n  in2 int\n}\n\ntype outerS struct {\n  a int\n  b string\n  int\n  innerS // 组合结构体\n}\n\nfunc main() {\n  outers := new(outerS)\n  outers.a = 1\n  outers.b = \"hello\"\n  outers.int = 2\n  outers.in1 = \"world\"\n  outers.in2 = 3\n  \n  // 使用结构体字面量\n  outers2 := outerS{4, \"kirintang\", 5, innerS{\"github\", 6}}\n}\n```\n\n> 组合结构体会出现一个问题，字段命名冲突，此时需要自行修改保证字段名不能一致。\n\n#### 方法\n\n##### 定义\n\n方法的定义一般格式为：\n\n```go\n// recv方法的1接收者\nfunc (recv receiver_type) methodName(parameter_list) (return_value_list) {\n  ......\n}\n```\n\n如果方法不需要使用`recv`的值，可以省略`_`：`receiver_type`必须和*方法名*在同样的包中声明。\n\n```go\nfunc (_ receiver_type) methodName(parameter_list) (return_value_list) {\n  ......\n}\n```\n\n`recv`相当于面向对象语言中的`this`或者`self`，`Go`中没有这两个关键字，所以可以写成`this`或者`self`来代替：\n\n```go\nfunc (this receiver_type) methodName(parameter_list) (return_value_list) {\n  ......\n}\n// 或者\nfunc (self receiver_type) methodName(parameter_list) (return_value_list) {\n  ......\n}\n```\n\neg:\n\n```go\nimport \"fmt\"\n\ntype TwoInt struct {\n\ta, b int\n}\n\nfunc main() {\n\ttwo1 := new(TwoInt)\n\ttwo1.a = 1\n\ttwo1.b = 2\n\n\tfmt.Printf(\"sum is: %d\\n\", two1.AddThem()) // 11\n\tfmt.Printf(\"sum of param: %d\\n\", two1.AddToParam(10)) // 21\n}\n\nfunc (tn *TwoInt) AddThem() int {\n  tn.b = 10\n\treturn tn.a + tn.b\n}\n\nfunc (tn *TwoInt) AddToParam(param int) int {\n\treturn tn.a + tn.b + param\n}\n```\n\n##### 函数和方法的区别\n\n函数将变量作为参数：`Function1(recv)`\n\n方法在变量上被调用：`recv.Method1()`\n\n##### 内嵌类型的方法和继承\n\n当一个匿名类型被嵌套在结构体中时，匿名类型的可见方法也会被嵌套进去，相当于外层类型继承了这些可见方法：子类型继承父类型的公共方法 (有面向对象内味儿了)。\n\n一个`Engine`的接口类型，一个`Car`的结构类型包含`Engine`类型的匿名字段：\n\n```go\ntype Engine interface {\n  Start()\n  Stop()\n}\n\ntype Car struct {\n  Engine\n}\n\nfunc (c *Car) GotoWork() {\n  c.Start()\n  c.Stop()\n}\n```\n\n","slug":"Go笔记-结构体与方法","published":1,"updated":"2021-04-01T08:30:31.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb25000cw7c9baqucgsx","content":"<p>Go通过类型别名和结构体来支持用户自定义类型，需要定义一个类型，它由一系列属性组成，每个属性都有自己的类型和值的时候，就应该使用结构体，它把数据聚集在一起。然后可以访问这些数据。有点像<code>php</code>、<code>java</code>中的<code>class</code>。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h4><h5 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>组成结构体类型的数据称之为字段，每个字段都有一个字段名和类型，且字段名是唯一的。</p>\n<p>定义如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> identifier <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  field1 type1</span><br><span class=\"line\">  field2 type2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Name <span class=\"keyword\">string</span></span><br><span class=\"line\">  Age <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结构体的字段可以使任何类型，甚至结构体本身，也可以是<em>函数</em>或者<em>接口</em>。</p>\n<h5 id=\"使用new给一个新的结构体分配内存\"><a href=\"#使用new给一个新的结构体分配内存\" class=\"headerlink\" title=\"使用new给一个新的结构体分配内存\"></a>使用new给一个新的结构体分配内存</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> struct1 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  i1 <span class=\"keyword\">int</span></span><br><span class=\"line\">  i2 <span class=\"keyword\">float32</span></span><br><span class=\"line\">  str <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  ms := <span class=\"built_in\">new</span>(struct1)</span><br><span class=\"line\">  ms.i1 = <span class=\"number\">5</span></span><br><span class=\"line\">  ms.i2 = <span class=\"number\">10.0</span></span><br><span class=\"line\">  ms.str = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">&quot;i1 is: %d\\n&quot;</span>, ms.i1)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">&quot;i2 is: %f\\n&quot;</span>, ms.i2)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">&quot;str is: %ds\\n&quot;</span>, ms.str)</span><br><span class=\"line\">  fmt.Println(ms)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i1 is: 5</span><br><span class=\"line\">i2 is: 10.000000</span><br><span class=\"line\">str is: hello</span><br><span class=\"line\">&amp;&#123;5, 10.0, hello&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"工厂方法创建结构体实例\"><a href=\"#工厂方法创建结构体实例\" class=\"headerlink\" title=\"工厂方法创建结构体实例\"></a>工厂方法创建结构体实例</h5><p>Go使用构造子工厂的方法实现构造函数。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> File <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  fd <span class=\"keyword\">int</span></span><br><span class=\"line\">  name <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewFile</span><span class=\"params\">(fd <span class=\"keyword\">int</span>, name <span class=\"keyword\">string</span>)</span> *<span class=\"title\">File</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> fd &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;File&#123;fd, name&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f := NewFile(<span class=\"number\">10</span>, <span class=\"string\">&quot;./test.txt&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"强制使用工厂方法\"><a href=\"#强制使用工厂方法\" class=\"headerlink\" title=\"强制使用工厂方法\"></a>强制使用工厂方法</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> matrix <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  ....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewMatrix</span><span class=\"params\">(params)</span> * <span class=\"title\">matrix</span></span>&#123;</span><br><span class=\"line\">  m := <span class=\"built_in\">new</span>(matrix)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> m</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  r := matrix.NewMatrix(params)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"匿名字段和内嵌结构体\"><a href=\"#匿名字段和内嵌结构体\" class=\"headerlink\" title=\"匿名字段和内嵌结构体\"></a>匿名字段和内嵌结构体</h5><p>结构体可以包含一个或者多个匿名字段，匿名字段没有显示名称，但是必须有字段类型，字段类型就是字段名称。匿名字段同时可以是一个结构体，当一个结构体中包含的一个匿名字段是一个结构体时相当于面向对象中的继承行为，在Go中是通过组合来实现的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> innerS <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  in1 <span class=\"keyword\">string</span></span><br><span class=\"line\">  in2 <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> outerS <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  a <span class=\"keyword\">int</span></span><br><span class=\"line\">  b <span class=\"keyword\">string</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span></span><br><span class=\"line\">  innerS <span class=\"comment\">// 组合结构体</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  outers := <span class=\"built_in\">new</span>(outerS)</span><br><span class=\"line\">  outers.a = <span class=\"number\">1</span></span><br><span class=\"line\">  outers.b = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">  outers.<span class=\"keyword\">int</span> = <span class=\"number\">2</span></span><br><span class=\"line\">  outers.in1 = <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">  outers.in2 = <span class=\"number\">3</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用结构体字面量</span></span><br><span class=\"line\">  outers2 := outerS&#123;<span class=\"number\">4</span>, <span class=\"string\">&quot;kirintang&quot;</span>, <span class=\"number\">5</span>, innerS&#123;<span class=\"string\">&quot;github&quot;</span>, <span class=\"number\">6</span>&#125;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>组合结构体会出现一个问题，字段命名冲突，此时需要自行修改保证字段名不能一致。</p>\n</blockquote>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><h5 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>方法的定义一般格式为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// recv方法的1接收者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(recv receiver_type)</span> <span class=\"title\">methodName</span><span class=\"params\">(parameter_list)</span> <span class=\"params\">(return_value_list)</span></span> &#123;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果方法不需要使用<code>recv</code>的值，可以省略<code>_</code>：<code>receiver_type</code>必须和<em>方法名</em>在同样的包中声明。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(_ receiver_type)</span> <span class=\"title\">methodName</span><span class=\"params\">(parameter_list)</span> <span class=\"params\">(return_value_list)</span></span> &#123;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>recv</code>相当于面向对象语言中的<code>this</code>或者<code>self</code>，<code>Go</code>中没有这两个关键字，所以可以写成<code>this</code>或者<code>self</code>来代替：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this receiver_type)</span> <span class=\"title\">methodName</span><span class=\"params\">(parameter_list)</span> <span class=\"params\">(return_value_list)</span></span> &#123;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self receiver_type)</span> <span class=\"title\">methodName</span><span class=\"params\">(parameter_list)</span> <span class=\"params\">(return_value_list)</span></span> &#123;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> TwoInt <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ta, b <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttwo1 := <span class=\"built_in\">new</span>(TwoInt)</span><br><span class=\"line\">\ttwo1.a = <span class=\"number\">1</span></span><br><span class=\"line\">\ttwo1.b = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;sum is: %d\\n&quot;</span>, two1.AddThem()) <span class=\"comment\">// 11</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;sum of param: %d\\n&quot;</span>, two1.AddToParam(<span class=\"number\">10</span>)) <span class=\"comment\">// 21</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tn *TwoInt)</span> <span class=\"title\">AddThem</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">  tn.b = <span class=\"number\">10</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> tn.a + tn.b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tn *TwoInt)</span> <span class=\"title\">AddToParam</span><span class=\"params\">(param <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> tn.a + tn.b + param</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数和方法的区别\"><a href=\"#函数和方法的区别\" class=\"headerlink\" title=\"函数和方法的区别\"></a>函数和方法的区别</h5><p>函数将变量作为参数：<code>Function1(recv)</code></p>\n<p>方法在变量上被调用：<code>recv.Method1()</code></p>\n<h5 id=\"内嵌类型的方法和继承\"><a href=\"#内嵌类型的方法和继承\" class=\"headerlink\" title=\"内嵌类型的方法和继承\"></a>内嵌类型的方法和继承</h5><p>当一个匿名类型被嵌套在结构体中时，匿名类型的可见方法也会被嵌套进去，相当于外层类型继承了这些可见方法：子类型继承父类型的公共方法 (有面向对象内味儿了)。</p>\n<p>一个<code>Engine</code>的接口类型，一个<code>Car</code>的结构类型包含<code>Engine</code>类型的匿名字段：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Engine <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Start()</span><br><span class=\"line\">  Stop()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Car <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Engine</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Car)</span> <span class=\"title\">GotoWork</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  c.Start()</span><br><span class=\"line\">  c.Stop()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>Go通过类型别名和结构体来支持用户自定义类型，需要定义一个类型，它由一系列属性组成，每个属性都有自己的类型和值的时候，就应该使用结构体，它把数据聚集在一起。然后可以访问这些数据。有点像<code>php</code>、<code>java</code>中的<code>class</code>。</p>","more":"<h4 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h4><h5 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>组成结构体类型的数据称之为字段，每个字段都有一个字段名和类型，且字段名是唯一的。</p>\n<p>定义如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> identifier <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  field1 type1</span><br><span class=\"line\">  field2 type2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Name <span class=\"keyword\">string</span></span><br><span class=\"line\">  Age <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结构体的字段可以使任何类型，甚至结构体本身，也可以是<em>函数</em>或者<em>接口</em>。</p>\n<h5 id=\"使用new给一个新的结构体分配内存\"><a href=\"#使用new给一个新的结构体分配内存\" class=\"headerlink\" title=\"使用new给一个新的结构体分配内存\"></a>使用new给一个新的结构体分配内存</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> struct1 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  i1 <span class=\"keyword\">int</span></span><br><span class=\"line\">  i2 <span class=\"keyword\">float32</span></span><br><span class=\"line\">  str <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  ms := <span class=\"built_in\">new</span>(struct1)</span><br><span class=\"line\">  ms.i1 = <span class=\"number\">5</span></span><br><span class=\"line\">  ms.i2 = <span class=\"number\">10.0</span></span><br><span class=\"line\">  ms.str = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">&quot;i1 is: %d\\n&quot;</span>, ms.i1)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">&quot;i2 is: %f\\n&quot;</span>, ms.i2)</span><br><span class=\"line\">  fmt.Printf(<span class=\"string\">&quot;str is: %ds\\n&quot;</span>, ms.str)</span><br><span class=\"line\">  fmt.Println(ms)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i1 is: 5</span><br><span class=\"line\">i2 is: 10.000000</span><br><span class=\"line\">str is: hello</span><br><span class=\"line\">&amp;&#123;5, 10.0, hello&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"工厂方法创建结构体实例\"><a href=\"#工厂方法创建结构体实例\" class=\"headerlink\" title=\"工厂方法创建结构体实例\"></a>工厂方法创建结构体实例</h5><p>Go使用构造子工厂的方法实现构造函数。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> File <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  fd <span class=\"keyword\">int</span></span><br><span class=\"line\">  name <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewFile</span><span class=\"params\">(fd <span class=\"keyword\">int</span>, name <span class=\"keyword\">string</span>)</span> *<span class=\"title\">File</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> fd &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;File&#123;fd, name&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f := NewFile(<span class=\"number\">10</span>, <span class=\"string\">&quot;./test.txt&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"强制使用工厂方法\"><a href=\"#强制使用工厂方法\" class=\"headerlink\" title=\"强制使用工厂方法\"></a>强制使用工厂方法</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> matrix <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  ....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewMatrix</span><span class=\"params\">(params)</span> * <span class=\"title\">matrix</span></span>&#123;</span><br><span class=\"line\">  m := <span class=\"built_in\">new</span>(matrix)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> m</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  r := matrix.NewMatrix(params)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"匿名字段和内嵌结构体\"><a href=\"#匿名字段和内嵌结构体\" class=\"headerlink\" title=\"匿名字段和内嵌结构体\"></a>匿名字段和内嵌结构体</h5><p>结构体可以包含一个或者多个匿名字段，匿名字段没有显示名称，但是必须有字段类型，字段类型就是字段名称。匿名字段同时可以是一个结构体，当一个结构体中包含的一个匿名字段是一个结构体时相当于面向对象中的继承行为，在Go中是通过组合来实现的。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> innerS <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  in1 <span class=\"keyword\">string</span></span><br><span class=\"line\">  in2 <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> outerS <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  a <span class=\"keyword\">int</span></span><br><span class=\"line\">  b <span class=\"keyword\">string</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span></span><br><span class=\"line\">  innerS <span class=\"comment\">// 组合结构体</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  outers := <span class=\"built_in\">new</span>(outerS)</span><br><span class=\"line\">  outers.a = <span class=\"number\">1</span></span><br><span class=\"line\">  outers.b = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">  outers.<span class=\"keyword\">int</span> = <span class=\"number\">2</span></span><br><span class=\"line\">  outers.in1 = <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">  outers.in2 = <span class=\"number\">3</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用结构体字面量</span></span><br><span class=\"line\">  outers2 := outerS&#123;<span class=\"number\">4</span>, <span class=\"string\">&quot;kirintang&quot;</span>, <span class=\"number\">5</span>, innerS&#123;<span class=\"string\">&quot;github&quot;</span>, <span class=\"number\">6</span>&#125;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>组合结构体会出现一个问题，字段命名冲突，此时需要自行修改保证字段名不能一致。</p>\n</blockquote>\n<h4 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h4><h5 id=\"定义-1\"><a href=\"#定义-1\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>方法的定义一般格式为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// recv方法的1接收者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(recv receiver_type)</span> <span class=\"title\">methodName</span><span class=\"params\">(parameter_list)</span> <span class=\"params\">(return_value_list)</span></span> &#123;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果方法不需要使用<code>recv</code>的值，可以省略<code>_</code>：<code>receiver_type</code>必须和<em>方法名</em>在同样的包中声明。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(_ receiver_type)</span> <span class=\"title\">methodName</span><span class=\"params\">(parameter_list)</span> <span class=\"params\">(return_value_list)</span></span> &#123;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>recv</code>相当于面向对象语言中的<code>this</code>或者<code>self</code>，<code>Go</code>中没有这两个关键字，所以可以写成<code>this</code>或者<code>self</code>来代替：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this receiver_type)</span> <span class=\"title\">methodName</span><span class=\"params\">(parameter_list)</span> <span class=\"params\">(return_value_list)</span></span> &#123;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(self receiver_type)</span> <span class=\"title\">methodName</span><span class=\"params\">(parameter_list)</span> <span class=\"params\">(return_value_list)</span></span> &#123;</span><br><span class=\"line\">  ......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> TwoInt <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\ta, b <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttwo1 := <span class=\"built_in\">new</span>(TwoInt)</span><br><span class=\"line\">\ttwo1.a = <span class=\"number\">1</span></span><br><span class=\"line\">\ttwo1.b = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;sum is: %d\\n&quot;</span>, two1.AddThem()) <span class=\"comment\">// 11</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;sum of param: %d\\n&quot;</span>, two1.AddToParam(<span class=\"number\">10</span>)) <span class=\"comment\">// 21</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tn *TwoInt)</span> <span class=\"title\">AddThem</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">  tn.b = <span class=\"number\">10</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> tn.a + tn.b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(tn *TwoInt)</span> <span class=\"title\">AddToParam</span><span class=\"params\">(param <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> tn.a + tn.b + param</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数和方法的区别\"><a href=\"#函数和方法的区别\" class=\"headerlink\" title=\"函数和方法的区别\"></a>函数和方法的区别</h5><p>函数将变量作为参数：<code>Function1(recv)</code></p>\n<p>方法在变量上被调用：<code>recv.Method1()</code></p>\n<h5 id=\"内嵌类型的方法和继承\"><a href=\"#内嵌类型的方法和继承\" class=\"headerlink\" title=\"内嵌类型的方法和继承\"></a>内嵌类型的方法和继承</h5><p>当一个匿名类型被嵌套在结构体中时，匿名类型的可见方法也会被嵌套进去，相当于外层类型继承了这些可见方法：子类型继承父类型的公共方法 (有面向对象内味儿了)。</p>\n<p>一个<code>Engine</code>的接口类型，一个<code>Car</code>的结构类型包含<code>Engine</code>类型的匿名字段：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Engine <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Start()</span><br><span class=\"line\">  Stop()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Car <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  Engine</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Car)</span> <span class=\"title\">GotoWork</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  c.Start()</span><br><span class=\"line\">  c.Stop()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Go笔记-读写数据","date":"2021-04-16T08:53:20.000Z","_content":"\n读写数据是编程中经常用到的操作，比如命令行读取用户输入、文件读取等。\n\n<!-- more -->\n\n#### 读取用户输入\n\n- 读取命令行输入\n\n```go\npackage main\n\nimport \"fmt\"\n\nvar firstName, lastName string\n\nfunc main() {\n\tfmt.Println(\"Please input your name:\")\n\tfmt.Scan(&firstName, &lastName)\n\tfmt.Printf(\"Hi, %s %s\", firstName, lastName)\n}\n```\n\n使用标准库`fmt`的`Scan`实现用户输入。\n\n也可以使用`bufio`提供的缓冲读取数据：\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nvar inputReader *bufio.Reader\n\nfunc main() {\n\tinputReader = bufio.NewReader(os.Stdin)\n\tfmt.Println(\"Please input something:\")\n  input, err := inputReader.ReadString('\\n')\n\tif err == nil {\n\t\tfmt.Printf(\"The input is: %s\\n\", input)\n\t}\n}\n```\n\n#### 文件读写\n\n文件句柄使用标准库`os.File`\n\n- 读文件\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\nfunc main() {\n\tinputFile, inputError := os.Open(\"./test.txt\")\n\tif inputError != nil {\n\t\treturn\n\t}\n\tdefer inputFile.Close()\n\n\tinputReader := bufio.NewReader(inputFile)\n\tfor {\n\t\tinputString, readerErr := inputReader.ReadString('\\n')\n\t\tfmt.Printf(\"The input was: %s\", inputString)\n\t\tif readerErr == io.EOF {\n\t\t\treturn\n\t\t}\n\t}\n}\n```\n\n- 写文件\n\n`buffo`的`Writer`实现文件写入：\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc main() {\n\toutputFile, outputError := os.OpenFile(\"output.txt\", os.O_WRONLY|os.O_CREATE, 0666) // O_WONLY只写 O_CREATE创建\n\tif outputError != nil {\n\t\treturn\n\t}\n\tdefer outputFile.Close()\n\n\toutputWriter := bufio.NewWriter(outputFile) // 创建缓冲区\n\toutputString := \"hello world!\\n\"\n\n\tfor i := 0; i < 10; i++ {\n\t\toutputWriter.WriteString(outputString) // 写入缓冲区\n\t}\n\toutputWriter.Flush() // 从缓冲区写入文件\n}\n```\n\n如果写的东西很简单，也可以使用`fmt`的`Fprintf`直接将内容写入文件，`fmt`里面`F`开头的`Print`函数可以直接写入任何`io.Writer`。\n\n#### 文件拷贝\n\n使用`io`包可以将一个文件拷贝到另一个文件。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\nfunc main() {\n\tCopyFile(\"./target.txt\", \"./source.txt\")\n\tfmt.Printf(\"Copy done!\")\n}\n\nfunc CopyFile(dstName, srcName string) (written int64, err error) {\n\tsrc, err := os.Open(srcName)\n\tif err != nil {\n\t\tfmt.Errorf(\"open src file err\")\n\t\treturn\n\t}\n\tdefer src.Close()\n\n\tdst, err := os.Create(dstName)\n\tif err != nil {\n\t\tfmt.Errorf(\"open dst file err\")\n\t\treturn\n\t}\n\tdefer dst.Close()\n\n\treturn io.Copy(dst, src)\n}\n```\n\n#### 从命令行读取参数\n\n- os包\n\n`os`包中`string`类型的切片变量`os.Args`用来处理一些基本的命令行参数，可以在程序启动后读取命令行输入的参数：\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\twho := \"Alice\"\n\tif len(os.Args) > 1 {\n\t\twho += strings.Join(os.Args[1:], \" \")\n\t}\n\tfmt.Println(\"Good Moring\", who)\n}\n```\n\n还有其他的如`flag`包，现代化命令行`cobra`包。","source":"_posts/Go笔记-读写数据.md","raw":"---\ntitle: Go笔记-读写数据\ndate: 2021-04-16 16:53:20\ntags: go\n---\n\n读写数据是编程中经常用到的操作，比如命令行读取用户输入、文件读取等。\n\n<!-- more -->\n\n#### 读取用户输入\n\n- 读取命令行输入\n\n```go\npackage main\n\nimport \"fmt\"\n\nvar firstName, lastName string\n\nfunc main() {\n\tfmt.Println(\"Please input your name:\")\n\tfmt.Scan(&firstName, &lastName)\n\tfmt.Printf(\"Hi, %s %s\", firstName, lastName)\n}\n```\n\n使用标准库`fmt`的`Scan`实现用户输入。\n\n也可以使用`bufio`提供的缓冲读取数据：\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n)\n\nvar inputReader *bufio.Reader\n\nfunc main() {\n\tinputReader = bufio.NewReader(os.Stdin)\n\tfmt.Println(\"Please input something:\")\n  input, err := inputReader.ReadString('\\n')\n\tif err == nil {\n\t\tfmt.Printf(\"The input is: %s\\n\", input)\n\t}\n}\n```\n\n#### 文件读写\n\n文件句柄使用标准库`os.File`\n\n- 读文件\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\nfunc main() {\n\tinputFile, inputError := os.Open(\"./test.txt\")\n\tif inputError != nil {\n\t\treturn\n\t}\n\tdefer inputFile.Close()\n\n\tinputReader := bufio.NewReader(inputFile)\n\tfor {\n\t\tinputString, readerErr := inputReader.ReadString('\\n')\n\t\tfmt.Printf(\"The input was: %s\", inputString)\n\t\tif readerErr == io.EOF {\n\t\t\treturn\n\t\t}\n\t}\n}\n```\n\n- 写文件\n\n`buffo`的`Writer`实现文件写入：\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"os\"\n)\n\nfunc main() {\n\toutputFile, outputError := os.OpenFile(\"output.txt\", os.O_WRONLY|os.O_CREATE, 0666) // O_WONLY只写 O_CREATE创建\n\tif outputError != nil {\n\t\treturn\n\t}\n\tdefer outputFile.Close()\n\n\toutputWriter := bufio.NewWriter(outputFile) // 创建缓冲区\n\toutputString := \"hello world!\\n\"\n\n\tfor i := 0; i < 10; i++ {\n\t\toutputWriter.WriteString(outputString) // 写入缓冲区\n\t}\n\toutputWriter.Flush() // 从缓冲区写入文件\n}\n```\n\n如果写的东西很简单，也可以使用`fmt`的`Fprintf`直接将内容写入文件，`fmt`里面`F`开头的`Print`函数可以直接写入任何`io.Writer`。\n\n#### 文件拷贝\n\n使用`io`包可以将一个文件拷贝到另一个文件。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n\nfunc main() {\n\tCopyFile(\"./target.txt\", \"./source.txt\")\n\tfmt.Printf(\"Copy done!\")\n}\n\nfunc CopyFile(dstName, srcName string) (written int64, err error) {\n\tsrc, err := os.Open(srcName)\n\tif err != nil {\n\t\tfmt.Errorf(\"open src file err\")\n\t\treturn\n\t}\n\tdefer src.Close()\n\n\tdst, err := os.Create(dstName)\n\tif err != nil {\n\t\tfmt.Errorf(\"open dst file err\")\n\t\treturn\n\t}\n\tdefer dst.Close()\n\n\treturn io.Copy(dst, src)\n}\n```\n\n#### 从命令行读取参数\n\n- os包\n\n`os`包中`string`类型的切片变量`os.Args`用来处理一些基本的命令行参数，可以在程序启动后读取命令行输入的参数：\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc main() {\n\twho := \"Alice\"\n\tif len(os.Args) > 1 {\n\t\twho += strings.Join(os.Args[1:], \" \")\n\t}\n\tfmt.Println(\"Good Moring\", who)\n}\n```\n\n还有其他的如`flag`包，现代化命令行`cobra`包。","slug":"Go笔记-读写数据","published":1,"updated":"2021-04-25T06:22:49.553Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb27000fw7c9hdcwbrow","content":"<p>读写数据是编程中经常用到的操作，比如命令行读取用户输入、文件读取等。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"读取用户输入\"><a href=\"#读取用户输入\" class=\"headerlink\" title=\"读取用户输入\"></a>读取用户输入</h4><ul>\n<li>读取命令行输入</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstName, lastName <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Please input your name:&quot;</span>)</span><br><span class=\"line\">\tfmt.Scan(&amp;firstName, &amp;lastName)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;Hi, %s %s&quot;</span>, firstName, lastName)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用标准库<code>fmt</code>的<code>Scan</code>实现用户输入。</p>\n<p>也可以使用<code>bufio</code>提供的缓冲读取数据：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;bufio&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> inputReader *bufio.Reader</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tinputReader = bufio.NewReader(os.Stdin)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Please input something:&quot;</span>)</span><br><span class=\"line\">  input, err := inputReader.ReadString(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;The input is: %s\\n&quot;</span>, input)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文件读写\"><a href=\"#文件读写\" class=\"headerlink\" title=\"文件读写\"></a>文件读写</h4><p>文件句柄使用标准库<code>os.File</code></p>\n<ul>\n<li>读文件</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;bufio&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tinputFile, inputError := os.Open(<span class=\"string\">&quot;./test.txt&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> inputError != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> inputFile.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tinputReader := bufio.NewReader(inputFile)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tinputString, readerErr := inputReader.ReadString(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;The input was: %s&quot;</span>, inputString)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> readerErr == io.EOF &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>写文件</li>\n</ul>\n<p><code>buffo</code>的<code>Writer</code>实现文件写入：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;bufio&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\toutputFile, outputError := os.OpenFile(<span class=\"string\">&quot;output.txt&quot;</span>, os.O_WRONLY|os.O_CREATE, <span class=\"number\">0666</span>) <span class=\"comment\">// O_WONLY只写 O_CREATE创建</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> outputError != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> outputFile.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\toutputWriter := bufio.NewWriter(outputFile) <span class=\"comment\">// 创建缓冲区</span></span><br><span class=\"line\">\toutputString := <span class=\"string\">&quot;hello world!\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\toutputWriter.WriteString(outputString) <span class=\"comment\">// 写入缓冲区</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\toutputWriter.Flush() <span class=\"comment\">// 从缓冲区写入文件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果写的东西很简单，也可以使用<code>fmt</code>的<code>Fprintf</code>直接将内容写入文件，<code>fmt</code>里面<code>F</code>开头的<code>Print</code>函数可以直接写入任何<code>io.Writer</code>。</p>\n<h4 id=\"文件拷贝\"><a href=\"#文件拷贝\" class=\"headerlink\" title=\"文件拷贝\"></a>文件拷贝</h4><p>使用<code>io</code>包可以将一个文件拷贝到另一个文件。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tCopyFile(<span class=\"string\">&quot;./target.txt&quot;</span>, <span class=\"string\">&quot;./source.txt&quot;</span>)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;Copy done!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CopyFile</span><span class=\"params\">(dstName, srcName <span class=\"keyword\">string</span>)</span> <span class=\"params\">(written <span class=\"keyword\">int64</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\tsrc, err := os.Open(srcName)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Errorf(<span class=\"string\">&quot;open src file err&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> src.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tdst, err := os.Create(dstName)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Errorf(<span class=\"string\">&quot;open dst file err&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> dst.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> io.Copy(dst, src)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"从命令行读取参数\"><a href=\"#从命令行读取参数\" class=\"headerlink\" title=\"从命令行读取参数\"></a>从命令行读取参数</h4><ul>\n<li>os包</li>\n</ul>\n<p><code>os</code>包中<code>string</code>类型的切片变量<code>os.Args</code>用来处理一些基本的命令行参数，可以在程序启动后读取命令行输入的参数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\twho := <span class=\"string\">&quot;Alice&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(os.Args) &gt; <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\twho += strings.Join(os.Args[<span class=\"number\">1</span>:], <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Good Moring&quot;</span>, who)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有其他的如<code>flag</code>包，现代化命令行<code>cobra</code>包。</p>\n","site":{"data":{}},"excerpt":"<p>读写数据是编程中经常用到的操作，比如命令行读取用户输入、文件读取等。</p>","more":"<h4 id=\"读取用户输入\"><a href=\"#读取用户输入\" class=\"headerlink\" title=\"读取用户输入\"></a>读取用户输入</h4><ul>\n<li>读取命令行输入</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstName, lastName <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Please input your name:&quot;</span>)</span><br><span class=\"line\">\tfmt.Scan(&amp;firstName, &amp;lastName)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;Hi, %s %s&quot;</span>, firstName, lastName)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用标准库<code>fmt</code>的<code>Scan</code>实现用户输入。</p>\n<p>也可以使用<code>bufio</code>提供的缓冲读取数据：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;bufio&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> inputReader *bufio.Reader</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tinputReader = bufio.NewReader(os.Stdin)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Please input something:&quot;</span>)</span><br><span class=\"line\">  input, err := inputReader.ReadString(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;The input is: %s\\n&quot;</span>, input)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"文件读写\"><a href=\"#文件读写\" class=\"headerlink\" title=\"文件读写\"></a>文件读写</h4><p>文件句柄使用标准库<code>os.File</code></p>\n<ul>\n<li>读文件</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;bufio&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tinputFile, inputError := os.Open(<span class=\"string\">&quot;./test.txt&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> inputError != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> inputFile.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tinputReader := bufio.NewReader(inputFile)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tinputString, readerErr := inputReader.ReadString(<span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;The input was: %s&quot;</span>, inputString)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> readerErr == io.EOF &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>写文件</li>\n</ul>\n<p><code>buffo</code>的<code>Writer</code>实现文件写入：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;bufio&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\toutputFile, outputError := os.OpenFile(<span class=\"string\">&quot;output.txt&quot;</span>, os.O_WRONLY|os.O_CREATE, <span class=\"number\">0666</span>) <span class=\"comment\">// O_WONLY只写 O_CREATE创建</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> outputError != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> outputFile.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\toutputWriter := bufio.NewWriter(outputFile) <span class=\"comment\">// 创建缓冲区</span></span><br><span class=\"line\">\toutputString := <span class=\"string\">&quot;hello world!\\n&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\toutputWriter.WriteString(outputString) <span class=\"comment\">// 写入缓冲区</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\toutputWriter.Flush() <span class=\"comment\">// 从缓冲区写入文件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果写的东西很简单，也可以使用<code>fmt</code>的<code>Fprintf</code>直接将内容写入文件，<code>fmt</code>里面<code>F</code>开头的<code>Print</code>函数可以直接写入任何<code>io.Writer</code>。</p>\n<h4 id=\"文件拷贝\"><a href=\"#文件拷贝\" class=\"headerlink\" title=\"文件拷贝\"></a>文件拷贝</h4><p>使用<code>io</code>包可以将一个文件拷贝到另一个文件。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tCopyFile(<span class=\"string\">&quot;./target.txt&quot;</span>, <span class=\"string\">&quot;./source.txt&quot;</span>)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;Copy done!&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CopyFile</span><span class=\"params\">(dstName, srcName <span class=\"keyword\">string</span>)</span> <span class=\"params\">(written <span class=\"keyword\">int64</span>, err error)</span></span> &#123;</span><br><span class=\"line\">\tsrc, err := os.Open(srcName)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Errorf(<span class=\"string\">&quot;open src file err&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> src.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tdst, err := os.Create(dstName)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Errorf(<span class=\"string\">&quot;open dst file err&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> dst.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> io.Copy(dst, src)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"从命令行读取参数\"><a href=\"#从命令行读取参数\" class=\"headerlink\" title=\"从命令行读取参数\"></a>从命令行读取参数</h4><ul>\n<li>os包</li>\n</ul>\n<p><code>os</code>包中<code>string</code>类型的切片变量<code>os.Args</code>用来处理一些基本的命令行参数，可以在程序启动后读取命令行输入的参数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\twho := <span class=\"string\">&quot;Alice&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(os.Args) &gt; <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\twho += strings.Join(os.Args[<span class=\"number\">1</span>:], <span class=\"string\">&quot; &quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Good Moring&quot;</span>, who)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还有其他的如<code>flag</code>包，现代化命令行<code>cobra</code>包。</p>"},{"title":"Kubernetes中进行简单应用部署","date":"2021-03-12T07:13:48.000Z","_content":"\n掌握了```k8s```的部署启动，还需要知道如何在```k8s```中部署相应的应用服务，所谓实践检验真理，在```k8s```中部署一个简单的```nginx```服务来上手。\n\n<!-- more -->\n\n#### 一，创建```Nginx Deployment```\n\n- ```nginx-deployment.yaml```文件编写\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.18.0\n        ports:\n        - containerPort: 80\n```\n\n- 应用```nginx-deployment.yaml```\n\n```bash\n$ kubectl apply -f nginx-deployment.yaml\ndeployment.apps/nginx-deployment created\n```\n\n- 查看```Pod```运行状况\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/nginx-deployment-status.png)\n\n- 查看```Dashboard```\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/nginx-deployment-dashboard.png)\n\n#### 二，创建部署```Nginx Service```\n\n- ```nginx-service.yaml```文件编写\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\n  labels:\n    app: nginx\nspec:\n  type: NodePort\n  selector:\n    app: nginx\n  ports:\n  - port: 80\n    targetPort: 80\n    nodePort: 32500\n```\n\n- 应用配置文件\n\n```bash\n$ kubectl apply -f nginx-service.yaml\n```\n\n- 查看服务运行状况\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/nginx-service-status.png)\n\n- 我们通过``http://localhost:32500``就可访问应用\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/nginx-page.png)\n\n至此，我们的nginx服务就部署成功了！\n\n","source":"_posts/Kubernetes中进行简单应用部署.md","raw":"---\ntitle: Kubernetes中进行简单应用部署\ndate: 2021-03-12 15:13:48\ntags:\n - k8s\n - kubernetes\n---\n\n掌握了```k8s```的部署启动，还需要知道如何在```k8s```中部署相应的应用服务，所谓实践检验真理，在```k8s```中部署一个简单的```nginx```服务来上手。\n\n<!-- more -->\n\n#### 一，创建```Nginx Deployment```\n\n- ```nginx-deployment.yaml```文件编写\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  labels:\n    app: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.18.0\n        ports:\n        - containerPort: 80\n```\n\n- 应用```nginx-deployment.yaml```\n\n```bash\n$ kubectl apply -f nginx-deployment.yaml\ndeployment.apps/nginx-deployment created\n```\n\n- 查看```Pod```运行状况\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/nginx-deployment-status.png)\n\n- 查看```Dashboard```\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/nginx-deployment-dashboard.png)\n\n#### 二，创建部署```Nginx Service```\n\n- ```nginx-service.yaml```文件编写\n\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\n  labels:\n    app: nginx\nspec:\n  type: NodePort\n  selector:\n    app: nginx\n  ports:\n  - port: 80\n    targetPort: 80\n    nodePort: 32500\n```\n\n- 应用配置文件\n\n```bash\n$ kubectl apply -f nginx-service.yaml\n```\n\n- 查看服务运行状况\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/nginx-service-status.png)\n\n- 我们通过``http://localhost:32500``就可访问应用\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/nginx-page.png)\n\n至此，我们的nginx服务就部署成功了！\n\n","slug":"Kubernetes中进行简单应用部署","published":1,"updated":"2021-03-12T07:57:19.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb27000hw7c9az4m49f5","content":"<p>掌握了<code>k8s</code>的部署启动，还需要知道如何在<code>k8s</code>中部署相应的应用服务，所谓实践检验真理，在<code>k8s</code>中部署一个简单的<code>nginx</code>服务来上手。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"一，创建Nginx-Deployment\"><a href=\"#一，创建Nginx-Deployment\" class=\"headerlink\" title=\"一，创建Nginx Deployment\"></a>一，创建<code>Nginx Deployment</code></h4><ul>\n<li><code>nginx-deployment.yaml</code>文件编写</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-deployment</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.18.0</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>应用<code>nginx-deployment.yaml</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f nginx-deployment.yaml</span><br><span class=\"line\">deployment.apps/nginx-deployment created</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看<code>Pod</code>运行状况</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/nginx-deployment-status.png\"></p>\n<ul>\n<li>查看<code>Dashboard</code></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/nginx-deployment-dashboard.png\"></p>\n<h4 id=\"二，创建部署Nginx-Service\"><a href=\"#二，创建部署Nginx-Service\" class=\"headerlink\" title=\"二，创建部署Nginx Service\"></a>二，创建部署<code>Nginx Service</code></h4><ul>\n<li><code>nginx-service.yaml</code>文件编写</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-service</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">32500</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>应用配置文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f nginx-service.yaml</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看服务运行状况</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/nginx-service-status.png\"></p>\n<ul>\n<li>我们通过<code>http://localhost:32500</code>就可访问应用</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/nginx-page.png\"></p>\n<p>至此，我们的nginx服务就部署成功了！</p>\n","site":{"data":{}},"excerpt":"<p>掌握了<code>k8s</code>的部署启动，还需要知道如何在<code>k8s</code>中部署相应的应用服务，所谓实践检验真理，在<code>k8s</code>中部署一个简单的<code>nginx</code>服务来上手。</p>","more":"<h4 id=\"一，创建Nginx-Deployment\"><a href=\"#一，创建Nginx-Deployment\" class=\"headerlink\" title=\"一，创建Nginx Deployment\"></a>一，创建<code>Nginx Deployment</code></h4><ul>\n<li><code>nginx-deployment.yaml</code>文件编写</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-deployment</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">nginx:1.18.0</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>应用<code>nginx-deployment.yaml</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f nginx-deployment.yaml</span><br><span class=\"line\">deployment.apps/nginx-deployment created</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看<code>Pod</code>运行状况</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/nginx-deployment-status.png\"></p>\n<ul>\n<li>查看<code>Dashboard</code></li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/nginx-deployment-dashboard.png\"></p>\n<h4 id=\"二，创建部署Nginx-Service\"><a href=\"#二，创建部署Nginx-Service\" class=\"headerlink\" title=\"二，创建部署Nginx Service\"></a>二，创建部署<code>Nginx Service</code></h4><ul>\n<li><code>nginx-service.yaml</code>文件编写</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-service</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">32500</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>应用配置文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f nginx-service.yaml</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看服务运行状况</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/nginx-service-status.png\"></p>\n<ul>\n<li>我们通过<code>http://localhost:32500</code>就可访问应用</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/nginx-page.png\"></p>\n<p>至此，我们的nginx服务就部署成功了！</p>"},{"title":"MYSQL事务隔离","date":"2019-01-27T06:02:38.000Z","_content":"\n> 事务就是一个原子性的SQL操作，处于该事务内的SQL操作，要么全部成功，要么全部失败。在MySQL中，事务是基于引擎来实现，在MySQL中两种常用的引擎InnoDB和MyISAM，其中InnoDB是支持事务的，而MyISAM不支持。\n\n<!-- more -->\n\n### 事务的四个基本特性ACID:\n\n- 原子性（Atomicity）\n- 一致性（Consistency）\n- 隔离性（Isolation）\n- 持久性（Durability）\n\n### 事务隔离级别\n\n当一个SQL处于多个事务中时，就有可能出现脏读、不可重复读、幻读等问题，基于此就有了事物隔离级别的概念。 SQL中定义了四种事务的隔离级别:\n\n| 隔离级别                     | 是否脏读 | 是否不可重复读 | 是否幻读 |\n| :--------------------------- | :------- | :------------- | :------- |\n| 读未提交（read uncommitted） | 是       | 是             | 是       |\n| 读已提交（read committed）   | 否       | 是             | 是       |\n| 可重复读（repeatable read）  | 否       | 否             | 是       |\n| 可串性化（serializable）     | 否       | 否             | 否       |\n\n#### 脏读\n\n一个事务读取到另一个事务尚未提交的修改，就是脏读。这里的修改是指：update、insert、delete。脏读就会导致如果后一个事务回滚，他所做的操作就会撤销，前一个事务读取到的数据就会成为垃圾数据。\n\neg:\n\n订单表：orders，用户发起支付请求，需要修改某条订单状态。\n\n事务一：发起订单支付，假设订单id为99，修改订单状态从未支付改为已支付（4->5）。\n事务二：查询尚未支付的订单数据，由于订单99已经在事务一种，所以此次查到的数据没有ID为99的数据。\n事务一：由于余额不够，付款失败，使整个事务回滚，所以订单99仍然为未支付的订单。\n\n所以，事务二读取到的数据是错误数据。\n\n#### 不可重复读\n\n在同一个事务中，再次读取数据时，所读取到的数据和第一次的不一样，就是不可重复读。\n\neg:\n\n还是订单表。\n\n事务一：查询订单99的是否是待支付状态，此时查到的是待支付。\n事务二：修改订单状态为已支付。\n事务一：再次执行查询，此时就查询不到99。\n\n#### 幻读\n\n事务1读取指定的where子句所返回的一些行。然后，事务2插入一个新行，这个新行也满足事务1使用的查询where子句。然后事务1再次使用相同的查询读取行，但是现在它看到了事务2刚插入的行。这个行被称为幻象，因为对事务1来说，这一行的出现是不可思议的。\n\n幻读针对的是insert，delete操作。\n\neg:\n\n事务一：查询待支付的订单列表。\n事务二：向订单表中插入一条新的待支付订单数据，并提交。\n事务一：再次请求查询，此时可以查到新插入的数据，出现幻读；新插入的数据如果没有提交就是脏读。\n\n### 查看事务隔离级别\n\n```mysql\nselect @@tx_isolation;\n\nselect @@global.tx_isolation,@@session.tx_isolation;\n```\n\n### 设置事务隔离级别\n\n```mysql\nset session transaction isolation level //要设置的隔离级别\n```\n\n","source":"_posts/MYSQL事务隔离.md","raw":"---\ntitle: MYSQL事务隔离\ndate: 2019-01-27 14:02:38\ntags: mysql\n---\n\n> 事务就是一个原子性的SQL操作，处于该事务内的SQL操作，要么全部成功，要么全部失败。在MySQL中，事务是基于引擎来实现，在MySQL中两种常用的引擎InnoDB和MyISAM，其中InnoDB是支持事务的，而MyISAM不支持。\n\n<!-- more -->\n\n### 事务的四个基本特性ACID:\n\n- 原子性（Atomicity）\n- 一致性（Consistency）\n- 隔离性（Isolation）\n- 持久性（Durability）\n\n### 事务隔离级别\n\n当一个SQL处于多个事务中时，就有可能出现脏读、不可重复读、幻读等问题，基于此就有了事物隔离级别的概念。 SQL中定义了四种事务的隔离级别:\n\n| 隔离级别                     | 是否脏读 | 是否不可重复读 | 是否幻读 |\n| :--------------------------- | :------- | :------------- | :------- |\n| 读未提交（read uncommitted） | 是       | 是             | 是       |\n| 读已提交（read committed）   | 否       | 是             | 是       |\n| 可重复读（repeatable read）  | 否       | 否             | 是       |\n| 可串性化（serializable）     | 否       | 否             | 否       |\n\n#### 脏读\n\n一个事务读取到另一个事务尚未提交的修改，就是脏读。这里的修改是指：update、insert、delete。脏读就会导致如果后一个事务回滚，他所做的操作就会撤销，前一个事务读取到的数据就会成为垃圾数据。\n\neg:\n\n订单表：orders，用户发起支付请求，需要修改某条订单状态。\n\n事务一：发起订单支付，假设订单id为99，修改订单状态从未支付改为已支付（4->5）。\n事务二：查询尚未支付的订单数据，由于订单99已经在事务一种，所以此次查到的数据没有ID为99的数据。\n事务一：由于余额不够，付款失败，使整个事务回滚，所以订单99仍然为未支付的订单。\n\n所以，事务二读取到的数据是错误数据。\n\n#### 不可重复读\n\n在同一个事务中，再次读取数据时，所读取到的数据和第一次的不一样，就是不可重复读。\n\neg:\n\n还是订单表。\n\n事务一：查询订单99的是否是待支付状态，此时查到的是待支付。\n事务二：修改订单状态为已支付。\n事务一：再次执行查询，此时就查询不到99。\n\n#### 幻读\n\n事务1读取指定的where子句所返回的一些行。然后，事务2插入一个新行，这个新行也满足事务1使用的查询where子句。然后事务1再次使用相同的查询读取行，但是现在它看到了事务2刚插入的行。这个行被称为幻象，因为对事务1来说，这一行的出现是不可思议的。\n\n幻读针对的是insert，delete操作。\n\neg:\n\n事务一：查询待支付的订单列表。\n事务二：向订单表中插入一条新的待支付订单数据，并提交。\n事务一：再次请求查询，此时可以查到新插入的数据，出现幻读；新插入的数据如果没有提交就是脏读。\n\n### 查看事务隔离级别\n\n```mysql\nselect @@tx_isolation;\n\nselect @@global.tx_isolation,@@session.tx_isolation;\n```\n\n### 设置事务隔离级别\n\n```mysql\nset session transaction isolation level //要设置的隔离级别\n```\n\n","slug":"MYSQL事务隔离","published":1,"updated":"2021-03-11T01:39:42.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb28000jw7c97g613i0f","content":"<blockquote>\n<p>事务就是一个原子性的SQL操作，处于该事务内的SQL操作，要么全部成功，要么全部失败。在MySQL中，事务是基于引擎来实现，在MySQL中两种常用的引擎InnoDB和MyISAM，其中InnoDB是支持事务的，而MyISAM不支持。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h3 id=\"事务的四个基本特性ACID\"><a href=\"#事务的四个基本特性ACID\" class=\"headerlink\" title=\"事务的四个基本特性ACID:\"></a>事务的四个基本特性ACID:</h3><ul>\n<li>原子性（Atomicity）</li>\n<li>一致性（Consistency）</li>\n<li>隔离性（Isolation）</li>\n<li>持久性（Durability）</li>\n</ul>\n<h3 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h3><p>当一个SQL处于多个事务中时，就有可能出现脏读、不可重复读、幻读等问题，基于此就有了事物隔离级别的概念。 SQL中定义了四种事务的隔离级别:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">隔离级别</th>\n<th align=\"left\">是否脏读</th>\n<th align=\"left\">是否不可重复读</th>\n<th align=\"left\">是否幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">读未提交（read uncommitted）</td>\n<td align=\"left\">是</td>\n<td align=\"left\">是</td>\n<td align=\"left\">是</td>\n</tr>\n<tr>\n<td align=\"left\">读已提交（read committed）</td>\n<td align=\"left\">否</td>\n<td align=\"left\">是</td>\n<td align=\"left\">是</td>\n</tr>\n<tr>\n<td align=\"left\">可重复读（repeatable read）</td>\n<td align=\"left\">否</td>\n<td align=\"left\">否</td>\n<td align=\"left\">是</td>\n</tr>\n<tr>\n<td align=\"left\">可串性化（serializable）</td>\n<td align=\"left\">否</td>\n<td align=\"left\">否</td>\n<td align=\"left\">否</td>\n</tr>\n</tbody></table>\n<h4 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h4><p>一个事务读取到另一个事务尚未提交的修改，就是脏读。这里的修改是指：update、insert、delete。脏读就会导致如果后一个事务回滚，他所做的操作就会撤销，前一个事务读取到的数据就会成为垃圾数据。</p>\n<p>eg:</p>\n<p>订单表：orders，用户发起支付请求，需要修改某条订单状态。</p>\n<p>事务一：发起订单支付，假设订单id为99，修改订单状态从未支付改为已支付（4-&gt;5）。<br>事务二：查询尚未支付的订单数据，由于订单99已经在事务一种，所以此次查到的数据没有ID为99的数据。<br>事务一：由于余额不够，付款失败，使整个事务回滚，所以订单99仍然为未支付的订单。</p>\n<p>所以，事务二读取到的数据是错误数据。</p>\n<h4 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h4><p>在同一个事务中，再次读取数据时，所读取到的数据和第一次的不一样，就是不可重复读。</p>\n<p>eg:</p>\n<p>还是订单表。</p>\n<p>事务一：查询订单99的是否是待支付状态，此时查到的是待支付。<br>事务二：修改订单状态为已支付。<br>事务一：再次执行查询，此时就查询不到99。</p>\n<h4 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h4><p>事务1读取指定的where子句所返回的一些行。然后，事务2插入一个新行，这个新行也满足事务1使用的查询where子句。然后事务1再次使用相同的查询读取行，但是现在它看到了事务2刚插入的行。这个行被称为幻象，因为对事务1来说，这一行的出现是不可思议的。</p>\n<p>幻读针对的是insert，delete操作。</p>\n<p>eg:</p>\n<p>事务一：查询待支付的订单列表。<br>事务二：向订单表中插入一条新的待支付订单数据，并提交。<br>事务一：再次请求查询，此时可以查到新插入的数据，出现幻读；新插入的数据如果没有提交就是脏读。</p>\n<h3 id=\"查看事务隔离级别\"><a href=\"#查看事务隔离级别\" class=\"headerlink\" title=\"查看事务隔离级别\"></a>查看事务隔离级别</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select @@tx_isolation;</span><br><span class=\"line\"></span><br><span class=\"line\">select @@global.tx_isolation,@@session.tx_isolation;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置事务隔离级别\"><a href=\"#设置事务隔离级别\" class=\"headerlink\" title=\"设置事务隔离级别\"></a>设置事务隔离级别</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set session transaction isolation level &#x2F;&#x2F;要设置的隔离级别</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>事务就是一个原子性的SQL操作，处于该事务内的SQL操作，要么全部成功，要么全部失败。在MySQL中，事务是基于引擎来实现，在MySQL中两种常用的引擎InnoDB和MyISAM，其中InnoDB是支持事务的，而MyISAM不支持。</p>\n</blockquote>","more":"<h3 id=\"事务的四个基本特性ACID\"><a href=\"#事务的四个基本特性ACID\" class=\"headerlink\" title=\"事务的四个基本特性ACID:\"></a>事务的四个基本特性ACID:</h3><ul>\n<li>原子性（Atomicity）</li>\n<li>一致性（Consistency）</li>\n<li>隔离性（Isolation）</li>\n<li>持久性（Durability）</li>\n</ul>\n<h3 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h3><p>当一个SQL处于多个事务中时，就有可能出现脏读、不可重复读、幻读等问题，基于此就有了事物隔离级别的概念。 SQL中定义了四种事务的隔离级别:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">隔离级别</th>\n<th align=\"left\">是否脏读</th>\n<th align=\"left\">是否不可重复读</th>\n<th align=\"left\">是否幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">读未提交（read uncommitted）</td>\n<td align=\"left\">是</td>\n<td align=\"left\">是</td>\n<td align=\"left\">是</td>\n</tr>\n<tr>\n<td align=\"left\">读已提交（read committed）</td>\n<td align=\"left\">否</td>\n<td align=\"left\">是</td>\n<td align=\"left\">是</td>\n</tr>\n<tr>\n<td align=\"left\">可重复读（repeatable read）</td>\n<td align=\"left\">否</td>\n<td align=\"left\">否</td>\n<td align=\"left\">是</td>\n</tr>\n<tr>\n<td align=\"left\">可串性化（serializable）</td>\n<td align=\"left\">否</td>\n<td align=\"left\">否</td>\n<td align=\"left\">否</td>\n</tr>\n</tbody></table>\n<h4 id=\"脏读\"><a href=\"#脏读\" class=\"headerlink\" title=\"脏读\"></a>脏读</h4><p>一个事务读取到另一个事务尚未提交的修改，就是脏读。这里的修改是指：update、insert、delete。脏读就会导致如果后一个事务回滚，他所做的操作就会撤销，前一个事务读取到的数据就会成为垃圾数据。</p>\n<p>eg:</p>\n<p>订单表：orders，用户发起支付请求，需要修改某条订单状态。</p>\n<p>事务一：发起订单支付，假设订单id为99，修改订单状态从未支付改为已支付（4-&gt;5）。<br>事务二：查询尚未支付的订单数据，由于订单99已经在事务一种，所以此次查到的数据没有ID为99的数据。<br>事务一：由于余额不够，付款失败，使整个事务回滚，所以订单99仍然为未支付的订单。</p>\n<p>所以，事务二读取到的数据是错误数据。</p>\n<h4 id=\"不可重复读\"><a href=\"#不可重复读\" class=\"headerlink\" title=\"不可重复读\"></a>不可重复读</h4><p>在同一个事务中，再次读取数据时，所读取到的数据和第一次的不一样，就是不可重复读。</p>\n<p>eg:</p>\n<p>还是订单表。</p>\n<p>事务一：查询订单99的是否是待支付状态，此时查到的是待支付。<br>事务二：修改订单状态为已支付。<br>事务一：再次执行查询，此时就查询不到99。</p>\n<h4 id=\"幻读\"><a href=\"#幻读\" class=\"headerlink\" title=\"幻读\"></a>幻读</h4><p>事务1读取指定的where子句所返回的一些行。然后，事务2插入一个新行，这个新行也满足事务1使用的查询where子句。然后事务1再次使用相同的查询读取行，但是现在它看到了事务2刚插入的行。这个行被称为幻象，因为对事务1来说，这一行的出现是不可思议的。</p>\n<p>幻读针对的是insert，delete操作。</p>\n<p>eg:</p>\n<p>事务一：查询待支付的订单列表。<br>事务二：向订单表中插入一条新的待支付订单数据，并提交。<br>事务一：再次请求查询，此时可以查到新插入的数据，出现幻读；新插入的数据如果没有提交就是脏读。</p>\n<h3 id=\"查看事务隔离级别\"><a href=\"#查看事务隔离级别\" class=\"headerlink\" title=\"查看事务隔离级别\"></a>查看事务隔离级别</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select @@tx_isolation;</span><br><span class=\"line\"></span><br><span class=\"line\">select @@global.tx_isolation,@@session.tx_isolation;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置事务隔离级别\"><a href=\"#设置事务隔离级别\" class=\"headerlink\" title=\"设置事务隔离级别\"></a>设置事务隔离级别</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set session transaction isolation level &#x2F;&#x2F;要设置的隔离级别</span><br></pre></td></tr></table></figure>"},{"title":"Kubernetes快速搭建与启动","date":"2021-03-11T09:15:33.000Z","_content":"\nKubernetes(以下简称k8s)已经成为当下最流行的一款容器编排工具，而且目前很多公司都在往容器化方向发展，调研最多的也是k8s，我们公司目前也在逐步向k8s靠拢，使用k8s开放的api做一些服务开发；因此学习掌握k8s技术也成为刻不容缓的事。\n\n<!-- more -->\n\n本文主要介绍在MaxOS环境下进行k8s的搭建和启动运行，有条件的可以购买云服务器在linux环境下进行搭建。\n\n#### 一，安装\n\n- 前提条件\n  - 一台MacBook本，内存至少在8G以上，有足够的硬盘空\n  - 安装有Docker，可以到[官网]([Download for\n    Mac ](https://desktop.docker.com/mac/stable/Docker.dmg))下载安装\n\n- Step1，查看Docker对应的k8s版本号，我目前Docker版本为3.1.0，对应的最新版本k8s为v1.19.3，注意安安装过Docker的记得要把Docker更新到最新版本\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/docker-about-3.1.0.png)\n\n- Step2，启动```Docker```，打开```Docker```的```Preferences```界面，切换到```Kubernetes```选项，未安装之前```Enable Kubernetes```是未选中状态，这里先不要选中，由于国内网络原因，会始终停留在```kunernets is starting...```状态这里已经有开发者开发了对应的脚本[k8s-docker-desktop-for-mac](https://github.com/maguowei/k8s-docker-desktop-for-mac)直接使用。\n\n- Step3，克隆下来之后，运行脚本```./load_images.sh```，等待相关镜像拉取完成后，将```Enable Kubernetes```选中后应用重启。等待```kubernetes```启动，然后检查 ```Docker Preferences``` 界面左下角的```Kubernetes``` 状态是否正常，状态为```kubernetes is running```就表示启动成功了。\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/docker-k8s-running.png)\n\n#### 二，安装Dashboard\n\n安装完```k8s```后，我们需要安装一个可视化的管理界面```Dashboard```。执行命令:\n\n```bash\n$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.44.0/deploy/static/provider/cloud/deploy.yaml\n```\n\n也可以到```Dashboard```[官网仓库](https://github.com/kubernetes/dashboard)找到最新稳定版本，找到对应的版本号替换上面的命令。\n\n执行完上述命令后，就可以启动服务：\n\n```bash\n// 默认会启用8001端口号\n$ kubectl proxy\n```\n\n或者，指定端口号，如果我们希望其他机器也可以访问，可以加上```--accept-hosts```\n\n```bash\n$ kubectl proxy --address=0.0.0.0 --port=8001 --accept-hosts='.*'\n```\n\n启动成功后，我们通过浏览器直接访问访问```http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login```，会跳到如下图：\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/k8s-dashboard.png)\n\n此时需要我们需要我们登陆，我们需要创建```ServiceAccount```生成对应的```Token```。\n\n#### 三，创建ServiceAccount\n\n在本地目录新建```k8s-dashboard-admin.yaml```文件，建立一个```ServiceAccount```的角色绑定关系，文件内容如下：\n\n```yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: k8s-dashboard-admin\n  namespace: kube-system\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: k8s-dashboard-admin\nsubjects:\n  - kind: ServiceAccount\n    name: k8s-dashboard-admin\n    namespace: kube-system\nroleRef:\n  kind: ClusterRole\n  name: cluster-admin\n  apiGroup: rbac.authorization.k8s.io\n```\n\n然后通过如下命令获取管理员角色```Secret```:\n\n```bash\n$ kubectl get secrets -n kube-system | grep k8s-dashboard-admin | awk '{print $1}'\nk8s-dashboard-admin-token-s7l4l\n```\n\n获取对应的```Token```:\n\n```bash\n$ kubectl describe secret k8s-dashboard-admin-token-s7l4l -n kube-system\nName:         k8s-dashboard-admin-token-s7l4l\nNamespace:    kube-system\nLabels:       <none>\nAnnotations:  kubernetes.io/service-account.name: k8s-dashboard-admin\n              kubernetes.io/service-account.uid: bc85c3d1-450e-4357-9567-8b3c2019e88d\n\nType:  kubernetes.io/service-account-token\n\nData\n====\nca.crt:     1066 bytes\nnamespace:  11 bytes\ntoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IkpoT1BqejZKMDlXMXczZTJRZ1k4OUFVVVJNZEx1RGc1YlV3YXJDeTlyeTQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tczdsNGwiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYmM4NWMzZDEtNDUwZS00MzU3LTk1NjctOGIzYzIwMTllODhkIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.kx7ROQOB47_sM98v_WibH_k27lLm0dE1Cf35j0djAyVrNAPXvTuTGx65ss1Qnt7NxFDPDuUdyX9SbvOBlD2JqbThpqhU7XHvab1ZKQ4JBqHweuWb3YcAZHDWzu_p5cbc2bpN4fPjggRNsNZCZFZL2ylB_kXKr3mnCny4CILZEvgLRHdskjUYWpzOPz2SeligJHtCIjMwUdtWA7XYp-13-qnFyJmXtM29vjVmVUIV2ROXbA6rBRXszKC07lZxuBwkDLox83-xBepovJxJfdKkY-XqVb9kdSPhANwDJumkiyAsUGUI78BhG7_-YtA7rQjVXvkGaRPNoGnPK8tO8771nQ\n```\n\n然后我们```Copy```对应的```token```值到我们的界面表单，点击登录，就可以进入到我们的``k8s dashboard```界面。\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/k8s-dashboard-workloads.png)\n\n至此，我们的k8s本地安装和启动就完成了，有兴趣和条件的可以使用云服务器安装启动。","source":"_posts/Kubernetes快速搭建与启动.md","raw":"---\ntitle: Kubernetes快速搭建与启动\ndate: 2021-03-11 17:15:33\ntags:\n - k8s\n - kubernetes\n---\n\nKubernetes(以下简称k8s)已经成为当下最流行的一款容器编排工具，而且目前很多公司都在往容器化方向发展，调研最多的也是k8s，我们公司目前也在逐步向k8s靠拢，使用k8s开放的api做一些服务开发；因此学习掌握k8s技术也成为刻不容缓的事。\n\n<!-- more -->\n\n本文主要介绍在MaxOS环境下进行k8s的搭建和启动运行，有条件的可以购买云服务器在linux环境下进行搭建。\n\n#### 一，安装\n\n- 前提条件\n  - 一台MacBook本，内存至少在8G以上，有足够的硬盘空\n  - 安装有Docker，可以到[官网]([Download for\n    Mac ](https://desktop.docker.com/mac/stable/Docker.dmg))下载安装\n\n- Step1，查看Docker对应的k8s版本号，我目前Docker版本为3.1.0，对应的最新版本k8s为v1.19.3，注意安安装过Docker的记得要把Docker更新到最新版本\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/docker-about-3.1.0.png)\n\n- Step2，启动```Docker```，打开```Docker```的```Preferences```界面，切换到```Kubernetes```选项，未安装之前```Enable Kubernetes```是未选中状态，这里先不要选中，由于国内网络原因，会始终停留在```kunernets is starting...```状态这里已经有开发者开发了对应的脚本[k8s-docker-desktop-for-mac](https://github.com/maguowei/k8s-docker-desktop-for-mac)直接使用。\n\n- Step3，克隆下来之后，运行脚本```./load_images.sh```，等待相关镜像拉取完成后，将```Enable Kubernetes```选中后应用重启。等待```kubernetes```启动，然后检查 ```Docker Preferences``` 界面左下角的```Kubernetes``` 状态是否正常，状态为```kubernetes is running```就表示启动成功了。\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/docker-k8s-running.png)\n\n#### 二，安装Dashboard\n\n安装完```k8s```后，我们需要安装一个可视化的管理界面```Dashboard```。执行命令:\n\n```bash\n$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.44.0/deploy/static/provider/cloud/deploy.yaml\n```\n\n也可以到```Dashboard```[官网仓库](https://github.com/kubernetes/dashboard)找到最新稳定版本，找到对应的版本号替换上面的命令。\n\n执行完上述命令后，就可以启动服务：\n\n```bash\n// 默认会启用8001端口号\n$ kubectl proxy\n```\n\n或者，指定端口号，如果我们希望其他机器也可以访问，可以加上```--accept-hosts```\n\n```bash\n$ kubectl proxy --address=0.0.0.0 --port=8001 --accept-hosts='.*'\n```\n\n启动成功后，我们通过浏览器直接访问访问```http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login```，会跳到如下图：\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/k8s-dashboard.png)\n\n此时需要我们需要我们登陆，我们需要创建```ServiceAccount```生成对应的```Token```。\n\n#### 三，创建ServiceAccount\n\n在本地目录新建```k8s-dashboard-admin.yaml```文件，建立一个```ServiceAccount```的角色绑定关系，文件内容如下：\n\n```yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: k8s-dashboard-admin\n  namespace: kube-system\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: k8s-dashboard-admin\nsubjects:\n  - kind: ServiceAccount\n    name: k8s-dashboard-admin\n    namespace: kube-system\nroleRef:\n  kind: ClusterRole\n  name: cluster-admin\n  apiGroup: rbac.authorization.k8s.io\n```\n\n然后通过如下命令获取管理员角色```Secret```:\n\n```bash\n$ kubectl get secrets -n kube-system | grep k8s-dashboard-admin | awk '{print $1}'\nk8s-dashboard-admin-token-s7l4l\n```\n\n获取对应的```Token```:\n\n```bash\n$ kubectl describe secret k8s-dashboard-admin-token-s7l4l -n kube-system\nName:         k8s-dashboard-admin-token-s7l4l\nNamespace:    kube-system\nLabels:       <none>\nAnnotations:  kubernetes.io/service-account.name: k8s-dashboard-admin\n              kubernetes.io/service-account.uid: bc85c3d1-450e-4357-9567-8b3c2019e88d\n\nType:  kubernetes.io/service-account-token\n\nData\n====\nca.crt:     1066 bytes\nnamespace:  11 bytes\ntoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IkpoT1BqejZKMDlXMXczZTJRZ1k4OUFVVVJNZEx1RGc1YlV3YXJDeTlyeTQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tczdsNGwiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYmM4NWMzZDEtNDUwZS00MzU3LTk1NjctOGIzYzIwMTllODhkIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.kx7ROQOB47_sM98v_WibH_k27lLm0dE1Cf35j0djAyVrNAPXvTuTGx65ss1Qnt7NxFDPDuUdyX9SbvOBlD2JqbThpqhU7XHvab1ZKQ4JBqHweuWb3YcAZHDWzu_p5cbc2bpN4fPjggRNsNZCZFZL2ylB_kXKr3mnCny4CILZEvgLRHdskjUYWpzOPz2SeligJHtCIjMwUdtWA7XYp-13-qnFyJmXtM29vjVmVUIV2ROXbA6rBRXszKC07lZxuBwkDLox83-xBepovJxJfdKkY-XqVb9kdSPhANwDJumkiyAsUGUI78BhG7_-YtA7rQjVXvkGaRPNoGnPK8tO8771nQ\n```\n\n然后我们```Copy```对应的```token```值到我们的界面表单，点击登录，就可以进入到我们的``k8s dashboard```界面。\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/k8s-dashboard-workloads.png)\n\n至此，我们的k8s本地安装和启动就完成了，有兴趣和条件的可以使用云服务器安装启动。","slug":"Kubernetes快速搭建与启动","published":1,"updated":"2021-03-12T04:42:23.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb29000mw7c9c37aa4xq","content":"<p>Kubernetes(以下简称k8s)已经成为当下最流行的一款容器编排工具，而且目前很多公司都在往容器化方向发展，调研最多的也是k8s，我们公司目前也在逐步向k8s靠拢，使用k8s开放的api做一些服务开发；因此学习掌握k8s技术也成为刻不容缓的事。</p>\n<span id=\"more\"></span>\n\n<p>本文主要介绍在MaxOS环境下进行k8s的搭建和启动运行，有条件的可以购买云服务器在linux环境下进行搭建。</p>\n<h4 id=\"一，安装\"><a href=\"#一，安装\" class=\"headerlink\" title=\"一，安装\"></a>一，安装</h4><ul>\n<li><p>前提条件</p>\n<ul>\n<li>一台MacBook本，内存至少在8G以上，有足够的硬盘空</li>\n<li>安装有Docker，可以到[官网](<a href=\"https://desktop.docker.com/mac/stable/Docker.dmg\">Download for<br>Mac </a>)下载安装</li>\n</ul>\n</li>\n<li><p>Step1，查看Docker对应的k8s版本号，我目前Docker版本为3.1.0，对应的最新版本k8s为v1.19.3，注意安安装过Docker的记得要把Docker更新到最新版本</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/docker-about-3.1.0.png\"></p>\n<ul>\n<li><p>Step2，启动<code>Docker</code>，打开<code>Docker</code>的<code>Preferences</code>界面，切换到<code>Kubernetes</code>选项，未安装之前<code>Enable Kubernetes</code>是未选中状态，这里先不要选中，由于国内网络原因，会始终停留在<code>kunernets is starting...</code>状态这里已经有开发者开发了对应的脚本<a href=\"https://github.com/maguowei/k8s-docker-desktop-for-mac\">k8s-docker-desktop-for-mac</a>直接使用。</p>\n</li>\n<li><p>Step3，克隆下来之后，运行脚本<code>./load_images.sh</code>，等待相关镜像拉取完成后，将<code>Enable Kubernetes</code>选中后应用重启。等待<code>kubernetes</code>启动，然后检查 <code>Docker Preferences</code> 界面左下角的<code>Kubernetes</code> 状态是否正常，状态为<code>kubernetes is running</code>就表示启动成功了。</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/docker-k8s-running.png\"></p>\n<h4 id=\"二，安装Dashboard\"><a href=\"#二，安装Dashboard\" class=\"headerlink\" title=\"二，安装Dashboard\"></a>二，安装Dashboard</h4><p>安装完<code>k8s</code>后，我们需要安装一个可视化的管理界面<code>Dashboard</code>。执行命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.44.0/deploy/static/provider/cloud/deploy.yaml</span><br></pre></td></tr></table></figure>\n\n<p>也可以到<code>Dashboard</code><a href=\"https://github.com/kubernetes/dashboard\">官网仓库</a>找到最新稳定版本，找到对应的版本号替换上面的命令。</p>\n<p>执行完上述命令后，就可以启动服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 默认会启用8001端口号</span><br><span class=\"line\">$ kubectl proxy</span><br></pre></td></tr></table></figure>\n\n<p>或者，指定端口号，如果我们希望其他机器也可以访问，可以加上<code>--accept-hosts</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl proxy --address=0.0.0.0 --port=8001 --accept-hosts=<span class=\"string\">&#x27;.*&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>启动成功后，我们通过浏览器直接访问访问<code>http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login</code>，会跳到如下图：</p>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/k8s-dashboard.png\"></p>\n<p>此时需要我们需要我们登陆，我们需要创建<code>ServiceAccount</code>生成对应的<code>Token</code>。</p>\n<h4 id=\"三，创建ServiceAccount\"><a href=\"#三，创建ServiceAccount\" class=\"headerlink\" title=\"三，创建ServiceAccount\"></a>三，创建ServiceAccount</h4><p>在本地目录新建<code>k8s-dashboard-admin.yaml</code>文件，建立一个<code>ServiceAccount</code>的角色绑定关系，文件内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-dashboard-admin</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-dashboard-admin</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">k8s-dashboard-admin</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cluster-admin</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>\n\n<p>然后通过如下命令获取管理员角色<code>Secret</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get secrets -n kube-system | grep k8s-dashboard-admin | awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span></span><br><span class=\"line\">k8s-dashboard-admin-token-s7l4l</span><br></pre></td></tr></table></figure>\n\n<p>获取对应的<code>Token</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl describe secret k8s-dashboard-admin-token-s7l4l -n kube-system</span><br><span class=\"line\">Name:         k8s-dashboard-admin-token-s7l4l</span><br><span class=\"line\">Namespace:    kube-system</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  kubernetes.io/service-account.name: k8s-dashboard-admin</span><br><span class=\"line\">              kubernetes.io/service-account.uid: bc85c3d1-450e-4357-9567-8b3c2019e88d</span><br><span class=\"line\"></span><br><span class=\"line\">Type:  kubernetes.io/service-account-token</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">ca.crt:     1066 bytes</span><br><span class=\"line\">namespace:  11 bytes</span><br><span class=\"line\">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IkpoT1BqejZKMDlXMXczZTJRZ1k4OUFVVVJNZEx1RGc1YlV3YXJDeTlyeTQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tczdsNGwiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYmM4NWMzZDEtNDUwZS00MzU3LTk1NjctOGIzYzIwMTllODhkIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.kx7ROQOB47_sM98v_WibH_k27lLm0dE1Cf35j0djAyVrNAPXvTuTGx65ss1Qnt7NxFDPDuUdyX9SbvOBlD2JqbThpqhU7XHvab1ZKQ4JBqHweuWb3YcAZHDWzu_p5cbc2bpN4fPjggRNsNZCZFZL2ylB_kXKr3mnCny4CILZEvgLRHdskjUYWpzOPz2SeligJHtCIjMwUdtWA7XYp-13-qnFyJmXtM29vjVmVUIV2ROXbA6rBRXszKC07lZxuBwkDLox83-xBepovJxJfdKkY-XqVb9kdSPhANwDJumkiyAsUGUI78BhG7_-YtA7rQjVXvkGaRPNoGnPK8tO8771nQ</span><br></pre></td></tr></table></figure>\n\n<p>然后我们<code>Copy</code>对应的<code>token</code>值到我们的界面表单，点击登录，就可以进入到我们的``k8s dashboard```界面。</p>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/k8s-dashboard-workloads.png\"></p>\n<p>至此，我们的k8s本地安装和启动就完成了，有兴趣和条件的可以使用云服务器安装启动。</p>\n","site":{"data":{}},"excerpt":"<p>Kubernetes(以下简称k8s)已经成为当下最流行的一款容器编排工具，而且目前很多公司都在往容器化方向发展，调研最多的也是k8s，我们公司目前也在逐步向k8s靠拢，使用k8s开放的api做一些服务开发；因此学习掌握k8s技术也成为刻不容缓的事。</p>","more":"<p>本文主要介绍在MaxOS环境下进行k8s的搭建和启动运行，有条件的可以购买云服务器在linux环境下进行搭建。</p>\n<h4 id=\"一，安装\"><a href=\"#一，安装\" class=\"headerlink\" title=\"一，安装\"></a>一，安装</h4><ul>\n<li><p>前提条件</p>\n<ul>\n<li>一台MacBook本，内存至少在8G以上，有足够的硬盘空</li>\n<li>安装有Docker，可以到[官网](<a href=\"https://desktop.docker.com/mac/stable/Docker.dmg\">Download for<br>Mac </a>)下载安装</li>\n</ul>\n</li>\n<li><p>Step1，查看Docker对应的k8s版本号，我目前Docker版本为3.1.0，对应的最新版本k8s为v1.19.3，注意安安装过Docker的记得要把Docker更新到最新版本</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/docker-about-3.1.0.png\"></p>\n<ul>\n<li><p>Step2，启动<code>Docker</code>，打开<code>Docker</code>的<code>Preferences</code>界面，切换到<code>Kubernetes</code>选项，未安装之前<code>Enable Kubernetes</code>是未选中状态，这里先不要选中，由于国内网络原因，会始终停留在<code>kunernets is starting...</code>状态这里已经有开发者开发了对应的脚本<a href=\"https://github.com/maguowei/k8s-docker-desktop-for-mac\">k8s-docker-desktop-for-mac</a>直接使用。</p>\n</li>\n<li><p>Step3，克隆下来之后，运行脚本<code>./load_images.sh</code>，等待相关镜像拉取完成后，将<code>Enable Kubernetes</code>选中后应用重启。等待<code>kubernetes</code>启动，然后检查 <code>Docker Preferences</code> 界面左下角的<code>Kubernetes</code> 状态是否正常，状态为<code>kubernetes is running</code>就表示启动成功了。</p>\n</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/docker-k8s-running.png\"></p>\n<h4 id=\"二，安装Dashboard\"><a href=\"#二，安装Dashboard\" class=\"headerlink\" title=\"二，安装Dashboard\"></a>二，安装Dashboard</h4><p>安装完<code>k8s</code>后，我们需要安装一个可视化的管理界面<code>Dashboard</code>。执行命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.44.0/deploy/static/provider/cloud/deploy.yaml</span><br></pre></td></tr></table></figure>\n\n<p>也可以到<code>Dashboard</code><a href=\"https://github.com/kubernetes/dashboard\">官网仓库</a>找到最新稳定版本，找到对应的版本号替换上面的命令。</p>\n<p>执行完上述命令后，就可以启动服务：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 默认会启用8001端口号</span><br><span class=\"line\">$ kubectl proxy</span><br></pre></td></tr></table></figure>\n\n<p>或者，指定端口号，如果我们希望其他机器也可以访问，可以加上<code>--accept-hosts</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl proxy --address=0.0.0.0 --port=8001 --accept-hosts=<span class=\"string\">&#x27;.*&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>启动成功后，我们通过浏览器直接访问访问<code>http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login</code>，会跳到如下图：</p>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/k8s-dashboard.png\"></p>\n<p>此时需要我们需要我们登陆，我们需要创建<code>ServiceAccount</code>生成对应的<code>Token</code>。</p>\n<h4 id=\"三，创建ServiceAccount\"><a href=\"#三，创建ServiceAccount\" class=\"headerlink\" title=\"三，创建ServiceAccount\"></a>三，创建ServiceAccount</h4><p>在本地目录新建<code>k8s-dashboard-admin.yaml</code>文件，建立一个<code>ServiceAccount</code>的角色绑定关系，文件内容如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-dashboard-admin</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">k8s-dashboard-admin</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">k8s-dashboard-admin</span></span><br><span class=\"line\">    <span class=\"attr\">namespace:</span> <span class=\"string\">kube-system</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cluster-admin</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>\n\n<p>然后通过如下命令获取管理员角色<code>Secret</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl get secrets -n kube-system | grep k8s-dashboard-admin | awk <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span></span><br><span class=\"line\">k8s-dashboard-admin-token-s7l4l</span><br></pre></td></tr></table></figure>\n\n<p>获取对应的<code>Token</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl describe secret k8s-dashboard-admin-token-s7l4l -n kube-system</span><br><span class=\"line\">Name:         k8s-dashboard-admin-token-s7l4l</span><br><span class=\"line\">Namespace:    kube-system</span><br><span class=\"line\">Labels:       &lt;none&gt;</span><br><span class=\"line\">Annotations:  kubernetes.io/service-account.name: k8s-dashboard-admin</span><br><span class=\"line\">              kubernetes.io/service-account.uid: bc85c3d1-450e-4357-9567-8b3c2019e88d</span><br><span class=\"line\"></span><br><span class=\"line\">Type:  kubernetes.io/service-account-token</span><br><span class=\"line\"></span><br><span class=\"line\">Data</span><br><span class=\"line\">====</span><br><span class=\"line\">ca.crt:     1066 bytes</span><br><span class=\"line\">namespace:  11 bytes</span><br><span class=\"line\">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IkpoT1BqejZKMDlXMXczZTJRZ1k4OUFVVVJNZEx1RGc1YlV3YXJDeTlyeTQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJkYXNoYm9hcmQtYWRtaW4tdG9rZW4tczdsNGwiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZGFzaGJvYXJkLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYmM4NWMzZDEtNDUwZS00MzU3LTk1NjctOGIzYzIwMTllODhkIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmRhc2hib2FyZC1hZG1pbiJ9.kx7ROQOB47_sM98v_WibH_k27lLm0dE1Cf35j0djAyVrNAPXvTuTGx65ss1Qnt7NxFDPDuUdyX9SbvOBlD2JqbThpqhU7XHvab1ZKQ4JBqHweuWb3YcAZHDWzu_p5cbc2bpN4fPjggRNsNZCZFZL2ylB_kXKr3mnCny4CILZEvgLRHdskjUYWpzOPz2SeligJHtCIjMwUdtWA7XYp-13-qnFyJmXtM29vjVmVUIV2ROXbA6rBRXszKC07lZxuBwkDLox83-xBepovJxJfdKkY-XqVb9kdSPhANwDJumkiyAsUGUI78BhG7_-YtA7rQjVXvkGaRPNoGnPK8tO8771nQ</span><br></pre></td></tr></table></figure>\n\n<p>然后我们<code>Copy</code>对应的<code>token</code>值到我们的界面表单，点击登录，就可以进入到我们的``k8s dashboard```界面。</p>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/k8s-dashboard-workloads.png\"></p>\n<p>至此，我们的k8s本地安装和启动就完成了，有兴趣和条件的可以使用云服务器安装启动。</p>"},{"title":"Nginx深入了解-基础(三)","date":"2018-07-19T05:43:25.000Z","_content":"\nNginx有很多开源的第三方模块在实际生产应用中能方便我们使用，包括官方模块和第三方模块。这里介绍下常见的一些模块的使用。\n\n\n\n<!-- more -->\n\n- http_stub_status_modules配置\n\n```nginx\nSyntax：stub_status\nDefault：–\nContext：server,location\n```\n\n> 配置实例:\n\n```nginx\nserver {\n    ...\n    location /mystatus {\n        stub_status;\n    }\n}\n```\n\n- random_index_module展示随机的首页\n\n```nginx\nSyntax：random_index on | off\nDefault：random_index off\nContext：location\n```\n\n> 配置实例:\n\n```nginx\nserver {\n    ...\n    location / {\n        root /opt/app/code;\n        random_index on;\n    }\n}\n```\n\n- http_sub_module html内容替换,只能替换第一个\n\n```nginx\nSyntax：sub_filter string replacement;\nDefault：–\nContext：http,server,location\n```\n\n> 配置实例:\n\n```nginx\nserver { \n  ...\n  location / { \n    root ...; \n    index index.html index.php; \n    sub_filter '替换前的内容' '替换后的内容'; \n  } \n}\n```\n\n```nginx\nSyntax：sub_filter_last_modified on|off;主要用于缓存\nDefault：sub_filter_last_modified off;\nContent：http,server,location\n```\n\n```nginx\nSyntax：sub_filter_once on|off; 全局/非全局替换\nDefault：sub_filter_once on;\nContext：http,server,location\n```\n\n> 配置实例:\n\n```nginx\nserver { \n  ... \n  location / { \n    root ...; \n    index index.html index.php; \n    sub_filter '替换前的内容' '替换后的内容'; \n    sub_filter_once off; // 全部替换 \n  } \n}\n```\n\n- Nginx的请求限制\n\n```nginx\n连接频率限制：limit_conn_module\n请求频率限制：limit_req_module\n```\n\n> 连接限制\n\n```nginx\nSyntax：limit_conn_zone key zone=name:size;\nDefault：–\nContext：http\n```\n\n```nginx\nSyntax：limit_conn zone number;// 需要基于limit_conn_zone\nDefault：–\nContext：http,server,location\n```\n\n> 请求限制\n\n```nginx\nSyntax：limit_req_zone key zone=name:size rate=rate;\nDefault：–\nContext：http\n```\n\n```nginx\nSyntax：limit_req zone=name [burst=number][nodelay];// 需要基于limit_req_zone\nDefault：–\nContext：http,server,location\n```\n\n> 配置实例:\n\n```nginx\nhttp { \n  .... \n  limit_conn_zone $binanry_remote_addr zone=conn_zone:1m; \n  limit_req_zone $binanry_remote_addr zone=req_zone:1m rate=1r/s; \n} \nserver { \n  ... \n  location / { \n    ... \n    limit_conn conn_zone 1; \n    limit_req zone=req_zone burst=3 nodelay; \n    limit_req zone=req_zone burst=3; \n    limit_req zone=req_zone; \n  } \n}\n```\n\n","source":"_posts/Nginx深入了解-基础-三.md","raw":"---\ntitle: Nginx深入了解-基础(三)\ndate: 2018-07-19 13:43:25\ntags: nginx\n---\n\nNginx有很多开源的第三方模块在实际生产应用中能方便我们使用，包括官方模块和第三方模块。这里介绍下常见的一些模块的使用。\n\n\n\n<!-- more -->\n\n- http_stub_status_modules配置\n\n```nginx\nSyntax：stub_status\nDefault：–\nContext：server,location\n```\n\n> 配置实例:\n\n```nginx\nserver {\n    ...\n    location /mystatus {\n        stub_status;\n    }\n}\n```\n\n- random_index_module展示随机的首页\n\n```nginx\nSyntax：random_index on | off\nDefault：random_index off\nContext：location\n```\n\n> 配置实例:\n\n```nginx\nserver {\n    ...\n    location / {\n        root /opt/app/code;\n        random_index on;\n    }\n}\n```\n\n- http_sub_module html内容替换,只能替换第一个\n\n```nginx\nSyntax：sub_filter string replacement;\nDefault：–\nContext：http,server,location\n```\n\n> 配置实例:\n\n```nginx\nserver { \n  ...\n  location / { \n    root ...; \n    index index.html index.php; \n    sub_filter '替换前的内容' '替换后的内容'; \n  } \n}\n```\n\n```nginx\nSyntax：sub_filter_last_modified on|off;主要用于缓存\nDefault：sub_filter_last_modified off;\nContent：http,server,location\n```\n\n```nginx\nSyntax：sub_filter_once on|off; 全局/非全局替换\nDefault：sub_filter_once on;\nContext：http,server,location\n```\n\n> 配置实例:\n\n```nginx\nserver { \n  ... \n  location / { \n    root ...; \n    index index.html index.php; \n    sub_filter '替换前的内容' '替换后的内容'; \n    sub_filter_once off; // 全部替换 \n  } \n}\n```\n\n- Nginx的请求限制\n\n```nginx\n连接频率限制：limit_conn_module\n请求频率限制：limit_req_module\n```\n\n> 连接限制\n\n```nginx\nSyntax：limit_conn_zone key zone=name:size;\nDefault：–\nContext：http\n```\n\n```nginx\nSyntax：limit_conn zone number;// 需要基于limit_conn_zone\nDefault：–\nContext：http,server,location\n```\n\n> 请求限制\n\n```nginx\nSyntax：limit_req_zone key zone=name:size rate=rate;\nDefault：–\nContext：http\n```\n\n```nginx\nSyntax：limit_req zone=name [burst=number][nodelay];// 需要基于limit_req_zone\nDefault：–\nContext：http,server,location\n```\n\n> 配置实例:\n\n```nginx\nhttp { \n  .... \n  limit_conn_zone $binanry_remote_addr zone=conn_zone:1m; \n  limit_req_zone $binanry_remote_addr zone=req_zone:1m rate=1r/s; \n} \nserver { \n  ... \n  location / { \n    ... \n    limit_conn conn_zone 1; \n    limit_req zone=req_zone burst=3 nodelay; \n    limit_req zone=req_zone burst=3; \n    limit_req zone=req_zone; \n  } \n}\n```\n\n","slug":"Nginx深入了解-基础-三","published":1,"updated":"2021-03-11T05:55:59.911Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb2b000ow7c96bruelyl","content":"<p>Nginx有很多开源的第三方模块在实际生产应用中能方便我们使用，包括官方模块和第三方模块。这里介绍下常见的一些模块的使用。</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>http_stub_status_modules配置</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：stub_status</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：server,location</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置实例:</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attribute\">location</span> /mystatus &#123;</span><br><span class=\"line\">        stub_status;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>random_index_module展示随机的首页</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：random_index on | off</span><br><span class=\"line\">Default：random_index off</span><br><span class=\"line\">Context：location</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置实例:</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /opt/app/code;</span><br><span class=\"line\">        <span class=\"attribute\">random_index</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>http_sub_module html内容替换,只能替换第一个</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：sub_filter string replacement;</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：http,server,location</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置实例:</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">    <span class=\"attribute\">root</span> ...; </span><br><span class=\"line\">    <span class=\"attribute\">index</span> index.html index.php; </span><br><span class=\"line\">    <span class=\"attribute\">sub_filter</span> <span class=\"string\">&#x27;替换前的内容&#x27;</span> <span class=\"string\">&#x27;替换后的内容&#x27;</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：sub_filter_last_modified on|off;主要用于缓存</span><br><span class=\"line\">Default：sub_filter_last_modified off;</span><br><span class=\"line\">Content：http,server,location</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：sub_filter_once on|off; 全局/非全局替换</span><br><span class=\"line\">Default：sub_filter_once on;</span><br><span class=\"line\">Context：http,server,location</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置实例:</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">    <span class=\"attribute\">root</span> ...; </span><br><span class=\"line\">    <span class=\"attribute\">index</span> index.html index.php; </span><br><span class=\"line\">    <span class=\"attribute\">sub_filter</span> <span class=\"string\">&#x27;替换前的内容&#x27;</span> <span class=\"string\">&#x27;替换后的内容&#x27;</span>; </span><br><span class=\"line\">    sub_filter_once off; // 全部替换 </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Nginx的请求限制</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">连接频率限制：limit_conn_module</span><br><span class=\"line\">请求频率限制：limit_req_module</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>连接限制</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：limit_conn_zone key zone=name:size;</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：http</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：limit_conn zone number;// 需要基于limit_conn_zone</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：http,server,location</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>请求限制</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：limit_req_zone key zone=name:size rate=rate;</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：http</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：limit_req zone=name [burst=number][nodelay];// 需要基于limit_req_zone</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：http,server,location</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置实例:</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123; </span><br><span class=\"line\">  .... </span><br><span class=\"line\">  <span class=\"attribute\">limit_conn_zone</span> $binanry_remote_addr zone=conn_zone:<span class=\"number\">1m</span>; </span><br><span class=\"line\">  <span class=\"attribute\">limit_req_zone</span> $binanry_remote_addr zone=req_zone:<span class=\"number\">1m</span> rate=1r/s; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">    <span class=\"attribute\">limit_conn</span> conn_zone <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"attribute\">limit_req</span> zone=req_zone burst=<span class=\"number\">3</span> nodelay; </span><br><span class=\"line\">    <span class=\"attribute\">limit_req</span> zone=req_zone burst=<span class=\"number\">3</span>; </span><br><span class=\"line\">    <span class=\"attribute\">limit_req</span> zone=req_zone; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>Nginx有很多开源的第三方模块在实际生产应用中能方便我们使用，包括官方模块和第三方模块。这里介绍下常见的一些模块的使用。</p>","more":"<ul>\n<li>http_stub_status_modules配置</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：stub_status</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：server,location</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置实例:</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attribute\">location</span> /mystatus &#123;</span><br><span class=\"line\">        stub_status;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>random_index_module展示随机的首页</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：random_index on | off</span><br><span class=\"line\">Default：random_index off</span><br><span class=\"line\">Context：location</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置实例:</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /opt/app/code;</span><br><span class=\"line\">        <span class=\"attribute\">random_index</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>http_sub_module html内容替换,只能替换第一个</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：sub_filter string replacement;</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：http,server,location</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置实例:</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">    <span class=\"attribute\">root</span> ...; </span><br><span class=\"line\">    <span class=\"attribute\">index</span> index.html index.php; </span><br><span class=\"line\">    <span class=\"attribute\">sub_filter</span> <span class=\"string\">&#x27;替换前的内容&#x27;</span> <span class=\"string\">&#x27;替换后的内容&#x27;</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：sub_filter_last_modified on|off;主要用于缓存</span><br><span class=\"line\">Default：sub_filter_last_modified off;</span><br><span class=\"line\">Content：http,server,location</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：sub_filter_once on|off; 全局/非全局替换</span><br><span class=\"line\">Default：sub_filter_once on;</span><br><span class=\"line\">Context：http,server,location</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置实例:</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">    <span class=\"attribute\">root</span> ...; </span><br><span class=\"line\">    <span class=\"attribute\">index</span> index.html index.php; </span><br><span class=\"line\">    <span class=\"attribute\">sub_filter</span> <span class=\"string\">&#x27;替换前的内容&#x27;</span> <span class=\"string\">&#x27;替换后的内容&#x27;</span>; </span><br><span class=\"line\">    sub_filter_once off; // 全部替换 </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Nginx的请求限制</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">连接频率限制：limit_conn_module</span><br><span class=\"line\">请求频率限制：limit_req_module</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>连接限制</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：limit_conn_zone key zone=name:size;</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：http</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：limit_conn zone number;// 需要基于limit_conn_zone</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：http,server,location</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>请求限制</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：limit_req_zone key zone=name:size rate=rate;</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：http</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：limit_req zone=name [burst=number][nodelay];// 需要基于limit_req_zone</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：http,server,location</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置实例:</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123; </span><br><span class=\"line\">  .... </span><br><span class=\"line\">  <span class=\"attribute\">limit_conn_zone</span> $binanry_remote_addr zone=conn_zone:<span class=\"number\">1m</span>; </span><br><span class=\"line\">  <span class=\"attribute\">limit_req_zone</span> $binanry_remote_addr zone=req_zone:<span class=\"number\">1m</span> rate=1r/s; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">    <span class=\"attribute\">limit_conn</span> conn_zone <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"attribute\">limit_req</span> zone=req_zone burst=<span class=\"number\">3</span> nodelay; </span><br><span class=\"line\">    <span class=\"attribute\">limit_req</span> zone=req_zone burst=<span class=\"number\">3</span>; </span><br><span class=\"line\">    <span class=\"attribute\">limit_req</span> zone=req_zone; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Nginx深入了解-基础(一)","date":"2018-07-17T07:22:04.000Z","_content":"\nCentos下Nginx安装的正确姿势；Nginx安装有很多种方式，但是在centos下如何能够快速且按照nginx官方标准的安装nginx呢？\n\n<!-- more -->\n\n首先登录```nginx```官方网站:[http://nginx.org，点击右侧download菜单，选择底部Pre-Built](http://nginx.org，点击右侧download菜单，选择底部Pre-Built/) Packages对应的```stable version```（墙裂建议）找到对应的```Centos```操作系统，复制\n\n```bash\n[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/OS/OSRELEASE/$basearch/\ngpgcheck=0\nenabled=1\n```\n\n这段代码。\n\n进入我们的机器在``` /etc/yum.repos.d/``` 目录下新建 ```nginx.repo ```文件，将上面代码粘贴，注意要修改的地方有两处，我们是在``` centos ```下安装的，所以修改其中的``` OS ```为 ```centos``` ，同时修改``` OSRELEASE ```为我们的 ```centos ```版本号，比如使用的是``` centos7.2``` 我们将其修改为7\n\n\n\n至此，我们的 ```nginx``` 对应的官方``` yum ```源就配置好了，我们使用``` yum list|grep nginx ```来查看对应的 ```nginx ```信息。我们可以看到最新的稳定 ```nginx ```版本:\n\n```bash\ncollectd-nginx.x86_64 5.8.0-4.el7 epel munin-nginx.noarch 2.0.33-1.el7 epel \nnextcloud-nginx.noarch 10.0.4-2.el7 epel \nnginx.x86_64 1:1.14.0-1.el7_4.ngx nginx \nnginx-all-modules.noarch 1:1.12.2-2.el7 epel \nnginx-debug.x86_64 1:1.8.0-1.el7.ngx nginx \nnginx-debuginfo.x86_64 1:1.14.0-1.el7_4.ngx nginx \nnginx-filesystem.noarch 1:1.12.2-2.el7 epel \nnginx-mod-http-geoip.x86_64 1:1.12.2-2.el7 epel \nnginx-mod-http-image-filter.x86_64 1:1.12.2-2.el7 epel \nnginx-mod-http-perl.x86_64 1:1.12.2-2.el7 epel \nnginx-mod-http-xslt-filter.x86_64 1:1.12.2-2.el7 epel \nnginx-mod-mail.x86_64 1:1.12.2-2.el7 epel \nnginx-mod-stream.x86_64 1:1.12.2-2.el7 epel \nnginx-module-geoip.x86_64 1:1.14.0-1.el7_4.ngx nginx \nnginx-module-geoip-debuginfo.x86_64 1:1.14.0-1.el7_4.ngx nginx \nnginx-module-image-filter.x86_64 1:1.14.0-1.el7_4.ngx nginx \nnginx-module-image-filter-debuginfo.x86_64 1:1.14.0-1.el7_4.ngx nginx \nnginx-module-njs.x86_64 1:1.14.0.0.2.2-1.el7_4.ngx nginx \nnginx-module-njs-debuginfo.x86_64 1:1.14.0.0.2.2-1.el7_4.ngx nginx \nnginx-module-perl.x86_64 1:1.14.0-1.el7_4.ngx nginx \nnginx-module-perl-debuginfo.x86_64 1:1.14.0-1.el7_4.ngx nginx \nnginx-module-xslt.x86_64 1:1.14.0-1.el7_4.ngx nginx \nnginx-module-xslt-debuginfo.x86_64 1:1.14.0-1.el7_4.ngx nginx \nnginx-nr-agent.noarch 2.0.0-12.el7.ngx nginx \nowncloud-nginx.noarch 9.1.5-1.el7 epel \npcp-pmda-nginx.x86_64 3.11.8-7.el7 base \npython2-certbot-nginx.noarch 0.25.1-1.el7 epel\n```\n\n上述看到的是最新版本`nginx.x86_64/1:1.14.0-1.el7_4.ngx`，直接使用`yum install nginx`就可以安装了。安装完成后使用`nginx -v`和`nginx -V`查看对应的版本信息和配置信息。\n\n","source":"_posts/Nginx深入了解-基础-一.md","raw":"---\ntitle: Nginx深入了解-基础(一)\ndate: 2018-07-17 15:22:04\ntags: nginx\n---\n\nCentos下Nginx安装的正确姿势；Nginx安装有很多种方式，但是在centos下如何能够快速且按照nginx官方标准的安装nginx呢？\n\n<!-- more -->\n\n首先登录```nginx```官方网站:[http://nginx.org，点击右侧download菜单，选择底部Pre-Built](http://nginx.org，点击右侧download菜单，选择底部Pre-Built/) Packages对应的```stable version```（墙裂建议）找到对应的```Centos```操作系统，复制\n\n```bash\n[nginx]\nname=nginx repo\nbaseurl=http://nginx.org/packages/OS/OSRELEASE/$basearch/\ngpgcheck=0\nenabled=1\n```\n\n这段代码。\n\n进入我们的机器在``` /etc/yum.repos.d/``` 目录下新建 ```nginx.repo ```文件，将上面代码粘贴，注意要修改的地方有两处，我们是在``` centos ```下安装的，所以修改其中的``` OS ```为 ```centos``` ，同时修改``` OSRELEASE ```为我们的 ```centos ```版本号，比如使用的是``` centos7.2``` 我们将其修改为7\n\n\n\n至此，我们的 ```nginx``` 对应的官方``` yum ```源就配置好了，我们使用``` yum list|grep nginx ```来查看对应的 ```nginx ```信息。我们可以看到最新的稳定 ```nginx ```版本:\n\n```bash\ncollectd-nginx.x86_64 5.8.0-4.el7 epel munin-nginx.noarch 2.0.33-1.el7 epel \nnextcloud-nginx.noarch 10.0.4-2.el7 epel \nnginx.x86_64 1:1.14.0-1.el7_4.ngx nginx \nnginx-all-modules.noarch 1:1.12.2-2.el7 epel \nnginx-debug.x86_64 1:1.8.0-1.el7.ngx nginx \nnginx-debuginfo.x86_64 1:1.14.0-1.el7_4.ngx nginx \nnginx-filesystem.noarch 1:1.12.2-2.el7 epel \nnginx-mod-http-geoip.x86_64 1:1.12.2-2.el7 epel \nnginx-mod-http-image-filter.x86_64 1:1.12.2-2.el7 epel \nnginx-mod-http-perl.x86_64 1:1.12.2-2.el7 epel \nnginx-mod-http-xslt-filter.x86_64 1:1.12.2-2.el7 epel \nnginx-mod-mail.x86_64 1:1.12.2-2.el7 epel \nnginx-mod-stream.x86_64 1:1.12.2-2.el7 epel \nnginx-module-geoip.x86_64 1:1.14.0-1.el7_4.ngx nginx \nnginx-module-geoip-debuginfo.x86_64 1:1.14.0-1.el7_4.ngx nginx \nnginx-module-image-filter.x86_64 1:1.14.0-1.el7_4.ngx nginx \nnginx-module-image-filter-debuginfo.x86_64 1:1.14.0-1.el7_4.ngx nginx \nnginx-module-njs.x86_64 1:1.14.0.0.2.2-1.el7_4.ngx nginx \nnginx-module-njs-debuginfo.x86_64 1:1.14.0.0.2.2-1.el7_4.ngx nginx \nnginx-module-perl.x86_64 1:1.14.0-1.el7_4.ngx nginx \nnginx-module-perl-debuginfo.x86_64 1:1.14.0-1.el7_4.ngx nginx \nnginx-module-xslt.x86_64 1:1.14.0-1.el7_4.ngx nginx \nnginx-module-xslt-debuginfo.x86_64 1:1.14.0-1.el7_4.ngx nginx \nnginx-nr-agent.noarch 2.0.0-12.el7.ngx nginx \nowncloud-nginx.noarch 9.1.5-1.el7 epel \npcp-pmda-nginx.x86_64 3.11.8-7.el7 base \npython2-certbot-nginx.noarch 0.25.1-1.el7 epel\n```\n\n上述看到的是最新版本`nginx.x86_64/1:1.14.0-1.el7_4.ngx`，直接使用`yum install nginx`就可以安装了。安装完成后使用`nginx -v`和`nginx -V`查看对应的版本信息和配置信息。\n\n","slug":"Nginx深入了解-基础-一","published":1,"updated":"2021-03-11T07:36:32.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb2c000qw7c90cp86ypp","content":"<p>Centos下Nginx安装的正确姿势；Nginx安装有很多种方式，但是在centos下如何能够快速且按照nginx官方标准的安装nginx呢？</p>\n<span id=\"more\"></span>\n\n<p>首先登录<code>nginx</code>官方网站:<a href=\"http://nginx.org,点击右侧download菜单,选择底部pre-built/\">http://nginx.org，点击右侧download菜单，选择底部Pre-Built</a> Packages对应的<code>stable version</code>（墙裂建议）找到对应的<code>Centos</code>操作系统，复制</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nginx]</span><br><span class=\"line\">name=nginx repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/OS/OSRELEASE/<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n\n<p>这段代码。</p>\n<p>进入我们的机器在<code> /etc/yum.repos.d/</code> 目录下新建 <code>nginx.repo </code>文件，将上面代码粘贴，注意要修改的地方有两处，我们是在<code>centos</code>下安装的，所以修改其中的<code>OS</code>为 <code>centos</code> ，同时修改<code>OSRELEASE</code>为我们的 <code>centos </code>版本号，比如使用的是<code> centos7.2</code> 我们将其修改为7</p>\n<p>至此，我们的 <code>nginx</code> 对应的官方<code>yum</code>源就配置好了，我们使用<code>yum list|grep nginx</code>来查看对应的 <code>nginx </code>信息。我们可以看到最新的稳定 <code>nginx </code>版本:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">collectd-nginx.x86_64 5.8.0-4.el7 epel munin-nginx.noarch 2.0.33-1.el7 epel </span><br><span class=\"line\">nextcloud-nginx.noarch 10.0.4-2.el7 epel </span><br><span class=\"line\">nginx.x86_64 1:1.14.0-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-all-modules.noarch 1:1.12.2-2.el7 epel </span><br><span class=\"line\">nginx-debug.x86_64 1:1.8.0-1.el7.ngx nginx </span><br><span class=\"line\">nginx-debuginfo.x86_64 1:1.14.0-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-filesystem.noarch 1:1.12.2-2.el7 epel </span><br><span class=\"line\">nginx-mod-http-geoip.x86_64 1:1.12.2-2.el7 epel </span><br><span class=\"line\">nginx-mod-http-image-filter.x86_64 1:1.12.2-2.el7 epel </span><br><span class=\"line\">nginx-mod-http-perl.x86_64 1:1.12.2-2.el7 epel </span><br><span class=\"line\">nginx-mod-http-xslt-filter.x86_64 1:1.12.2-2.el7 epel </span><br><span class=\"line\">nginx-mod-mail.x86_64 1:1.12.2-2.el7 epel </span><br><span class=\"line\">nginx-mod-stream.x86_64 1:1.12.2-2.el7 epel </span><br><span class=\"line\">nginx-module-geoip.x86_64 1:1.14.0-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-module-geoip-debuginfo.x86_64 1:1.14.0-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-module-image-filter.x86_64 1:1.14.0-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-module-image-filter-debuginfo.x86_64 1:1.14.0-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-module-njs.x86_64 1:1.14.0.0.2.2-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-module-njs-debuginfo.x86_64 1:1.14.0.0.2.2-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-module-perl.x86_64 1:1.14.0-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-module-perl-debuginfo.x86_64 1:1.14.0-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-module-xslt.x86_64 1:1.14.0-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-module-xslt-debuginfo.x86_64 1:1.14.0-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-nr-agent.noarch 2.0.0-12.el7.ngx nginx </span><br><span class=\"line\">owncloud-nginx.noarch 9.1.5-1.el7 epel </span><br><span class=\"line\">pcp-pmda-nginx.x86_64 3.11.8-7.el7 base </span><br><span class=\"line\">python2-certbot-nginx.noarch 0.25.1-1.el7 epel</span><br></pre></td></tr></table></figure>\n\n<p>上述看到的是最新版本<code>nginx.x86_64/1:1.14.0-1.el7_4.ngx</code>，直接使用<code>yum install nginx</code>就可以安装了。安装完成后使用<code>nginx -v</code>和<code>nginx -V</code>查看对应的版本信息和配置信息。</p>\n","site":{"data":{}},"excerpt":"<p>Centos下Nginx安装的正确姿势；Nginx安装有很多种方式，但是在centos下如何能够快速且按照nginx官方标准的安装nginx呢？</p>","more":"<p>首先登录<code>nginx</code>官方网站:<a href=\"http://nginx.org,点击右侧download菜单,选择底部pre-built/\">http://nginx.org，点击右侧download菜单，选择底部Pre-Built</a> Packages对应的<code>stable version</code>（墙裂建议）找到对应的<code>Centos</code>操作系统，复制</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[nginx]</span><br><span class=\"line\">name=nginx repo</span><br><span class=\"line\">baseurl=http://nginx.org/packages/OS/OSRELEASE/<span class=\"variable\">$basearch</span>/</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">enabled=1</span><br></pre></td></tr></table></figure>\n\n<p>这段代码。</p>\n<p>进入我们的机器在<code> /etc/yum.repos.d/</code> 目录下新建 <code>nginx.repo </code>文件，将上面代码粘贴，注意要修改的地方有两处，我们是在<code>centos</code>下安装的，所以修改其中的<code>OS</code>为 <code>centos</code> ，同时修改<code>OSRELEASE</code>为我们的 <code>centos </code>版本号，比如使用的是<code> centos7.2</code> 我们将其修改为7</p>\n<p>至此，我们的 <code>nginx</code> 对应的官方<code>yum</code>源就配置好了，我们使用<code>yum list|grep nginx</code>来查看对应的 <code>nginx </code>信息。我们可以看到最新的稳定 <code>nginx </code>版本:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">collectd-nginx.x86_64 5.8.0-4.el7 epel munin-nginx.noarch 2.0.33-1.el7 epel </span><br><span class=\"line\">nextcloud-nginx.noarch 10.0.4-2.el7 epel </span><br><span class=\"line\">nginx.x86_64 1:1.14.0-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-all-modules.noarch 1:1.12.2-2.el7 epel </span><br><span class=\"line\">nginx-debug.x86_64 1:1.8.0-1.el7.ngx nginx </span><br><span class=\"line\">nginx-debuginfo.x86_64 1:1.14.0-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-filesystem.noarch 1:1.12.2-2.el7 epel </span><br><span class=\"line\">nginx-mod-http-geoip.x86_64 1:1.12.2-2.el7 epel </span><br><span class=\"line\">nginx-mod-http-image-filter.x86_64 1:1.12.2-2.el7 epel </span><br><span class=\"line\">nginx-mod-http-perl.x86_64 1:1.12.2-2.el7 epel </span><br><span class=\"line\">nginx-mod-http-xslt-filter.x86_64 1:1.12.2-2.el7 epel </span><br><span class=\"line\">nginx-mod-mail.x86_64 1:1.12.2-2.el7 epel </span><br><span class=\"line\">nginx-mod-stream.x86_64 1:1.12.2-2.el7 epel </span><br><span class=\"line\">nginx-module-geoip.x86_64 1:1.14.0-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-module-geoip-debuginfo.x86_64 1:1.14.0-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-module-image-filter.x86_64 1:1.14.0-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-module-image-filter-debuginfo.x86_64 1:1.14.0-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-module-njs.x86_64 1:1.14.0.0.2.2-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-module-njs-debuginfo.x86_64 1:1.14.0.0.2.2-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-module-perl.x86_64 1:1.14.0-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-module-perl-debuginfo.x86_64 1:1.14.0-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-module-xslt.x86_64 1:1.14.0-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-module-xslt-debuginfo.x86_64 1:1.14.0-1.el7_4.ngx nginx </span><br><span class=\"line\">nginx-nr-agent.noarch 2.0.0-12.el7.ngx nginx </span><br><span class=\"line\">owncloud-nginx.noarch 9.1.5-1.el7 epel </span><br><span class=\"line\">pcp-pmda-nginx.x86_64 3.11.8-7.el7 base </span><br><span class=\"line\">python2-certbot-nginx.noarch 0.25.1-1.el7 epel</span><br></pre></td></tr></table></figure>\n\n<p>上述看到的是最新版本<code>nginx.x86_64/1:1.14.0-1.el7_4.ngx</code>，直接使用<code>yum install nginx</code>就可以安装了。安装完成后使用<code>nginx -v</code>和<code>nginx -V</code>查看对应的版本信息和配置信息。</p>"},{"title":"Nginx深入了解-基础(四)","date":"2018-07-20T02:21:03.000Z","_content":"\nNginx的访问控制。有两种方式可以来进行webserver的访问控制：一种是基于IP的访问控制-http_access_module;另一种是基于用户的信任登录-http_auth_basic_module.\n\n<!-- more -->\n\n- http_access_module\n\n```nginx\nSyntax：allow address|CIDR|unix:|all;// ip地址|网段|socket方式|允许所有\nDefault：–\nContext：http,server,location,limit_except\n```\n\n相对应的deny方式\n\n```nginx\nSyntax：deny address|CIDR|unix:|all;\nDefault：–\nContext：http,server,location,limit_except\n```\n\n> 配置实例:\n\n```nginx\nserver { \n  ... \n  location / { \n    ... \n    deny 127.0.0.1; allow all; \n  } \n  location ~ ^/admin { \n    ... \n    allow 127.0.0.1; deny all; \n  } \n}\n```\n\nhttp_access_module是有局限性的，当客户端使用cdn代理时，nginx读取客户端的ip是通过remote_addr来识别的，识别到的ip此时是cdn代理的ip，而不是客户端真实的ip.\n\n\n\n方式一：可以使用http_x_forwarded_for解决。\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190215115219.png)\n\n方式二：结合geo模块\n\n方式三：通过http自定义变量传递\n\n- http_auth_basic_module\n\n```nginx\nSyntax：auth_basic string|off;\nDefault：auth_basic off;\nContext：http,server,location,limit_except\n```\n\n官方文档：[http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html](https://nginx.org/en/docs/http/ngx_http_auth_basic_module.html)\n\n```nginx\nSyntax：auth_basic_user_file file;// 使用文件密码信息\nDefault：–\nContext：http,server,location,limit_except\n```\n\n按照官网可以使用htpasswd方式生成对应的文件:\n\n```bash\n[dc2-user@10-254-0-193 nginx]$ sudo htpasswd -c ./auth_conf mantis \n[dc2-user@10-254-0-193 nginx]$ more ./auth_conf mantis:$apr1$dnrF/7bE$gaMkEYvWB2KYmaG0cQcoS0\n```\n\n配置:\n\n```nginx\nserver { \n  ... \n  location ~ ^/admin { \n    ... \n    auth_basic \"Auth access deny!\"; \n    auth_basic_user_file /etc/nginx/auth_conf; \n    ... \n  } \n}\n```\n\n局限性：\n\n一，用户信息依赖文件\n二，操作管理机械，效率低下\n\n解决方式：\n\n一，使用Lua实现验证\n二，Nginx和LDAP打通，利用nginx-auth-ldap模块","source":"_posts/Nginx深入了解-基础-四.md","raw":"---\ntitle: Nginx深入了解-基础(四)\ndate: 2018-07-20 10:21:03\ntags: nginx\n---\n\nNginx的访问控制。有两种方式可以来进行webserver的访问控制：一种是基于IP的访问控制-http_access_module;另一种是基于用户的信任登录-http_auth_basic_module.\n\n<!-- more -->\n\n- http_access_module\n\n```nginx\nSyntax：allow address|CIDR|unix:|all;// ip地址|网段|socket方式|允许所有\nDefault：–\nContext：http,server,location,limit_except\n```\n\n相对应的deny方式\n\n```nginx\nSyntax：deny address|CIDR|unix:|all;\nDefault：–\nContext：http,server,location,limit_except\n```\n\n> 配置实例:\n\n```nginx\nserver { \n  ... \n  location / { \n    ... \n    deny 127.0.0.1; allow all; \n  } \n  location ~ ^/admin { \n    ... \n    allow 127.0.0.1; deny all; \n  } \n}\n```\n\nhttp_access_module是有局限性的，当客户端使用cdn代理时，nginx读取客户端的ip是通过remote_addr来识别的，识别到的ip此时是cdn代理的ip，而不是客户端真实的ip.\n\n\n\n方式一：可以使用http_x_forwarded_for解决。\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190215115219.png)\n\n方式二：结合geo模块\n\n方式三：通过http自定义变量传递\n\n- http_auth_basic_module\n\n```nginx\nSyntax：auth_basic string|off;\nDefault：auth_basic off;\nContext：http,server,location,limit_except\n```\n\n官方文档：[http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html](https://nginx.org/en/docs/http/ngx_http_auth_basic_module.html)\n\n```nginx\nSyntax：auth_basic_user_file file;// 使用文件密码信息\nDefault：–\nContext：http,server,location,limit_except\n```\n\n按照官网可以使用htpasswd方式生成对应的文件:\n\n```bash\n[dc2-user@10-254-0-193 nginx]$ sudo htpasswd -c ./auth_conf mantis \n[dc2-user@10-254-0-193 nginx]$ more ./auth_conf mantis:$apr1$dnrF/7bE$gaMkEYvWB2KYmaG0cQcoS0\n```\n\n配置:\n\n```nginx\nserver { \n  ... \n  location ~ ^/admin { \n    ... \n    auth_basic \"Auth access deny!\"; \n    auth_basic_user_file /etc/nginx/auth_conf; \n    ... \n  } \n}\n```\n\n局限性：\n\n一，用户信息依赖文件\n二，操作管理机械，效率低下\n\n解决方式：\n\n一，使用Lua实现验证\n二，Nginx和LDAP打通，利用nginx-auth-ldap模块","slug":"Nginx深入了解-基础-四","published":1,"updated":"2021-03-11T02:26:37.796Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb2d000sw7c98m5u395v","content":"<p>Nginx的访问控制。有两种方式可以来进行webserver的访问控制：一种是基于IP的访问控制-http_access_module;另一种是基于用户的信任登录-http_auth_basic_module.</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>http_access_module</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：allow address|CIDR|unix:|all;// ip地址|网段|socket方式|允许所有</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：http,server,location,limit_except</span><br></pre></td></tr></table></figure>\n\n<p>相对应的deny方式</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：deny address|CIDR|unix:|all;</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：http,server,location,limit_except</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置实例:</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">    <span class=\"attribute\">deny</span> <span class=\"number\">127.0.0.1</span>; <span class=\"attribute\">allow</span> all; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ ^/admin</span> &#123; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">    <span class=\"attribute\">allow</span> <span class=\"number\">127.0.0.1</span>; <span class=\"attribute\">deny</span> all; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>http_access_module是有局限性的，当客户端使用cdn代理时，nginx读取客户端的ip是通过remote_addr来识别的，识别到的ip此时是cdn代理的ip，而不是客户端真实的ip.</p>\n<p>方式一：可以使用http_x_forwarded_for解决。</p>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190215115219.png\"></p>\n<p>方式二：结合geo模块</p>\n<p>方式三：通过http自定义变量传递</p>\n<ul>\n<li>http_auth_basic_module</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：auth_basic string|off;</span><br><span class=\"line\">Default：auth_basic off;</span><br><span class=\"line\">Context：http,server,location,limit_except</span><br></pre></td></tr></table></figure>\n\n<p>官方文档：<a href=\"https://nginx.org/en/docs/http/ngx_http_auth_basic_module.html\">http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：auth_basic_user_file file;// 使用文件密码信息</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：http,server,location,limit_except</span><br></pre></td></tr></table></figure>\n\n<p>按照官网可以使用htpasswd方式生成对应的文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[dc2-user@10-254-0-193 nginx]$ sudo htpasswd -c ./auth_conf mantis </span><br><span class=\"line\">[dc2-user@10-254-0-193 nginx]$ more ./auth_conf mantis:$apr1<span class=\"variable\">$dnrF</span>/7bE<span class=\"variable\">$gaMkEYvWB2KYmaG0cQcoS0</span></span><br></pre></td></tr></table></figure>\n\n<p>配置:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ ^/admin</span> &#123; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">    <span class=\"attribute\">auth_basic</span> <span class=\"string\">&quot;Auth access deny!&quot;</span>; </span><br><span class=\"line\">    <span class=\"attribute\">auth_basic_user_file</span> /etc/nginx/auth_conf; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>局限性：</p>\n<p>一，用户信息依赖文件<br>二，操作管理机械，效率低下</p>\n<p>解决方式：</p>\n<p>一，使用Lua实现验证<br>二，Nginx和LDAP打通，利用nginx-auth-ldap模块</p>\n","site":{"data":{}},"excerpt":"<p>Nginx的访问控制。有两种方式可以来进行webserver的访问控制：一种是基于IP的访问控制-http_access_module;另一种是基于用户的信任登录-http_auth_basic_module.</p>","more":"<ul>\n<li>http_access_module</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：allow address|CIDR|unix:|all;// ip地址|网段|socket方式|允许所有</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：http,server,location,limit_except</span><br></pre></td></tr></table></figure>\n\n<p>相对应的deny方式</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：deny address|CIDR|unix:|all;</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：http,server,location,limit_except</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置实例:</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">    <span class=\"attribute\">deny</span> <span class=\"number\">127.0.0.1</span>; <span class=\"attribute\">allow</span> all; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ ^/admin</span> &#123; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">    <span class=\"attribute\">allow</span> <span class=\"number\">127.0.0.1</span>; <span class=\"attribute\">deny</span> all; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>http_access_module是有局限性的，当客户端使用cdn代理时，nginx读取客户端的ip是通过remote_addr来识别的，识别到的ip此时是cdn代理的ip，而不是客户端真实的ip.</p>\n<p>方式一：可以使用http_x_forwarded_for解决。</p>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190215115219.png\"></p>\n<p>方式二：结合geo模块</p>\n<p>方式三：通过http自定义变量传递</p>\n<ul>\n<li>http_auth_basic_module</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：auth_basic string|off;</span><br><span class=\"line\">Default：auth_basic off;</span><br><span class=\"line\">Context：http,server,location,limit_except</span><br></pre></td></tr></table></figure>\n\n<p>官方文档：<a href=\"https://nginx.org/en/docs/http/ngx_http_auth_basic_module.html\">http://nginx.org/en/docs/http/ngx_http_auth_basic_module.html</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：auth_basic_user_file file;// 使用文件密码信息</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：http,server,location,limit_except</span><br></pre></td></tr></table></figure>\n\n<p>按照官网可以使用htpasswd方式生成对应的文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[dc2-user@10-254-0-193 nginx]$ sudo htpasswd -c ./auth_conf mantis </span><br><span class=\"line\">[dc2-user@10-254-0-193 nginx]$ more ./auth_conf mantis:$apr1<span class=\"variable\">$dnrF</span>/7bE<span class=\"variable\">$gaMkEYvWB2KYmaG0cQcoS0</span></span><br></pre></td></tr></table></figure>\n\n<p>配置:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ ^/admin</span> &#123; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">    <span class=\"attribute\">auth_basic</span> <span class=\"string\">&quot;Auth access deny!&quot;</span>; </span><br><span class=\"line\">    <span class=\"attribute\">auth_basic_user_file</span> /etc/nginx/auth_conf; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>局限性：</p>\n<p>一，用户信息依赖文件<br>二，操作管理机械，效率低下</p>\n<p>解决方式：</p>\n<p>一，使用Lua实现验证<br>二，Nginx和LDAP打通，利用nginx-auth-ldap模块</p>"},{"title":"Nginx深入了解-基础(二)","date":"2018-07-17T05:56:27.000Z","_content":"\nNginx的安装及相关参数介绍。yum安装nginx后可通过命令rpm -pl nginx查看相关的安装目录。如下:\n\n<!-- more -->\n\n- 参数介绍\n\n| 路径                                                         | 类型           | 作用                                                         |\n| ------------------------------------------------------------ | -------------- | ------------------------------------------------------------ |\n| /etc/logrotate.d/nginx                                       | 配置文件       | Nginx日志轮转，用于logrotate服务的日志切割                   |\n| /etc/nginx /etc/nginx/nginx.conf /etc/nginx/conf.d /etc/nginx/conf.d/default.conf | 目录，配置文件 | nginx主配置文件                                              |\n| /etc/nginx/fastcgi_params /etc/nginx/uwsgi_params /etc/nginx/scgi_params | 配置文件       | 编码转换映射转换文件                                         |\n| /etc/nginx/mime.types                                        | 配置文件       | 设置http协议的content-type与扩展名对应关系                   |\n| /usr/lib/systemd/system/nginx-debug.service /usr/lib/systemd/system/nginx.service    /etc/sysconfig/nginx /etc/sysconfig/nginx-debug | 配置文件       | 用于配置系统守护进程管理器管理方式                           |\n| /usr/lib64/nginx/modules /etc/nginx/modules                  | 目录           | nginx模块目录                                                |\n| /usr/sbin/nginx /usr/sbin/nginx-debug                        | 命令           | nginx服务的启动管理的终端命令                                |\n| /usr/share/doc/nginx-版本号 /usr/share/doc/nginx-版本号/COPYRIGHT /usr/share/man/man8/nginx.8.gz | 文件、目录     | ginx手册、帮助文件                                           |\n| /var/cache/nginx                                             | 目录           | nginx的缓存目录，nginx布景可以用作服务代理，还可以用来做缓存服务 |\n| /var/log/nginx                                               | 目录           | nginx日志目                                                  |\n\n> 使用```nginx -V```查看配置参数:\n\n```bash\nconfigure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC' --with-ld-opt='-Wl,-z,relro -Wl,-z,now -pie'\n```\n\n| 编译                                                         | 作用                                      |\n| ------------------------------------------------------------ | ----------------------------------------- |\n| –prefix=/etc/nginx \\ –sbin-path=/usr/sbin/nginx \\ –modules-path=/usr/lib64/nginx/modules \\ –conf-path=/etc/nginx/nginx.conf \\ –error-log-path=/var/log/nginx/error.log –http-log-path=/var/log/nginx/access.log \\ –pid-path=/var/run/nginx.pid \\ –lock-path=/var/run/nginx.lock | 安装目的目录或路径                        |\n| –http-client-body-temp-path=/var/cache/nginx/client_temp \\ –http-proxy-temp-path=/var/cache/nginx/proxy_temp \\ –http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\ –http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\ –http-scgi-temp-path=/var/cache/nginx/scgi_temp | 执行对应的模块时，nginx所保留的临时性文件 |\n| –user=nginx \\ –group=nginx                                   | 设定nginx进程启动的用户和用户组           |\n\n- ```nginx.conf```的配置相关\n\n> 第一块\n\n| 参数             | 说明                          |\n| ---------------- | ----------------------------- |\n| user             | 设置nginx服务的系统使用用户   |\n| worker_processes | 工作进程数，与cpu核数保持一致 |\n| error_log        | nginxd的错误日志              |\n| pid              | nginx服务启动时候的pid        |\n\n> 第二块\n\n| 模块   | 参数               | 说明                   |\n| ------ | ------------------ | ---------------------- |\n| events | worker_connections | 每个进程允许最大连接数 |\n|        | use                | 工作进程数             |\n\n> 第三块\n\n```nginx\nhttp { \n    include /etc/nginx/mime.types; // http的content-type设置 \n    default_type application/octet-stream; \n    log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"';   \n    access_log /var/log/nginx/access.log main; \n    sendfile on; #tcp_nopush on; \n    keepalive_timeout 65; #gzip on; \n    // 标准的方式是将多个server配置成多个.conf文件放在/etc/nginx/conf.d下include进来 \n    #include /etc/nginx/conf.d/*.conf; \n    server { \n    \t\tlisten 80; \n    \t\tserver_name localhost; \n    \t\tlocaltion / { \n      \t\troot .... ;\n          index .... ; \n        } \n        error_page .... \n        localtion = /50x.tml { \n      \t\t\t..... \n    \t\t} \n  \t} \n  \tserver { .... } \n  \tserver { .... } \n}\n```\n\n```log_format```定义access_log的日志内容格式，可自定义。例如添加```user_agent```信息：```$http_User_Agent```.\n\n","source":"_posts/Nginx深入了解-基础-二.md","raw":"---\ntitle: Nginx深入了解-基础(二)\ndate: 2018-07-17 13:56:27\ntags: nginx\n---\n\nNginx的安装及相关参数介绍。yum安装nginx后可通过命令rpm -pl nginx查看相关的安装目录。如下:\n\n<!-- more -->\n\n- 参数介绍\n\n| 路径                                                         | 类型           | 作用                                                         |\n| ------------------------------------------------------------ | -------------- | ------------------------------------------------------------ |\n| /etc/logrotate.d/nginx                                       | 配置文件       | Nginx日志轮转，用于logrotate服务的日志切割                   |\n| /etc/nginx /etc/nginx/nginx.conf /etc/nginx/conf.d /etc/nginx/conf.d/default.conf | 目录，配置文件 | nginx主配置文件                                              |\n| /etc/nginx/fastcgi_params /etc/nginx/uwsgi_params /etc/nginx/scgi_params | 配置文件       | 编码转换映射转换文件                                         |\n| /etc/nginx/mime.types                                        | 配置文件       | 设置http协议的content-type与扩展名对应关系                   |\n| /usr/lib/systemd/system/nginx-debug.service /usr/lib/systemd/system/nginx.service    /etc/sysconfig/nginx /etc/sysconfig/nginx-debug | 配置文件       | 用于配置系统守护进程管理器管理方式                           |\n| /usr/lib64/nginx/modules /etc/nginx/modules                  | 目录           | nginx模块目录                                                |\n| /usr/sbin/nginx /usr/sbin/nginx-debug                        | 命令           | nginx服务的启动管理的终端命令                                |\n| /usr/share/doc/nginx-版本号 /usr/share/doc/nginx-版本号/COPYRIGHT /usr/share/man/man8/nginx.8.gz | 文件、目录     | ginx手册、帮助文件                                           |\n| /var/cache/nginx                                             | 目录           | nginx的缓存目录，nginx布景可以用作服务代理，还可以用来做缓存服务 |\n| /var/log/nginx                                               | 目录           | nginx日志目                                                  |\n\n> 使用```nginx -V```查看配置参数:\n\n```bash\nconfigure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC' --with-ld-opt='-Wl,-z,relro -Wl,-z,now -pie'\n```\n\n| 编译                                                         | 作用                                      |\n| ------------------------------------------------------------ | ----------------------------------------- |\n| –prefix=/etc/nginx \\ –sbin-path=/usr/sbin/nginx \\ –modules-path=/usr/lib64/nginx/modules \\ –conf-path=/etc/nginx/nginx.conf \\ –error-log-path=/var/log/nginx/error.log –http-log-path=/var/log/nginx/access.log \\ –pid-path=/var/run/nginx.pid \\ –lock-path=/var/run/nginx.lock | 安装目的目录或路径                        |\n| –http-client-body-temp-path=/var/cache/nginx/client_temp \\ –http-proxy-temp-path=/var/cache/nginx/proxy_temp \\ –http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\ –http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\ –http-scgi-temp-path=/var/cache/nginx/scgi_temp | 执行对应的模块时，nginx所保留的临时性文件 |\n| –user=nginx \\ –group=nginx                                   | 设定nginx进程启动的用户和用户组           |\n\n- ```nginx.conf```的配置相关\n\n> 第一块\n\n| 参数             | 说明                          |\n| ---------------- | ----------------------------- |\n| user             | 设置nginx服务的系统使用用户   |\n| worker_processes | 工作进程数，与cpu核数保持一致 |\n| error_log        | nginxd的错误日志              |\n| pid              | nginx服务启动时候的pid        |\n\n> 第二块\n\n| 模块   | 参数               | 说明                   |\n| ------ | ------------------ | ---------------------- |\n| events | worker_connections | 每个进程允许最大连接数 |\n|        | use                | 工作进程数             |\n\n> 第三块\n\n```nginx\nhttp { \n    include /etc/nginx/mime.types; // http的content-type设置 \n    default_type application/octet-stream; \n    log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\"';   \n    access_log /var/log/nginx/access.log main; \n    sendfile on; #tcp_nopush on; \n    keepalive_timeout 65; #gzip on; \n    // 标准的方式是将多个server配置成多个.conf文件放在/etc/nginx/conf.d下include进来 \n    #include /etc/nginx/conf.d/*.conf; \n    server { \n    \t\tlisten 80; \n    \t\tserver_name localhost; \n    \t\tlocaltion / { \n      \t\troot .... ;\n          index .... ; \n        } \n        error_page .... \n        localtion = /50x.tml { \n      \t\t\t..... \n    \t\t} \n  \t} \n  \tserver { .... } \n  \tserver { .... } \n}\n```\n\n```log_format```定义access_log的日志内容格式，可自定义。例如添加```user_agent```信息：```$http_User_Agent```.\n\n","slug":"Nginx深入了解-基础-二","published":1,"updated":"2021-03-11T07:21:39.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb2e000tw7c9f1o879wc","content":"<p>Nginx的安装及相关参数介绍。yum安装nginx后可通过命令rpm -pl nginx查看相关的安装目录。如下:</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>参数介绍</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>路径</th>\n<th>类型</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/etc/logrotate.d/nginx</td>\n<td>配置文件</td>\n<td>Nginx日志轮转，用于logrotate服务的日志切割</td>\n</tr>\n<tr>\n<td>/etc/nginx /etc/nginx/nginx.conf /etc/nginx/conf.d /etc/nginx/conf.d/default.conf</td>\n<td>目录，配置文件</td>\n<td>nginx主配置文件</td>\n</tr>\n<tr>\n<td>/etc/nginx/fastcgi_params /etc/nginx/uwsgi_params /etc/nginx/scgi_params</td>\n<td>配置文件</td>\n<td>编码转换映射转换文件</td>\n</tr>\n<tr>\n<td>/etc/nginx/mime.types</td>\n<td>配置文件</td>\n<td>设置http协议的content-type与扩展名对应关系</td>\n</tr>\n<tr>\n<td>/usr/lib/systemd/system/nginx-debug.service /usr/lib/systemd/system/nginx.service    /etc/sysconfig/nginx /etc/sysconfig/nginx-debug</td>\n<td>配置文件</td>\n<td>用于配置系统守护进程管理器管理方式</td>\n</tr>\n<tr>\n<td>/usr/lib64/nginx/modules /etc/nginx/modules</td>\n<td>目录</td>\n<td>nginx模块目录</td>\n</tr>\n<tr>\n<td>/usr/sbin/nginx /usr/sbin/nginx-debug</td>\n<td>命令</td>\n<td>nginx服务的启动管理的终端命令</td>\n</tr>\n<tr>\n<td>/usr/share/doc/nginx-版本号 /usr/share/doc/nginx-版本号/COPYRIGHT /usr/share/man/man8/nginx.8.gz</td>\n<td>文件、目录</td>\n<td>ginx手册、帮助文件</td>\n</tr>\n<tr>\n<td>/var/cache/nginx</td>\n<td>目录</td>\n<td>nginx的缓存目录，nginx布景可以用作服务代理，还可以用来做缓存服务</td>\n</tr>\n<tr>\n<td>/var/log/nginx</td>\n<td>目录</td>\n<td>nginx日志目</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>使用<code>nginx -V</code>查看配置参数:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log --http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=<span class=\"string\">&#x27;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC&#x27;</span> --with-ld-opt=<span class=\"string\">&#x27;-Wl,-z,relro -Wl,-z,now -pie&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>编译</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>–prefix=/etc/nginx \\ –sbin-path=/usr/sbin/nginx \\ –modules-path=/usr/lib64/nginx/modules \\ –conf-path=/etc/nginx/nginx.conf \\ –error-log-path=/var/log/nginx/error.log –http-log-path=/var/log/nginx/access.log \\ –pid-path=/var/run/nginx.pid \\ –lock-path=/var/run/nginx.lock</td>\n<td>安装目的目录或路径</td>\n</tr>\n<tr>\n<td>–http-client-body-temp-path=/var/cache/nginx/client_temp \\ –http-proxy-temp-path=/var/cache/nginx/proxy_temp \\ –http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\ –http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\ –http-scgi-temp-path=/var/cache/nginx/scgi_temp</td>\n<td>执行对应的模块时，nginx所保留的临时性文件</td>\n</tr>\n<tr>\n<td>–user=nginx \\ –group=nginx</td>\n<td>设定nginx进程启动的用户和用户组</td>\n</tr>\n</tbody></table>\n<ul>\n<li><code>nginx.conf</code>的配置相关</li>\n</ul>\n<blockquote>\n<p>第一块</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>user</td>\n<td>设置nginx服务的系统使用用户</td>\n</tr>\n<tr>\n<td>worker_processes</td>\n<td>工作进程数，与cpu核数保持一致</td>\n</tr>\n<tr>\n<td>error_log</td>\n<td>nginxd的错误日志</td>\n</tr>\n<tr>\n<td>pid</td>\n<td>nginx服务启动时候的pid</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>第二块</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>模块</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>events</td>\n<td>worker_connections</td>\n<td>每个进程允许最大连接数</td>\n</tr>\n<tr>\n<td></td>\n<td>use</td>\n<td>工作进程数</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>第三块</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123; </span><br><span class=\"line\">    include /etc/nginx/mime.types; // http的content-type设置 </span><br><span class=\"line\">    <span class=\"attribute\">default_type</span> application/octet-stream; </span><br><span class=\"line\">    <span class=\"attribute\">log_format</span> main <span class=\"string\">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span> <span class=\"string\">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span> <span class=\"string\">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;   </span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/access.log main; </span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>; <span class=\"comment\">#tcp_nopush on; </span></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span> <span class=\"number\">65</span>; <span class=\"comment\">#gzip on; </span></span><br><span class=\"line\">    // 标准的方式是将多个server配置成多个.conf文件放在/etc/nginx/conf.d下include进来 </span><br><span class=\"line\">    <span class=\"comment\">#include /etc/nginx/conf.d/*.conf; </span></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123; </span><br><span class=\"line\">    \t\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\">    \t\t<span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\">    \t\t<span class=\"attribute\">localtion</span> / &#123; </span><br><span class=\"line\">      \t\t<span class=\"attribute\">root</span> .... ;</span><br><span class=\"line\">          <span class=\"attribute\">index</span> .... ; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"attribute\">error_page</span> .... </span><br><span class=\"line\">        localtion = /50x.tml &#123; </span><br><span class=\"line\">      \t\t\t..... </span><br><span class=\"line\">    \t\t&#125; </span><br><span class=\"line\">  \t&#125; </span><br><span class=\"line\">  \tserver &#123; .... &#125; </span><br><span class=\"line\">  \tserver &#123; .... &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>log_format</code>定义access_log的日志内容格式，可自定义。例如添加<code>user_agent</code>信息：<code>$http_User_Agent</code>.</p>\n","site":{"data":{}},"excerpt":"<p>Nginx的安装及相关参数介绍。yum安装nginx后可通过命令rpm -pl nginx查看相关的安装目录。如下:</p>","more":"<ul>\n<li>参数介绍</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>路径</th>\n<th>类型</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/etc/logrotate.d/nginx</td>\n<td>配置文件</td>\n<td>Nginx日志轮转，用于logrotate服务的日志切割</td>\n</tr>\n<tr>\n<td>/etc/nginx /etc/nginx/nginx.conf /etc/nginx/conf.d /etc/nginx/conf.d/default.conf</td>\n<td>目录，配置文件</td>\n<td>nginx主配置文件</td>\n</tr>\n<tr>\n<td>/etc/nginx/fastcgi_params /etc/nginx/uwsgi_params /etc/nginx/scgi_params</td>\n<td>配置文件</td>\n<td>编码转换映射转换文件</td>\n</tr>\n<tr>\n<td>/etc/nginx/mime.types</td>\n<td>配置文件</td>\n<td>设置http协议的content-type与扩展名对应关系</td>\n</tr>\n<tr>\n<td>/usr/lib/systemd/system/nginx-debug.service /usr/lib/systemd/system/nginx.service    /etc/sysconfig/nginx /etc/sysconfig/nginx-debug</td>\n<td>配置文件</td>\n<td>用于配置系统守护进程管理器管理方式</td>\n</tr>\n<tr>\n<td>/usr/lib64/nginx/modules /etc/nginx/modules</td>\n<td>目录</td>\n<td>nginx模块目录</td>\n</tr>\n<tr>\n<td>/usr/sbin/nginx /usr/sbin/nginx-debug</td>\n<td>命令</td>\n<td>nginx服务的启动管理的终端命令</td>\n</tr>\n<tr>\n<td>/usr/share/doc/nginx-版本号 /usr/share/doc/nginx-版本号/COPYRIGHT /usr/share/man/man8/nginx.8.gz</td>\n<td>文件、目录</td>\n<td>ginx手册、帮助文件</td>\n</tr>\n<tr>\n<td>/var/cache/nginx</td>\n<td>目录</td>\n<td>nginx的缓存目录，nginx布景可以用作服务代理，还可以用来做缓存服务</td>\n</tr>\n<tr>\n<td>/var/log/nginx</td>\n<td>目录</td>\n<td>nginx日志目</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>使用<code>nginx -V</code>查看配置参数:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log --http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=<span class=\"string\">&#x27;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC&#x27;</span> --with-ld-opt=<span class=\"string\">&#x27;-Wl,-z,relro -Wl,-z,now -pie&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>编译</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>–prefix=/etc/nginx \\ –sbin-path=/usr/sbin/nginx \\ –modules-path=/usr/lib64/nginx/modules \\ –conf-path=/etc/nginx/nginx.conf \\ –error-log-path=/var/log/nginx/error.log –http-log-path=/var/log/nginx/access.log \\ –pid-path=/var/run/nginx.pid \\ –lock-path=/var/run/nginx.lock</td>\n<td>安装目的目录或路径</td>\n</tr>\n<tr>\n<td>–http-client-body-temp-path=/var/cache/nginx/client_temp \\ –http-proxy-temp-path=/var/cache/nginx/proxy_temp \\ –http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\ –http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\ –http-scgi-temp-path=/var/cache/nginx/scgi_temp</td>\n<td>执行对应的模块时，nginx所保留的临时性文件</td>\n</tr>\n<tr>\n<td>–user=nginx \\ –group=nginx</td>\n<td>设定nginx进程启动的用户和用户组</td>\n</tr>\n</tbody></table>\n<ul>\n<li><code>nginx.conf</code>的配置相关</li>\n</ul>\n<blockquote>\n<p>第一块</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>user</td>\n<td>设置nginx服务的系统使用用户</td>\n</tr>\n<tr>\n<td>worker_processes</td>\n<td>工作进程数，与cpu核数保持一致</td>\n</tr>\n<tr>\n<td>error_log</td>\n<td>nginxd的错误日志</td>\n</tr>\n<tr>\n<td>pid</td>\n<td>nginx服务启动时候的pid</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>第二块</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>模块</th>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>events</td>\n<td>worker_connections</td>\n<td>每个进程允许最大连接数</td>\n</tr>\n<tr>\n<td></td>\n<td>use</td>\n<td>工作进程数</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>第三块</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123; </span><br><span class=\"line\">    include /etc/nginx/mime.types; // http的content-type设置 </span><br><span class=\"line\">    <span class=\"attribute\">default_type</span> application/octet-stream; </span><br><span class=\"line\">    <span class=\"attribute\">log_format</span> main <span class=\"string\">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span> <span class=\"string\">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span> <span class=\"string\">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;   </span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/log/nginx/access.log main; </span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>; <span class=\"comment\">#tcp_nopush on; </span></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span> <span class=\"number\">65</span>; <span class=\"comment\">#gzip on; </span></span><br><span class=\"line\">    // 标准的方式是将多个server配置成多个.conf文件放在/etc/nginx/conf.d下include进来 </span><br><span class=\"line\">    <span class=\"comment\">#include /etc/nginx/conf.d/*.conf; </span></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123; </span><br><span class=\"line\">    \t\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\">    \t\t<span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\">    \t\t<span class=\"attribute\">localtion</span> / &#123; </span><br><span class=\"line\">      \t\t<span class=\"attribute\">root</span> .... ;</span><br><span class=\"line\">          <span class=\"attribute\">index</span> .... ; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"attribute\">error_page</span> .... </span><br><span class=\"line\">        localtion = /50x.tml &#123; </span><br><span class=\"line\">      \t\t\t..... </span><br><span class=\"line\">    \t\t&#125; </span><br><span class=\"line\">  \t&#125; </span><br><span class=\"line\">  \tserver &#123; .... &#125; </span><br><span class=\"line\">  \tserver &#123; .... &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>log_format</code>定义access_log的日志内容格式，可自定义。例如添加<code>user_agent</code>信息：<code>$http_User_Agent</code>.</p>"},{"title":"Nginx深入了解-进阶(一)","date":"2018-07-23T02:22:57.000Z","_content":"\nNginx用来作为静态资源web服务；CDN、浏览器缓存、跨域、防盗链等。\n\n<!-- more -->\n\n非服务器动态运行生成的文件:\n\n| 类型         | 种类                |\n| ------------ | ------------------- |\n| 浏览器端渲染 | HTML、CSS、JS       |\n| 图片         | JPG、GIF、JPEG、PNG |\n| 视频         | FLV、MPEG           |\n| 文件         | TXT等               |\n\n#### 一，静态资源CDN\n\n- 配置语法-文件读取\n\n```nginx\nSyntax：sendfile on|off\nDefault：sendfile off\nContext：http、server、location、if on location\n```\n\n- 配置语法-tcp_nopush(在sendfile开启的情况下，提高网络包的传输效率)\n\n```nginx\nSyntax：tcp_nopush on|off\nDefault：tcp_nopush off\nContext：http、server、location\n```\n\n- 配置语法-tcp_nodelay(在keepalive连接下，提高网络包的传输实时性)\n\n```nginx\nSyntax：tcp_nodelay on|off\nDefault：tcp_nodelay off\nContext：http、server、location\n```\n\n- 配置语法-压缩(压缩传输文件)\n\n```nginx\nSyntax：gzip on|off\nDefault：gzip off\nContext：http、server、location、if on location\n```\n\n```nginx\nSyntax：gzip_comp_level\nDefault：gzip_comp_lvel 1;\nContext：http、server、location\n```\n\n```nginx\nsyntax：gzip_http_version 1.0|1.1\nDefault：gzip_http_version 1.1\nContext：http、server、location\n```\n\n- 扩展Nginx压缩模块\n  - http_gzip_static_module-预读gzip功能\n  - http_gunzip_module-应用支持gunzip压缩方式\n- 配置实例:\n\n```nginx\nserver { \n  ... \n  sendfile on; \n  location ~ .*\\.(jpg|png|gif)$ { \n    gzip on; \n    gzip_http_version 1.1; \n    gzip_comp_level 2; \n    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; \n  } \n  location ~ .*\\.(txt|xml)$ { \n    gzip on; \n    gzip_http_version 1.1; \n    gzip_comp_level 1; \n    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; \n  } \n  location ~ ^/download { \n    gzip on; tcp_nopush on; \n    gzip_static on; \n    ... \n  } \n}\n```\n\n#### 二，浏览器缓存\n\n| 优先级 | 机制                    | 参数                            |\n| ------ | ----------------------- | ------------------------------- |\n| 1      | 校验是否过期            | Expires、Cache-Control(max-age) |\n| 2      | 协议中的Etag头信息校验  | Etag                            |\n| 3      | Last-Modified头信息校验 | Last-Modified                   |\n\n- 配置实例\n\n```nginx\nserver {\n    ...\n    expires 24h;\n}\n```\n\n#### 三，跨域访问\n\n通俗地讲，跨域访问就是在访问某一个网址([www.mantis.me](http://www.mantis.me/)) 的同时访问另一个网址([www.xxx.com](http://www.xxx.com/)) ，对于浏览器来说这是不允许的，因为容易出现CRSF攻击，浏览器会阻止这种行为。\n\n- 配置语法:\n\n```nginx\nSyntax：add_header name value [always]\nDefault：–\nContext：http、server、location、if in location\n```\n\n浏览器会检查Access-Control-Allow-Origin对应的值，提示错误：\n\n```http\nXMLHttpRequest cannot load http://www.mantis.me/. The ‘Access-Control-Allow-Origin’ header has a value ‘http://www.xxx.com' that is not equal to the supplied origin. Origin ‘http://www.mantis.me/' is therefore not allowed access.\n```\n\n- 配置实例:\n\n```nginx\nserver { \n  ... \n  location ~ .*\\.(html|htm)$ { \n    ... \n    add_header Access-Control-Allow-Origin www.xxx.com; // 允许所有可以设置为*(不建议，容易被跨域攻击) \n    add_header Access-Control-Allow-Methods POST,GET,OPTIONS,PUT,DELETE; \n  } \n}\n```\n\n#### 四，防盗链\n\n防止资源被盗用，其他网站盗用我们网站的资源链接信息导致资源信息被盗用同时还有可能导致我们服务器的压力增大。\n\n- http_refer防盗链配置\n\n```nginx\nSyntax：valid_referers none|blocked|server_names|string…;\nDefault：—\nContext：server、location\n```\n\n- 配置实例:\n\n```nginx\nserver { \n  location ~ .*\\.(jpg|jpeg|png|gif)$ { \n    ... \n    valid_referers blocked www.mantis.me ~/baidu\\./;// 这里只允许refer头为www.mantis.me的地址和baidu搜索过来的，可以便于seo优化 \n    if ($invalid_referer) { \n      return 403; \n    } \n  } \n}\n```\n\n","source":"_posts/Nginx深入了解-进阶-一.md","raw":"---\ntitle: Nginx深入了解-进阶(一)\ndate: 2018-07-23 10:22:57\ntags: nginx\n---\n\nNginx用来作为静态资源web服务；CDN、浏览器缓存、跨域、防盗链等。\n\n<!-- more -->\n\n非服务器动态运行生成的文件:\n\n| 类型         | 种类                |\n| ------------ | ------------------- |\n| 浏览器端渲染 | HTML、CSS、JS       |\n| 图片         | JPG、GIF、JPEG、PNG |\n| 视频         | FLV、MPEG           |\n| 文件         | TXT等               |\n\n#### 一，静态资源CDN\n\n- 配置语法-文件读取\n\n```nginx\nSyntax：sendfile on|off\nDefault：sendfile off\nContext：http、server、location、if on location\n```\n\n- 配置语法-tcp_nopush(在sendfile开启的情况下，提高网络包的传输效率)\n\n```nginx\nSyntax：tcp_nopush on|off\nDefault：tcp_nopush off\nContext：http、server、location\n```\n\n- 配置语法-tcp_nodelay(在keepalive连接下，提高网络包的传输实时性)\n\n```nginx\nSyntax：tcp_nodelay on|off\nDefault：tcp_nodelay off\nContext：http、server、location\n```\n\n- 配置语法-压缩(压缩传输文件)\n\n```nginx\nSyntax：gzip on|off\nDefault：gzip off\nContext：http、server、location、if on location\n```\n\n```nginx\nSyntax：gzip_comp_level\nDefault：gzip_comp_lvel 1;\nContext：http、server、location\n```\n\n```nginx\nsyntax：gzip_http_version 1.0|1.1\nDefault：gzip_http_version 1.1\nContext：http、server、location\n```\n\n- 扩展Nginx压缩模块\n  - http_gzip_static_module-预读gzip功能\n  - http_gunzip_module-应用支持gunzip压缩方式\n- 配置实例:\n\n```nginx\nserver { \n  ... \n  sendfile on; \n  location ~ .*\\.(jpg|png|gif)$ { \n    gzip on; \n    gzip_http_version 1.1; \n    gzip_comp_level 2; \n    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; \n  } \n  location ~ .*\\.(txt|xml)$ { \n    gzip on; \n    gzip_http_version 1.1; \n    gzip_comp_level 1; \n    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; \n  } \n  location ~ ^/download { \n    gzip on; tcp_nopush on; \n    gzip_static on; \n    ... \n  } \n}\n```\n\n#### 二，浏览器缓存\n\n| 优先级 | 机制                    | 参数                            |\n| ------ | ----------------------- | ------------------------------- |\n| 1      | 校验是否过期            | Expires、Cache-Control(max-age) |\n| 2      | 协议中的Etag头信息校验  | Etag                            |\n| 3      | Last-Modified头信息校验 | Last-Modified                   |\n\n- 配置实例\n\n```nginx\nserver {\n    ...\n    expires 24h;\n}\n```\n\n#### 三，跨域访问\n\n通俗地讲，跨域访问就是在访问某一个网址([www.mantis.me](http://www.mantis.me/)) 的同时访问另一个网址([www.xxx.com](http://www.xxx.com/)) ，对于浏览器来说这是不允许的，因为容易出现CRSF攻击，浏览器会阻止这种行为。\n\n- 配置语法:\n\n```nginx\nSyntax：add_header name value [always]\nDefault：–\nContext：http、server、location、if in location\n```\n\n浏览器会检查Access-Control-Allow-Origin对应的值，提示错误：\n\n```http\nXMLHttpRequest cannot load http://www.mantis.me/. The ‘Access-Control-Allow-Origin’ header has a value ‘http://www.xxx.com' that is not equal to the supplied origin. Origin ‘http://www.mantis.me/' is therefore not allowed access.\n```\n\n- 配置实例:\n\n```nginx\nserver { \n  ... \n  location ~ .*\\.(html|htm)$ { \n    ... \n    add_header Access-Control-Allow-Origin www.xxx.com; // 允许所有可以设置为*(不建议，容易被跨域攻击) \n    add_header Access-Control-Allow-Methods POST,GET,OPTIONS,PUT,DELETE; \n  } \n}\n```\n\n#### 四，防盗链\n\n防止资源被盗用，其他网站盗用我们网站的资源链接信息导致资源信息被盗用同时还有可能导致我们服务器的压力增大。\n\n- http_refer防盗链配置\n\n```nginx\nSyntax：valid_referers none|blocked|server_names|string…;\nDefault：—\nContext：server、location\n```\n\n- 配置实例:\n\n```nginx\nserver { \n  location ~ .*\\.(jpg|jpeg|png|gif)$ { \n    ... \n    valid_referers blocked www.mantis.me ~/baidu\\./;// 这里只允许refer头为www.mantis.me的地址和baidu搜索过来的，可以便于seo优化 \n    if ($invalid_referer) { \n      return 403; \n    } \n  } \n}\n```\n\n","slug":"Nginx深入了解-进阶-一","published":1,"updated":"2021-03-11T01:39:49.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb2f000vw7c96taceh6k","content":"<p>Nginx用来作为静态资源web服务；CDN、浏览器缓存、跨域、防盗链等。</p>\n<span id=\"more\"></span>\n\n<p>非服务器动态运行生成的文件:</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>种类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>浏览器端渲染</td>\n<td>HTML、CSS、JS</td>\n</tr>\n<tr>\n<td>图片</td>\n<td>JPG、GIF、JPEG、PNG</td>\n</tr>\n<tr>\n<td>视频</td>\n<td>FLV、MPEG</td>\n</tr>\n<tr>\n<td>文件</td>\n<td>TXT等</td>\n</tr>\n</tbody></table>\n<h4 id=\"一，静态资源CDN\"><a href=\"#一，静态资源CDN\" class=\"headerlink\" title=\"一，静态资源CDN\"></a>一，静态资源CDN</h4><ul>\n<li>配置语法-文件读取</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：sendfile on|off</span><br><span class=\"line\">Default：sendfile off</span><br><span class=\"line\">Context：http、server、location、if on location</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置语法-tcp_nopush(在sendfile开启的情况下，提高网络包的传输效率)</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：tcp_nopush on|off</span><br><span class=\"line\">Default：tcp_nopush off</span><br><span class=\"line\">Context：http、server、location</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置语法-tcp_nodelay(在keepalive连接下，提高网络包的传输实时性)</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：tcp_nodelay on|off</span><br><span class=\"line\">Default：tcp_nodelay off</span><br><span class=\"line\">Context：http、server、location</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置语法-压缩(压缩传输文件)</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：gzip on|off</span><br><span class=\"line\">Default：gzip off</span><br><span class=\"line\">Context：http、server、location、if on location</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：gzip_comp_level</span><br><span class=\"line\">Default：gzip_comp_lvel 1;</span><br><span class=\"line\">Context：http、server、location</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax：gzip_http_version 1.0|1.1</span><br><span class=\"line\">Default：gzip_http_version 1.1</span><br><span class=\"line\">Context：http、server、location</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>扩展Nginx压缩模块<ul>\n<li>http_gzip_static_module-预读gzip功能</li>\n<li>http_gunzip_module-应用支持gunzip压缩方式</li>\n</ul>\n</li>\n<li>配置实例:</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  <span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>; </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ .*\\.(jpg|png|gif)$</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>; </span><br><span class=\"line\">    <span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">2</span>; </span><br><span class=\"line\">    <span class=\"attribute\">gzip_types</span> text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ .*\\.(txt|xml)$</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>; </span><br><span class=\"line\">    <span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"attribute\">gzip_types</span> text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ ^/download</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>; <span class=\"attribute\">tcp_nopush</span> <span class=\"literal\">on</span>; </span><br><span class=\"line\">    <span class=\"attribute\">gzip_static</span> <span class=\"literal\">on</span>; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二，浏览器缓存\"><a href=\"#二，浏览器缓存\" class=\"headerlink\" title=\"二，浏览器缓存\"></a>二，浏览器缓存</h4><table>\n<thead>\n<tr>\n<th>优先级</th>\n<th>机制</th>\n<th>参数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>校验是否过期</td>\n<td>Expires、Cache-Control(max-age)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>协议中的Etag头信息校验</td>\n<td>Etag</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Last-Modified头信息校验</td>\n<td>Last-Modified</td>\n</tr>\n</tbody></table>\n<ul>\n<li>配置实例</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attribute\">expires</span> <span class=\"number\">24h</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三，跨域访问\"><a href=\"#三，跨域访问\" class=\"headerlink\" title=\"三，跨域访问\"></a>三，跨域访问</h4><p>通俗地讲，跨域访问就是在访问某一个网址(<a href=\"http://www.mantis.me/\">www.mantis.me</a>) 的同时访问另一个网址(<a href=\"http://www.xxx.com/\">www.xxx.com</a>) ，对于浏览器来说这是不允许的，因为容易出现CRSF攻击，浏览器会阻止这种行为。</p>\n<ul>\n<li>配置语法:</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：add_header name value [always]</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：http、server、location、if in location</span><br></pre></td></tr></table></figure>\n\n<p>浏览器会检查Access-Control-Allow-Origin对应的值，提示错误：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XMLHttpRequest cannot load http://www.mantis.me/. The ‘Access-Control-Allow-Origin’ header has a value ‘http://www.xxx.com&#x27; that is not equal to the supplied origin. Origin ‘http://www.mantis.me/&#x27; is therefore not allowed access.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置实例:</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ .*\\.(html|htm)$</span> &#123; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">    add_header Access-Control-Allow-Origin www.xxx.com; // 允许所有可以设置为*(不建议，容易被跨域攻击) </span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Access-Control-Allow-Methods POST,GET,OPTIONS,PUT,DELETE; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四，防盗链\"><a href=\"#四，防盗链\" class=\"headerlink\" title=\"四，防盗链\"></a>四，防盗链</h4><p>防止资源被盗用，其他网站盗用我们网站的资源链接信息导致资源信息被盗用同时还有可能导致我们服务器的压力增大。</p>\n<ul>\n<li>http_refer防盗链配置</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：valid_referers none|blocked|server_names|string…;</span><br><span class=\"line\">Default：—</span><br><span class=\"line\">Context：server、location</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置实例:</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ .*\\.(jpg|jpeg|png|gif)$</span> &#123; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">    valid_referers blocked www.mantis.me ~/baidu\\./;// 这里只允许refer头为www.mantis.me的地址和baidu搜索过来的，可以便于seo优化 </span><br><span class=\"line\">    <span class=\"attribute\">if</span> ($invalid_referer) &#123; </span><br><span class=\"line\">      <span class=\"attribute\">return</span> <span class=\"number\">403</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>Nginx用来作为静态资源web服务；CDN、浏览器缓存、跨域、防盗链等。</p>","more":"<p>非服务器动态运行生成的文件:</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>种类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>浏览器端渲染</td>\n<td>HTML、CSS、JS</td>\n</tr>\n<tr>\n<td>图片</td>\n<td>JPG、GIF、JPEG、PNG</td>\n</tr>\n<tr>\n<td>视频</td>\n<td>FLV、MPEG</td>\n</tr>\n<tr>\n<td>文件</td>\n<td>TXT等</td>\n</tr>\n</tbody></table>\n<h4 id=\"一，静态资源CDN\"><a href=\"#一，静态资源CDN\" class=\"headerlink\" title=\"一，静态资源CDN\"></a>一，静态资源CDN</h4><ul>\n<li>配置语法-文件读取</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：sendfile on|off</span><br><span class=\"line\">Default：sendfile off</span><br><span class=\"line\">Context：http、server、location、if on location</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置语法-tcp_nopush(在sendfile开启的情况下，提高网络包的传输效率)</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：tcp_nopush on|off</span><br><span class=\"line\">Default：tcp_nopush off</span><br><span class=\"line\">Context：http、server、location</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置语法-tcp_nodelay(在keepalive连接下，提高网络包的传输实时性)</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：tcp_nodelay on|off</span><br><span class=\"line\">Default：tcp_nodelay off</span><br><span class=\"line\">Context：http、server、location</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置语法-压缩(压缩传输文件)</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：gzip on|off</span><br><span class=\"line\">Default：gzip off</span><br><span class=\"line\">Context：http、server、location、if on location</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：gzip_comp_level</span><br><span class=\"line\">Default：gzip_comp_lvel 1;</span><br><span class=\"line\">Context：http、server、location</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax：gzip_http_version 1.0|1.1</span><br><span class=\"line\">Default：gzip_http_version 1.1</span><br><span class=\"line\">Context：http、server、location</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>扩展Nginx压缩模块<ul>\n<li>http_gzip_static_module-预读gzip功能</li>\n<li>http_gunzip_module-应用支持gunzip压缩方式</li>\n</ul>\n</li>\n<li>配置实例:</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  <span class=\"attribute\">sendfile</span> <span class=\"literal\">on</span>; </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ .*\\.(jpg|png|gif)$</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>; </span><br><span class=\"line\">    <span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">2</span>; </span><br><span class=\"line\">    <span class=\"attribute\">gzip_types</span> text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ .*\\.(txt|xml)$</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>; </span><br><span class=\"line\">    <span class=\"attribute\">gzip_http_version</span> <span class=\"number\">1</span>.<span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"attribute\">gzip_comp_level</span> <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"attribute\">gzip_types</span> text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ ^/download</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>; <span class=\"attribute\">tcp_nopush</span> <span class=\"literal\">on</span>; </span><br><span class=\"line\">    <span class=\"attribute\">gzip_static</span> <span class=\"literal\">on</span>; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二，浏览器缓存\"><a href=\"#二，浏览器缓存\" class=\"headerlink\" title=\"二，浏览器缓存\"></a>二，浏览器缓存</h4><table>\n<thead>\n<tr>\n<th>优先级</th>\n<th>机制</th>\n<th>参数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>校验是否过期</td>\n<td>Expires、Cache-Control(max-age)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>协议中的Etag头信息校验</td>\n<td>Etag</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Last-Modified头信息校验</td>\n<td>Last-Modified</td>\n</tr>\n</tbody></table>\n<ul>\n<li>配置实例</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attribute\">expires</span> <span class=\"number\">24h</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三，跨域访问\"><a href=\"#三，跨域访问\" class=\"headerlink\" title=\"三，跨域访问\"></a>三，跨域访问</h4><p>通俗地讲，跨域访问就是在访问某一个网址(<a href=\"http://www.mantis.me/\">www.mantis.me</a>) 的同时访问另一个网址(<a href=\"http://www.xxx.com/\">www.xxx.com</a>) ，对于浏览器来说这是不允许的，因为容易出现CRSF攻击，浏览器会阻止这种行为。</p>\n<ul>\n<li>配置语法:</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：add_header name value [always]</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：http、server、location、if in location</span><br></pre></td></tr></table></figure>\n\n<p>浏览器会检查Access-Control-Allow-Origin对应的值，提示错误：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XMLHttpRequest cannot load http://www.mantis.me/. The ‘Access-Control-Allow-Origin’ header has a value ‘http://www.xxx.com&#x27; that is not equal to the supplied origin. Origin ‘http://www.mantis.me/&#x27; is therefore not allowed access.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置实例:</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ .*\\.(html|htm)$</span> &#123; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">    add_header Access-Control-Allow-Origin www.xxx.com; // 允许所有可以设置为*(不建议，容易被跨域攻击) </span><br><span class=\"line\">    <span class=\"attribute\">add_header</span> Access-Control-Allow-Methods POST,GET,OPTIONS,PUT,DELETE; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四，防盗链\"><a href=\"#四，防盗链\" class=\"headerlink\" title=\"四，防盗链\"></a>四，防盗链</h4><p>防止资源被盗用，其他网站盗用我们网站的资源链接信息导致资源信息被盗用同时还有可能导致我们服务器的压力增大。</p>\n<ul>\n<li>http_refer防盗链配置</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：valid_referers none|blocked|server_names|string…;</span><br><span class=\"line\">Default：—</span><br><span class=\"line\">Context：server、location</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置实例:</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ .*\\.(jpg|jpeg|png|gif)$</span> &#123; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">    valid_referers blocked www.mantis.me ~/baidu\\./;// 这里只允许refer头为www.mantis.me的地址和baidu搜索过来的，可以便于seo优化 </span><br><span class=\"line\">    <span class=\"attribute\">if</span> ($invalid_referer) &#123; </span><br><span class=\"line\">      <span class=\"attribute\">return</span> <span class=\"number\">403</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Nginx深入了解-进阶(三)","date":"2018-08-11T01:44:36.000Z","_content":"\nNginx负载均衡(Load Balance，简称LB)是一种服务器或网络设备的集群技术。负载均衡将特定的业务(网络服务、网络流量等)分担给多个服务器或网络设备，从而提高了业务处理能力，保证了业务的高可用性。\n\n<!-- more -->\n\n- Nginx负载均衡示意图:\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190215114531.png)\n\nNginx负载均衡原理就是将所有客户端的请求通过proxy_pass代理转发到对应的一组后端服务器upstream server上。\n\n- 配置语法:\n\n```nginx\nSyntax：upstream name {…}\n\nDefault：–\n\nContext：http\n```\n\n- 配置实例\n\n> 后端服务器组upstream server\n\n```nginx\n#server1 \nserver { \n    listen 8001; \n    server_name localhost; \n    access_log /var/logs/nginx/access.log main; \n    location / { \n        root /opt/app/code; \n        index index.html index.htm index.php; \n    }\n    ... \n}\n```\n\n```nginx\n#server2 \nserver { \n    listen 8002; \n    server_name localhost; \n    access_log /var/logs/nginx/access.log main; \n    location / { \n        root /opt/app/code; \n        index index.html index.htm index.php; \n    } \n    ... \n}\n```\n\n```nginx\n#server3\nserver { \n    listen 8003; \n    server_name localhost; \n    access_log /var/logs/nginx/access.log main; \n    location / { \n        root /opt/app/code; \n        index index.html index.htm index.php; \n    } \n    ... \n}\n```\n\n> 负载均衡服务器main server\n\n```nginx\n#默认使用轮询机制 \nupstream test { \n    server 114.249.225.223:8001 down; \n    server 114.249.225.223:8002 backup; \n    server 114.249.225.223:8003 max_fails=1 fail_timeout=30s; // 允许失败一次，超过30s则直接访问8002 \n} \n\n#加权 \nupstream test { \n    server 114.249.225.223:8001; \n    server 114.249.225.223:8002; \n    server 114.249.225.223:8003 weight=5; \n} \n\n#ip_hash \nupstream test { \n    ip_hash; \n    server 114.249.225.223:8001; \n    server 114.249.225.223:8002; \n    server 114.249.225.223:8003; \n} \n\n#url_hash \nupstream test { \n    hash $request_uri; \n    server 114.249.225.223:8001; \n    server 114.249.225.223:8002; \n    server 114.249.225.223:8003; \n} \n\nserver { \n    listen 80; \n    server_name localhost www.mantis.me; \n    access_log /var/logs/nginx/access.log main; \n    location / { \n        proxy_pass http://test; \n        include proxy_params; \n    } \n    ... \n}\n```\n\n> 后端服务器在负载均衡调度中的状态:\n\n|参数|说明|\n|---|---|\n|down|当前的server暂时不参与负载均衡|\n|backup|预留的备份服务器|\n|max_fails|允许请求失败的次数|\n|fail_timeout|经过max_fails失败后，服务暂停的时间|\n|max_conns|限制最大连接数|\n\n> 调度算法:\n\n|算法|说明|\n|---|---|\n|轮询(默认)|按时间顺序逐一分配到不同的后端服务器|\n|加权轮询|weight越大，分配到的访问几率越高|\n|ip_hash|每个请求按访问ip的hash结果分配，这样来自同一个ip的请求将固定访问到同一个后端服务器|\n|url_hash|按照访问的url的hash结果来分配请求，是每个url定向到同一个后端服务器|\n|least_conn|最少连接数，哪个机器连接数少就分发到哪个机器|\n|hash关键数值|hash自定义的key|","source":"_posts/Nginx深入了解-进阶-三.md","raw":"---\ntitle: Nginx深入了解-进阶(三)\ndate: 2018-08-11 09:44:36\ntags: nginx\n---\n\nNginx负载均衡(Load Balance，简称LB)是一种服务器或网络设备的集群技术。负载均衡将特定的业务(网络服务、网络流量等)分担给多个服务器或网络设备，从而提高了业务处理能力，保证了业务的高可用性。\n\n<!-- more -->\n\n- Nginx负载均衡示意图:\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190215114531.png)\n\nNginx负载均衡原理就是将所有客户端的请求通过proxy_pass代理转发到对应的一组后端服务器upstream server上。\n\n- 配置语法:\n\n```nginx\nSyntax：upstream name {…}\n\nDefault：–\n\nContext：http\n```\n\n- 配置实例\n\n> 后端服务器组upstream server\n\n```nginx\n#server1 \nserver { \n    listen 8001; \n    server_name localhost; \n    access_log /var/logs/nginx/access.log main; \n    location / { \n        root /opt/app/code; \n        index index.html index.htm index.php; \n    }\n    ... \n}\n```\n\n```nginx\n#server2 \nserver { \n    listen 8002; \n    server_name localhost; \n    access_log /var/logs/nginx/access.log main; \n    location / { \n        root /opt/app/code; \n        index index.html index.htm index.php; \n    } \n    ... \n}\n```\n\n```nginx\n#server3\nserver { \n    listen 8003; \n    server_name localhost; \n    access_log /var/logs/nginx/access.log main; \n    location / { \n        root /opt/app/code; \n        index index.html index.htm index.php; \n    } \n    ... \n}\n```\n\n> 负载均衡服务器main server\n\n```nginx\n#默认使用轮询机制 \nupstream test { \n    server 114.249.225.223:8001 down; \n    server 114.249.225.223:8002 backup; \n    server 114.249.225.223:8003 max_fails=1 fail_timeout=30s; // 允许失败一次，超过30s则直接访问8002 \n} \n\n#加权 \nupstream test { \n    server 114.249.225.223:8001; \n    server 114.249.225.223:8002; \n    server 114.249.225.223:8003 weight=5; \n} \n\n#ip_hash \nupstream test { \n    ip_hash; \n    server 114.249.225.223:8001; \n    server 114.249.225.223:8002; \n    server 114.249.225.223:8003; \n} \n\n#url_hash \nupstream test { \n    hash $request_uri; \n    server 114.249.225.223:8001; \n    server 114.249.225.223:8002; \n    server 114.249.225.223:8003; \n} \n\nserver { \n    listen 80; \n    server_name localhost www.mantis.me; \n    access_log /var/logs/nginx/access.log main; \n    location / { \n        proxy_pass http://test; \n        include proxy_params; \n    } \n    ... \n}\n```\n\n> 后端服务器在负载均衡调度中的状态:\n\n|参数|说明|\n|---|---|\n|down|当前的server暂时不参与负载均衡|\n|backup|预留的备份服务器|\n|max_fails|允许请求失败的次数|\n|fail_timeout|经过max_fails失败后，服务暂停的时间|\n|max_conns|限制最大连接数|\n\n> 调度算法:\n\n|算法|说明|\n|---|---|\n|轮询(默认)|按时间顺序逐一分配到不同的后端服务器|\n|加权轮询|weight越大，分配到的访问几率越高|\n|ip_hash|每个请求按访问ip的hash结果分配，这样来自同一个ip的请求将固定访问到同一个后端服务器|\n|url_hash|按照访问的url的hash结果来分配请求，是每个url定向到同一个后端服务器|\n|least_conn|最少连接数，哪个机器连接数少就分发到哪个机器|\n|hash关键数值|hash自定义的key|","slug":"Nginx深入了解-进阶-三","published":1,"updated":"2021-03-11T01:39:54.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb2g000xw7c9cv7a757c","content":"<p>Nginx负载均衡(Load Balance，简称LB)是一种服务器或网络设备的集群技术。负载均衡将特定的业务(网络服务、网络流量等)分担给多个服务器或网络设备，从而提高了业务处理能力，保证了业务的高可用性。</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>Nginx负载均衡示意图:</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190215114531.png\"></p>\n<p>Nginx负载均衡原理就是将所有客户端的请求通过proxy_pass代理转发到对应的一组后端服务器upstream server上。</p>\n<ul>\n<li>配置语法:</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：upstream name &#123;…&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Default：–</span><br><span class=\"line\"></span><br><span class=\"line\">Context：http</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置实例</li>\n</ul>\n<blockquote>\n<p>后端服务器组upstream server</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#server1 </span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">8001</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/logs/nginx/access.log main; </span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">        <span class=\"attribute\">root</span> /opt/app/code; </span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.html index.htm index.php; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ... </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#server2 </span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">8002</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/logs/nginx/access.log main; </span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">        <span class=\"attribute\">root</span> /opt/app/code; </span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.html index.htm index.php; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#server3</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">8003</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/logs/nginx/access.log main; </span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">        <span class=\"attribute\">root</span> /opt/app/code; </span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.html index.htm index.php; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>负载均衡服务器main server</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#默认使用轮询机制 </span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> test &#123; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8001</span> down; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8002</span> backup; </span><br><span class=\"line\">    server 114.249.225.223:8003 max_fails=1 fail_timeout=30s; // 允许失败一次，超过30s则直接访问8002 </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#加权 </span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> test &#123; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8001</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8002</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8003</span> weight=<span class=\"number\">5</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ip_hash </span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> test &#123; </span><br><span class=\"line\">    ip_hash; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8001</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8002</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8003</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#url_hash </span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> test &#123; </span><br><span class=\"line\">    <span class=\"attribute\">hash</span> $request_uri; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8001</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8002</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8003</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost www.mantis.me; </span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/logs/nginx/access.log main; </span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://test; </span><br><span class=\"line\">        <span class=\"attribute\">include</span> proxy_params; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>后端服务器在负载均衡调度中的状态:</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>down</td>\n<td>当前的server暂时不参与负载均衡</td>\n</tr>\n<tr>\n<td>backup</td>\n<td>预留的备份服务器</td>\n</tr>\n<tr>\n<td>max_fails</td>\n<td>允许请求失败的次数</td>\n</tr>\n<tr>\n<td>fail_timeout</td>\n<td>经过max_fails失败后，服务暂停的时间</td>\n</tr>\n<tr>\n<td>max_conns</td>\n<td>限制最大连接数</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>调度算法:</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>轮询(默认)</td>\n<td>按时间顺序逐一分配到不同的后端服务器</td>\n</tr>\n<tr>\n<td>加权轮询</td>\n<td>weight越大，分配到的访问几率越高</td>\n</tr>\n<tr>\n<td>ip_hash</td>\n<td>每个请求按访问ip的hash结果分配，这样来自同一个ip的请求将固定访问到同一个后端服务器</td>\n</tr>\n<tr>\n<td>url_hash</td>\n<td>按照访问的url的hash结果来分配请求，是每个url定向到同一个后端服务器</td>\n</tr>\n<tr>\n<td>least_conn</td>\n<td>最少连接数，哪个机器连接数少就分发到哪个机器</td>\n</tr>\n<tr>\n<td>hash关键数值</td>\n<td>hash自定义的key</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<p>Nginx负载均衡(Load Balance，简称LB)是一种服务器或网络设备的集群技术。负载均衡将特定的业务(网络服务、网络流量等)分担给多个服务器或网络设备，从而提高了业务处理能力，保证了业务的高可用性。</p>","more":"<ul>\n<li>Nginx负载均衡示意图:</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190215114531.png\"></p>\n<p>Nginx负载均衡原理就是将所有客户端的请求通过proxy_pass代理转发到对应的一组后端服务器upstream server上。</p>\n<ul>\n<li>配置语法:</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：upstream name &#123;…&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Default：–</span><br><span class=\"line\"></span><br><span class=\"line\">Context：http</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置实例</li>\n</ul>\n<blockquote>\n<p>后端服务器组upstream server</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#server1 </span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">8001</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/logs/nginx/access.log main; </span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">        <span class=\"attribute\">root</span> /opt/app/code; </span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.html index.htm index.php; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ... </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#server2 </span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">8002</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/logs/nginx/access.log main; </span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">        <span class=\"attribute\">root</span> /opt/app/code; </span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.html index.htm index.php; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#server3</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">8003</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/logs/nginx/access.log main; </span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">        <span class=\"attribute\">root</span> /opt/app/code; </span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.html index.htm index.php; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>负载均衡服务器main server</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#默认使用轮询机制 </span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> test &#123; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8001</span> down; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8002</span> backup; </span><br><span class=\"line\">    server 114.249.225.223:8003 max_fails=1 fail_timeout=30s; // 允许失败一次，超过30s则直接访问8002 </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#加权 </span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> test &#123; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8001</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8002</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8003</span> weight=<span class=\"number\">5</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ip_hash </span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> test &#123; </span><br><span class=\"line\">    ip_hash; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8001</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8002</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8003</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#url_hash </span></span><br><span class=\"line\"><span class=\"attribute\">upstream</span> test &#123; </span><br><span class=\"line\">    <span class=\"attribute\">hash</span> $request_uri; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8001</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8002</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server</span> <span class=\"number\">114.249.225.223:8003</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost www.mantis.me; </span><br><span class=\"line\">    <span class=\"attribute\">access_log</span> /var/logs/nginx/access.log main; </span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://test; </span><br><span class=\"line\">        <span class=\"attribute\">include</span> proxy_params; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>后端服务器在负载均衡调度中的状态:</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>down</td>\n<td>当前的server暂时不参与负载均衡</td>\n</tr>\n<tr>\n<td>backup</td>\n<td>预留的备份服务器</td>\n</tr>\n<tr>\n<td>max_fails</td>\n<td>允许请求失败的次数</td>\n</tr>\n<tr>\n<td>fail_timeout</td>\n<td>经过max_fails失败后，服务暂停的时间</td>\n</tr>\n<tr>\n<td>max_conns</td>\n<td>限制最大连接数</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>调度算法:</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>轮询(默认)</td>\n<td>按时间顺序逐一分配到不同的后端服务器</td>\n</tr>\n<tr>\n<td>加权轮询</td>\n<td>weight越大，分配到的访问几率越高</td>\n</tr>\n<tr>\n<td>ip_hash</td>\n<td>每个请求按访问ip的hash结果分配，这样来自同一个ip的请求将固定访问到同一个后端服务器</td>\n</tr>\n<tr>\n<td>url_hash</td>\n<td>按照访问的url的hash结果来分配请求，是每个url定向到同一个后端服务器</td>\n</tr>\n<tr>\n<td>least_conn</td>\n<td>最少连接数，哪个机器连接数少就分发到哪个机器</td>\n</tr>\n<tr>\n<td>hash关键数值</td>\n<td>hash自定义的key</td>\n</tr>\n</tbody></table>"},{"title":"Nginx深入了解-进阶(二)","date":"2018-08-05T02:14:45.000Z","_content":"\nNginx作为代理服务.正向代理：代理对象为客户端.反向代理：代理对象为服务端.\n\n<!-- more -->\n\n- 反向代理\n\n> 配置语法:\n\n```nginx\nSyntax：proxy_pass URL\nDefault：–\nContext：location、if in location、limit_except\n```\n\n> 配置实例:\n\n```nginx\n#server1 \nserver { \n    ... \n    listen 8080; \n    server_name localhost; \n    ... \n    location / { \n        root /opt/htdocs/html; \n        index index.html index.htm index.php; \n    } \n} \n\n#server2 \nserver { \n    listen 80; \n    server_name localhost; \n    ... \n    location ~/reg$ { \n        proxy_pass http://127.0.0.1:8080; // 反向代理8080 \n    } \n}\n```\n\n- 正向代理\n\n如果我们只允许某一个特定的ip访问，则可要考虑使用正向代理来实现.\n\n> 客户端服务配置实例:\n\n```nginx\nserver { \n  listen 80; \n  server_name www.mantis.me; \n  ... \n  location / { \n    if ($http_x_forwarded_for !~* \"114\\.249\\.225\\.223\") { // 只允许114.249.225.223访问return 403; \n    } \n  } \n}\n```\n\n> 114.249.225.233服务器配置:\n\n```agin\n\n```\n\n```nginx\nserver { \n  listen 80; \n  server_name www.mantis.me; \n  ... \n  resolver 8.8.8.8; // dns \n  location / { \n    proxy_pass http://$http_host$request_uri; \n  } \n}\n```\n\n客户端使用代理工具配置代理服务器，例如mac系统自带、google扩展工具SwitchySharp等，配置相应的http代理服务器地址。\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190215115049.png)\n\n在浏览器输入[www.mantis.me即可访问](http://www.mantis.xn--me-h95cksq64t60m./).\n\n","source":"_posts/Nginx深入了解-进阶-二.md","raw":"---\ntitle: Nginx深入了解-进阶(二)\ndate: 2018-08-05 10:14:45\ntags: nginx\n---\n\nNginx作为代理服务.正向代理：代理对象为客户端.反向代理：代理对象为服务端.\n\n<!-- more -->\n\n- 反向代理\n\n> 配置语法:\n\n```nginx\nSyntax：proxy_pass URL\nDefault：–\nContext：location、if in location、limit_except\n```\n\n> 配置实例:\n\n```nginx\n#server1 \nserver { \n    ... \n    listen 8080; \n    server_name localhost; \n    ... \n    location / { \n        root /opt/htdocs/html; \n        index index.html index.htm index.php; \n    } \n} \n\n#server2 \nserver { \n    listen 80; \n    server_name localhost; \n    ... \n    location ~/reg$ { \n        proxy_pass http://127.0.0.1:8080; // 反向代理8080 \n    } \n}\n```\n\n- 正向代理\n\n如果我们只允许某一个特定的ip访问，则可要考虑使用正向代理来实现.\n\n> 客户端服务配置实例:\n\n```nginx\nserver { \n  listen 80; \n  server_name www.mantis.me; \n  ... \n  location / { \n    if ($http_x_forwarded_for !~* \"114\\.249\\.225\\.223\") { // 只允许114.249.225.223访问return 403; \n    } \n  } \n}\n```\n\n> 114.249.225.233服务器配置:\n\n```agin\n\n```\n\n```nginx\nserver { \n  listen 80; \n  server_name www.mantis.me; \n  ... \n  resolver 8.8.8.8; // dns \n  location / { \n    proxy_pass http://$http_host$request_uri; \n  } \n}\n```\n\n客户端使用代理工具配置代理服务器，例如mac系统自带、google扩展工具SwitchySharp等，配置相应的http代理服务器地址。\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190215115049.png)\n\n在浏览器输入[www.mantis.me即可访问](http://www.mantis.xn--me-h95cksq64t60m./).\n\n","slug":"Nginx深入了解-进阶-二","published":1,"updated":"2021-03-11T01:40:00.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb2h0010w7c91p8c1nxp","content":"<p>Nginx作为代理服务.正向代理：代理对象为客户端.反向代理：代理对象为服务端.</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>反向代理</li>\n</ul>\n<blockquote>\n<p>配置语法:</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：proxy_pass URL</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：location、if in location、limit_except</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置实例:</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#server1 </span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">8080</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">        <span class=\"attribute\">root</span> /opt/htdocs/html; </span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.html index.htm index.php; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#server2 </span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">    <span class=\"attribute\">location</span> ~/reg$ &#123; </span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8080; // 反向代理8080 </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>正向代理</li>\n</ul>\n<p>如果我们只允许某一个特定的ip访问，则可要考虑使用正向代理来实现.</p>\n<blockquote>\n<p>客户端服务配置实例:</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> www.mantis.me; </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">    if ($http_x_forwarded_for !~* &quot;114\\.249\\.225\\.223&quot;) &#123; // 只允许114.249.225.223访问return 403; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>114.249.225.233服务器配置:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> www.mantis.me; </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  resolver 8.8.8.8; // dns </span><br><span class=\"line\">  <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://$http_host$request_uri; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>客户端使用代理工具配置代理服务器，例如mac系统自带、google扩展工具SwitchySharp等，配置相应的http代理服务器地址。</p>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190215115049.png\"></p>\n<p>在浏览器输入<a href=\"http://www.mantis.me即可访问./\">www.mantis.me即可访问</a>.</p>\n","site":{"data":{}},"excerpt":"<p>Nginx作为代理服务.正向代理：代理对象为客户端.反向代理：代理对象为服务端.</p>","more":"<ul>\n<li>反向代理</li>\n</ul>\n<blockquote>\n<p>配置语法:</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：proxy_pass URL</span><br><span class=\"line\">Default：–</span><br><span class=\"line\">Context：location、if in location、limit_except</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置实例:</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#server1 </span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">8080</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">        <span class=\"attribute\">root</span> /opt/htdocs/html; </span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.html index.htm index.php; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#server2 </span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\">    ... </span><br><span class=\"line\">    <span class=\"attribute\">location</span> ~/reg$ &#123; </span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8080; // 反向代理8080 </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>正向代理</li>\n</ul>\n<p>如果我们只允许某一个特定的ip访问，则可要考虑使用正向代理来实现.</p>\n<blockquote>\n<p>客户端服务配置实例:</p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> www.mantis.me; </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">    if ($http_x_forwarded_for !~* &quot;114\\.249\\.225\\.223&quot;) &#123; // 只允许114.249.225.223访问return 403; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>114.249.225.233服务器配置:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> www.mantis.me; </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  resolver 8.8.8.8; // dns </span><br><span class=\"line\">  <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://$http_host$request_uri; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>客户端使用代理工具配置代理服务器，例如mac系统自带、google扩展工具SwitchySharp等，配置相应的http代理服务器地址。</p>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190215115049.png\"></p>\n<p>在浏览器输入<a href=\"http://www.mantis.me即可访问./\">www.mantis.me即可访问</a>.</p>"},{"title":"Nginx深入了解-高级(二)","date":"2018-08-13T06:08:20.000Z","_content":"\nNginx的静态处理能力很强，但是动态处理能力不足，因此，在企业中常用动静分离技术。动静分离技术其实是采用代理的方式，在server{}段中加入带正则匹配的location来指定匹配项针对PHP的动静分离：静态页面交给Nginx处理，动态页面交给PHP-FPM模块或Apache处理。在Nginx的配置中，是通过location配置段配合正则匹配实现静态与动态页面的不同处理方式。\n\n<!-- more -->\n\n假如我们有一个页面，既有静态资源如图片、js文件等，也有动态的ajax请求，如下：\n\n```html\n<!DOCTYPE html> \n<html> \n  .... \n  <div> \n    <img src=\"https://www.mantis.me/img/abc.jpg\"> \n  </div> \n  <script> \n    $.ajax{ \n      type: POST, \n      url: \"https://www.mantis.me/user/add.php\", \n      dataType: JSON, \n      success: function() {} \n    } \n  </script> \n  <script src=\"https://www.mantis.me/static/js/main.js\"></script> \n</html>\n```\n\n我们可以通过nginx正则匹配和location将静态资源和动态请求分离：\n\n```nginx\nupstream api { \n  server 127.0.0.1:8080; \n} \n\nserver { \n  listen 80; \n  server_name localhost; \n  access_log /var/logs/nginx/access.log main; \n  root /opt/app/code; \n  \n  location ~ \\.php$ { \n    proxy_pass http://api; index index.html index.htm index.php; \n  } \n  location ~ \\.(jpg|jpeg|png|gif)$ { \n    expires 1h; gzip on; \n  } \n  ...... \n}\n```\n\n","source":"_posts/Nginx深入了解-高级-一.md","raw":"---\ntitle: Nginx深入了解-高级(二)\ndate: 2018-08-13 14:08:20\ntags: nginx\n---\n\nNginx的静态处理能力很强，但是动态处理能力不足，因此，在企业中常用动静分离技术。动静分离技术其实是采用代理的方式，在server{}段中加入带正则匹配的location来指定匹配项针对PHP的动静分离：静态页面交给Nginx处理，动态页面交给PHP-FPM模块或Apache处理。在Nginx的配置中，是通过location配置段配合正则匹配实现静态与动态页面的不同处理方式。\n\n<!-- more -->\n\n假如我们有一个页面，既有静态资源如图片、js文件等，也有动态的ajax请求，如下：\n\n```html\n<!DOCTYPE html> \n<html> \n  .... \n  <div> \n    <img src=\"https://www.mantis.me/img/abc.jpg\"> \n  </div> \n  <script> \n    $.ajax{ \n      type: POST, \n      url: \"https://www.mantis.me/user/add.php\", \n      dataType: JSON, \n      success: function() {} \n    } \n  </script> \n  <script src=\"https://www.mantis.me/static/js/main.js\"></script> \n</html>\n```\n\n我们可以通过nginx正则匹配和location将静态资源和动态请求分离：\n\n```nginx\nupstream api { \n  server 127.0.0.1:8080; \n} \n\nserver { \n  listen 80; \n  server_name localhost; \n  access_log /var/logs/nginx/access.log main; \n  root /opt/app/code; \n  \n  location ~ \\.php$ { \n    proxy_pass http://api; index index.html index.htm index.php; \n  } \n  location ~ \\.(jpg|jpeg|png|gif)$ { \n    expires 1h; gzip on; \n  } \n  ...... \n}\n```\n\n","slug":"Nginx深入了解-高级-一","published":1,"updated":"2021-03-11T01:40:12.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb2i0012w7c92cd42mt8","content":"<p>Nginx的静态处理能力很强，但是动态处理能力不足，因此，在企业中常用动静分离技术。动静分离技术其实是采用代理的方式，在server{}段中加入带正则匹配的location来指定匹配项针对PHP的动静分离：静态页面交给Nginx处理，动态页面交给PHP-FPM模块或Apache处理。在Nginx的配置中，是通过location配置段配合正则匹配实现静态与动态页面的不同处理方式。</p>\n<span id=\"more\"></span>\n\n<p>假如我们有一个页面，既有静态资源如图片、js文件等，也有动态的ajax请求，如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span> </span><br><span class=\"line\">  .... </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://www.mantis.me/img/abc.jpg&quot;</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span> </span><br><span class=\"line\"><span class=\"javascript\">    $.ajax&#123; </span></span><br><span class=\"line\">      type: POST, </span><br><span class=\"line\"><span class=\"javascript\">      url: <span class=\"string\">&quot;https://www.mantis.me/user/add.php&quot;</span>, </span></span><br><span class=\"line\"><span class=\"javascript\">      dataType: <span class=\"built_in\">JSON</span>, </span></span><br><span class=\"line\"><span class=\"javascript\">      success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125; </span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://www.mantis.me/static/js/main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以通过nginx正则匹配和location将静态资源和动态请求分离：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">upstream</span> api &#123; </span><br><span class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:8080</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\">  <span class=\"attribute\">access_log</span> /var/logs/nginx/access.log main; </span><br><span class=\"line\">  <span class=\"attribute\">root</span> /opt/app/code; </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://api; <span class=\"attribute\">index</span> index.html index.htm index.php; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.(jpg|jpeg|png|gif)$</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">expires</span> <span class=\"number\">1h</span>; <span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  ...... </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>Nginx的静态处理能力很强，但是动态处理能力不足，因此，在企业中常用动静分离技术。动静分离技术其实是采用代理的方式，在server{}段中加入带正则匹配的location来指定匹配项针对PHP的动静分离：静态页面交给Nginx处理，动态页面交给PHP-FPM模块或Apache处理。在Nginx的配置中，是通过location配置段配合正则匹配实现静态与动态页面的不同处理方式。</p>","more":"<p>假如我们有一个页面，既有静态资源如图片、js文件等，也有动态的ajax请求，如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span> </span><br><span class=\"line\">  .... </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://www.mantis.me/img/abc.jpg&quot;</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span> </span><br><span class=\"line\"><span class=\"javascript\">    $.ajax&#123; </span></span><br><span class=\"line\">      type: POST, </span><br><span class=\"line\"><span class=\"javascript\">      url: <span class=\"string\">&quot;https://www.mantis.me/user/add.php&quot;</span>, </span></span><br><span class=\"line\"><span class=\"javascript\">      dataType: <span class=\"built_in\">JSON</span>, </span></span><br><span class=\"line\"><span class=\"javascript\">      success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125; </span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://www.mantis.me/static/js/main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以通过nginx正则匹配和location将静态资源和动态请求分离：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">upstream</span> api &#123; </span><br><span class=\"line\">  <span class=\"attribute\">server</span> <span class=\"number\">127.0.0.1:8080</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\">  <span class=\"attribute\">access_log</span> /var/logs/nginx/access.log main; </span><br><span class=\"line\">  <span class=\"attribute\">root</span> /opt/app/code; </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.php$</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">proxy_pass</span> http://api; <span class=\"attribute\">index</span> index.html index.htm index.php; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ \\.(jpg|jpeg|png|gif)$</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">expires</span> <span class=\"number\">1h</span>; <span class=\"attribute\">gzip</span> <span class=\"literal\">on</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  ...... </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Nginx深入了解-进阶(四)","date":"2018-08-13T01:32:50.000Z","_content":"\nNginx同样可以用来作为缓存服务；客户端浏览器缓存我们称之为客户端缓存，后端使用Redis、Memcache等缓存服务我们称之为后端缓存，同理Nginx作为缓存服务我们就称之为代理缓存。\n\n<!-- more -->\n\n#### 一，Nginx作为代理缓存的流程示意图：\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190215114209.png)\n\n- 配置语法：\n\n```nginx\nSyntax：proxy_cache_path path [levels=levels]\n\n[use_temp_path = on|off] keys_zone=name:size [inactive = time]\n\n[max_size=size] \\ [manager_files=number] \\ [manager_sleep=time]\n\n[manager_threshold=time] \\ [loader_files=number]\n\n[loader_sleep=time] \\ [loader_threshold=time] \\ [purger=on|off]\n\n[purger_files=number] \\ [purger_sleep=time]\n\n[purger_threshold=time];\n\nDefault：–\n\nContext：http\n```\n\n- proxy_cache配置语法\n\n```nginx\nSyntax：proxy_cache zone|off;\n\nDefault：proxy_cache off;\n\nContext：http、server、location\n```\n\n- 缓存过期周期\n\n```\nSyntax：proxy_cache_valid [code…] time;\n\nDefault：–\n\nContext：http、server、location\n```\n\n- 缓存维度\n\n```nginx\nSyntax：proxy_cache_key string;\n\nDefault：proxy_cache_key $schema$proxy_host$request_uri; // 协议+主机+url\n\nContext：http、server、location\n```\n\n#### 二，配置实例\n\n```nginx\nhttp { \n    ......\n    proxy_cache_path /var/cache levels=1:2 keys_zone=test_cache:10m max_size=10g inactive=60m use_temp_path=off; #60m是指60分钟，1:2两级目录，test_cache开辟的空间名称 \n    server { \n        listen 80; \n        server_name localhost; \n        access_log /var/logs/access.log main; \n        location / { \n            proxy_cache test_cache; \n            proxy_cache_valid 200 304 12h; \n            proxy_cache_valid any 10m; \n            proxy_cache_key $host$uri$is_args$args; \n            add_header Nginx-Cache \"$upstream_cache_status\"; # 增加头信息 key(Nginx-Cache) value($upstream_cache_status) \n            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504; # 当出现5xx，超时，错误等时，跳过直接访问下一台服务器 \n            include proxy_params; \n        } \n    } \n}\n```\n\n#### 三，清理指定缓存信息\n使用第三方模块ngx_cache_purge来实现。\n\n#### 四，部分页面不缓存，比如登录注册页不希望缓存，可以使用proxy_no_cache实现\n\n```nginx\nSyntax：proxy_no_cache string …;\n\nDefault：—;\n\nContext：http、server、location;\n```\n\n- 配置实例\n\n```nginx\nserver { \n    ...... \n    if ($request_uri ~ ^/(login|register|password\\/reset)) { \n        set $cookie_nocache 1; \n    } \n    location / { \n        proxy_cache test_cache; \n        proxy_cache_valid 200 304 12h; \n        proxy_cache_valid any 10m; \n        proxy_cache_key $host$uri$is_args$args; \n        proxy_no_cache $cookie_nocache $arg_nocache $arg_comment; \n        proxy_no_cache $http_pragma $http_authorization; \n        add_header Nginx-Cache \"$upstream_cache_status\"; # 增加头信息 key(Nginx-Cache) value($upstream_cache_status) \n        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504; # 当出现5xx，超时，错误等时，跳过直接访问下一台服务器 \n        include proxy_params; \n    } \n}\n```\n\n#### 五，大文件分片请求混存\n\n- 优势：每个子请求收到的数据都会形成一个独立的文件，一个请求断了，其他请求不受影响。\n\n- 缺点：当文件很大时或者slice很小时，可能会导致文件描述符耗尽等情况。","source":"_posts/Nginx深入了解-进阶-四.md","raw":"---\ntitle: Nginx深入了解-进阶(四)\ndate: 2018-08-13 09:32:50\ntags: nginx\n---\n\nNginx同样可以用来作为缓存服务；客户端浏览器缓存我们称之为客户端缓存，后端使用Redis、Memcache等缓存服务我们称之为后端缓存，同理Nginx作为缓存服务我们就称之为代理缓存。\n\n<!-- more -->\n\n#### 一，Nginx作为代理缓存的流程示意图：\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190215114209.png)\n\n- 配置语法：\n\n```nginx\nSyntax：proxy_cache_path path [levels=levels]\n\n[use_temp_path = on|off] keys_zone=name:size [inactive = time]\n\n[max_size=size] \\ [manager_files=number] \\ [manager_sleep=time]\n\n[manager_threshold=time] \\ [loader_files=number]\n\n[loader_sleep=time] \\ [loader_threshold=time] \\ [purger=on|off]\n\n[purger_files=number] \\ [purger_sleep=time]\n\n[purger_threshold=time];\n\nDefault：–\n\nContext：http\n```\n\n- proxy_cache配置语法\n\n```nginx\nSyntax：proxy_cache zone|off;\n\nDefault：proxy_cache off;\n\nContext：http、server、location\n```\n\n- 缓存过期周期\n\n```\nSyntax：proxy_cache_valid [code…] time;\n\nDefault：–\n\nContext：http、server、location\n```\n\n- 缓存维度\n\n```nginx\nSyntax：proxy_cache_key string;\n\nDefault：proxy_cache_key $schema$proxy_host$request_uri; // 协议+主机+url\n\nContext：http、server、location\n```\n\n#### 二，配置实例\n\n```nginx\nhttp { \n    ......\n    proxy_cache_path /var/cache levels=1:2 keys_zone=test_cache:10m max_size=10g inactive=60m use_temp_path=off; #60m是指60分钟，1:2两级目录，test_cache开辟的空间名称 \n    server { \n        listen 80; \n        server_name localhost; \n        access_log /var/logs/access.log main; \n        location / { \n            proxy_cache test_cache; \n            proxy_cache_valid 200 304 12h; \n            proxy_cache_valid any 10m; \n            proxy_cache_key $host$uri$is_args$args; \n            add_header Nginx-Cache \"$upstream_cache_status\"; # 增加头信息 key(Nginx-Cache) value($upstream_cache_status) \n            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504; # 当出现5xx，超时，错误等时，跳过直接访问下一台服务器 \n            include proxy_params; \n        } \n    } \n}\n```\n\n#### 三，清理指定缓存信息\n使用第三方模块ngx_cache_purge来实现。\n\n#### 四，部分页面不缓存，比如登录注册页不希望缓存，可以使用proxy_no_cache实现\n\n```nginx\nSyntax：proxy_no_cache string …;\n\nDefault：—;\n\nContext：http、server、location;\n```\n\n- 配置实例\n\n```nginx\nserver { \n    ...... \n    if ($request_uri ~ ^/(login|register|password\\/reset)) { \n        set $cookie_nocache 1; \n    } \n    location / { \n        proxy_cache test_cache; \n        proxy_cache_valid 200 304 12h; \n        proxy_cache_valid any 10m; \n        proxy_cache_key $host$uri$is_args$args; \n        proxy_no_cache $cookie_nocache $arg_nocache $arg_comment; \n        proxy_no_cache $http_pragma $http_authorization; \n        add_header Nginx-Cache \"$upstream_cache_status\"; # 增加头信息 key(Nginx-Cache) value($upstream_cache_status) \n        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504; # 当出现5xx，超时，错误等时，跳过直接访问下一台服务器 \n        include proxy_params; \n    } \n}\n```\n\n#### 五，大文件分片请求混存\n\n- 优势：每个子请求收到的数据都会形成一个独立的文件，一个请求断了，其他请求不受影响。\n\n- 缺点：当文件很大时或者slice很小时，可能会导致文件描述符耗尽等情况。","slug":"Nginx深入了解-进阶-四","published":1,"updated":"2021-03-11T01:40:06.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb2j0014w7c9c9ww9dd9","content":"<p>Nginx同样可以用来作为缓存服务；客户端浏览器缓存我们称之为客户端缓存，后端使用Redis、Memcache等缓存服务我们称之为后端缓存，同理Nginx作为缓存服务我们就称之为代理缓存。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"一，Nginx作为代理缓存的流程示意图：\"><a href=\"#一，Nginx作为代理缓存的流程示意图：\" class=\"headerlink\" title=\"一，Nginx作为代理缓存的流程示意图：\"></a>一，Nginx作为代理缓存的流程示意图：</h4><p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190215114209.png\"></p>\n<ul>\n<li>配置语法：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：proxy_cache_path path [levels=levels]</span><br><span class=\"line\"></span><br><span class=\"line\">[use_temp_path = on|off] keys_zone=name:size [inactive = time]</span><br><span class=\"line\"></span><br><span class=\"line\">[max_size=size] \\ [manager_files=number] \\ [manager_sleep=time]</span><br><span class=\"line\"></span><br><span class=\"line\">[manager_threshold=time] \\ [loader_files=number]</span><br><span class=\"line\"></span><br><span class=\"line\">[loader_sleep=time] \\ [loader_threshold=time] \\ [purger=on|off]</span><br><span class=\"line\"></span><br><span class=\"line\">[purger_files=number] \\ [purger_sleep=time]</span><br><span class=\"line\"></span><br><span class=\"line\">[purger_threshold=time];</span><br><span class=\"line\"></span><br><span class=\"line\">Default：–</span><br><span class=\"line\"></span><br><span class=\"line\">Context：http</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>proxy_cache配置语法</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：proxy_cache zone|off;</span><br><span class=\"line\"></span><br><span class=\"line\">Default：proxy_cache off;</span><br><span class=\"line\"></span><br><span class=\"line\">Context：http、server、location</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>缓存过期周期</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：proxy_cache_valid [code…] time;</span><br><span class=\"line\"></span><br><span class=\"line\">Default：–</span><br><span class=\"line\"></span><br><span class=\"line\">Context：http、server、location</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>缓存维度</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：proxy_cache_key string;</span><br><span class=\"line\"></span><br><span class=\"line\">Default：proxy_cache_key $schema$proxy_host$request_uri; // 协议+主机+url</span><br><span class=\"line\"></span><br><span class=\"line\">Context：http、server、location</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二，配置实例\"><a href=\"#二，配置实例\" class=\"headerlink\" title=\"二，配置实例\"></a>二，配置实例</h4><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123; </span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"attribute\">proxy_cache_path</span> /var/cache levels=<span class=\"number\">1</span>:<span class=\"number\">2</span> keys_zone=test_cache:<span class=\"number\">10m</span> max_size=<span class=\"number\">10g</span> inactive=<span class=\"number\">60m</span> use_temp_path=<span class=\"literal\">off</span>; <span class=\"comment\">#60m是指60分钟，1:2两级目录，test_cache开辟的空间名称 </span></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123; </span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\">        <span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\">        <span class=\"attribute\">access_log</span> /var/logs/access.log main; </span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">            <span class=\"attribute\">proxy_cache</span> test_cache; </span><br><span class=\"line\">            <span class=\"attribute\">proxy_cache_valid</span> <span class=\"number\">200</span> <span class=\"number\">304</span> <span class=\"number\">12h</span>; </span><br><span class=\"line\">            <span class=\"attribute\">proxy_cache_valid</span> any <span class=\"number\">10m</span>; </span><br><span class=\"line\">            <span class=\"attribute\">proxy_cache_key</span> $host$uri$is_args$args; </span><br><span class=\"line\">            <span class=\"attribute\">add_header</span> Nginx-Cache <span class=\"string\">&quot;$upstream_cache_status&quot;</span>; <span class=\"comment\"># 增加头信息 key(Nginx-Cache) value($upstream_cache_status) </span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_next_upstream</span> <span class=\"literal\">error</span> timeout invalid_header http_500 http_502 http_503 http_504; <span class=\"comment\"># 当出现5xx，超时，错误等时，跳过直接访问下一台服务器 </span></span><br><span class=\"line\">            <span class=\"attribute\">include</span> proxy_params; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三，清理指定缓存信息\"><a href=\"#三，清理指定缓存信息\" class=\"headerlink\" title=\"三，清理指定缓存信息\"></a>三，清理指定缓存信息</h4><p>使用第三方模块ngx_cache_purge来实现。</p>\n<h4 id=\"四，部分页面不缓存，比如登录注册页不希望缓存，可以使用proxy-no-cache实现\"><a href=\"#四，部分页面不缓存，比如登录注册页不希望缓存，可以使用proxy-no-cache实现\" class=\"headerlink\" title=\"四，部分页面不缓存，比如登录注册页不希望缓存，可以使用proxy_no_cache实现\"></a>四，部分页面不缓存，比如登录注册页不希望缓存，可以使用proxy_no_cache实现</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：proxy_no_cache string …;</span><br><span class=\"line\"></span><br><span class=\"line\">Default：—;</span><br><span class=\"line\"></span><br><span class=\"line\">Context：http、server、location;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置实例</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">    ...... </span><br><span class=\"line\">    <span class=\"attribute\">if</span> ($request_uri <span class=\"regexp\">~ ^/(login|register|password\\/reset))</span> &#123; </span><br><span class=\"line\">        <span class=\"attribute\">set</span> $cookie_nocache <span class=\"number\">1</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">        <span class=\"attribute\">proxy_cache</span> test_cache; </span><br><span class=\"line\">        <span class=\"attribute\">proxy_cache_valid</span> <span class=\"number\">200</span> <span class=\"number\">304</span> <span class=\"number\">12h</span>; </span><br><span class=\"line\">        <span class=\"attribute\">proxy_cache_valid</span> any <span class=\"number\">10m</span>; </span><br><span class=\"line\">        <span class=\"attribute\">proxy_cache_key</span> $host$uri$is_args$args; </span><br><span class=\"line\">        <span class=\"attribute\">proxy_no_cache</span> $cookie_nocache $arg_nocache $arg_comment; </span><br><span class=\"line\">        <span class=\"attribute\">proxy_no_cache</span> $http_pragma $http_authorization; </span><br><span class=\"line\">        <span class=\"attribute\">add_header</span> Nginx-Cache <span class=\"string\">&quot;$upstream_cache_status&quot;</span>; <span class=\"comment\"># 增加头信息 key(Nginx-Cache) value($upstream_cache_status) </span></span><br><span class=\"line\">        <span class=\"attribute\">proxy_next_upstream</span> <span class=\"literal\">error</span> timeout invalid_header http_500 http_502 http_503 http_504; <span class=\"comment\"># 当出现5xx，超时，错误等时，跳过直接访问下一台服务器 </span></span><br><span class=\"line\">        <span class=\"attribute\">include</span> proxy_params; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"五，大文件分片请求混存\"><a href=\"#五，大文件分片请求混存\" class=\"headerlink\" title=\"五，大文件分片请求混存\"></a>五，大文件分片请求混存</h4><ul>\n<li><p>优势：每个子请求收到的数据都会形成一个独立的文件，一个请求断了，其他请求不受影响。</p>\n</li>\n<li><p>缺点：当文件很大时或者slice很小时，可能会导致文件描述符耗尽等情况。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Nginx同样可以用来作为缓存服务；客户端浏览器缓存我们称之为客户端缓存，后端使用Redis、Memcache等缓存服务我们称之为后端缓存，同理Nginx作为缓存服务我们就称之为代理缓存。</p>","more":"<h4 id=\"一，Nginx作为代理缓存的流程示意图：\"><a href=\"#一，Nginx作为代理缓存的流程示意图：\" class=\"headerlink\" title=\"一，Nginx作为代理缓存的流程示意图：\"></a>一，Nginx作为代理缓存的流程示意图：</h4><p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190215114209.png\"></p>\n<ul>\n<li>配置语法：</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：proxy_cache_path path [levels=levels]</span><br><span class=\"line\"></span><br><span class=\"line\">[use_temp_path = on|off] keys_zone=name:size [inactive = time]</span><br><span class=\"line\"></span><br><span class=\"line\">[max_size=size] \\ [manager_files=number] \\ [manager_sleep=time]</span><br><span class=\"line\"></span><br><span class=\"line\">[manager_threshold=time] \\ [loader_files=number]</span><br><span class=\"line\"></span><br><span class=\"line\">[loader_sleep=time] \\ [loader_threshold=time] \\ [purger=on|off]</span><br><span class=\"line\"></span><br><span class=\"line\">[purger_files=number] \\ [purger_sleep=time]</span><br><span class=\"line\"></span><br><span class=\"line\">[purger_threshold=time];</span><br><span class=\"line\"></span><br><span class=\"line\">Default：–</span><br><span class=\"line\"></span><br><span class=\"line\">Context：http</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>proxy_cache配置语法</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：proxy_cache zone|off;</span><br><span class=\"line\"></span><br><span class=\"line\">Default：proxy_cache off;</span><br><span class=\"line\"></span><br><span class=\"line\">Context：http、server、location</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>缓存过期周期</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：proxy_cache_valid [code…] time;</span><br><span class=\"line\"></span><br><span class=\"line\">Default：–</span><br><span class=\"line\"></span><br><span class=\"line\">Context：http、server、location</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>缓存维度</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：proxy_cache_key string;</span><br><span class=\"line\"></span><br><span class=\"line\">Default：proxy_cache_key $schema$proxy_host$request_uri; // 协议+主机+url</span><br><span class=\"line\"></span><br><span class=\"line\">Context：http、server、location</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二，配置实例\"><a href=\"#二，配置实例\" class=\"headerlink\" title=\"二，配置实例\"></a>二，配置实例</h4><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">http</span> &#123; </span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"attribute\">proxy_cache_path</span> /var/cache levels=<span class=\"number\">1</span>:<span class=\"number\">2</span> keys_zone=test_cache:<span class=\"number\">10m</span> max_size=<span class=\"number\">10g</span> inactive=<span class=\"number\">60m</span> use_temp_path=<span class=\"literal\">off</span>; <span class=\"comment\">#60m是指60分钟，1:2两级目录，test_cache开辟的空间名称 </span></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123; </span><br><span class=\"line\">        <span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\">        <span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\">        <span class=\"attribute\">access_log</span> /var/logs/access.log main; </span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">            <span class=\"attribute\">proxy_cache</span> test_cache; </span><br><span class=\"line\">            <span class=\"attribute\">proxy_cache_valid</span> <span class=\"number\">200</span> <span class=\"number\">304</span> <span class=\"number\">12h</span>; </span><br><span class=\"line\">            <span class=\"attribute\">proxy_cache_valid</span> any <span class=\"number\">10m</span>; </span><br><span class=\"line\">            <span class=\"attribute\">proxy_cache_key</span> $host$uri$is_args$args; </span><br><span class=\"line\">            <span class=\"attribute\">add_header</span> Nginx-Cache <span class=\"string\">&quot;$upstream_cache_status&quot;</span>; <span class=\"comment\"># 增加头信息 key(Nginx-Cache) value($upstream_cache_status) </span></span><br><span class=\"line\">            <span class=\"attribute\">proxy_next_upstream</span> <span class=\"literal\">error</span> timeout invalid_header http_500 http_502 http_503 http_504; <span class=\"comment\"># 当出现5xx，超时，错误等时，跳过直接访问下一台服务器 </span></span><br><span class=\"line\">            <span class=\"attribute\">include</span> proxy_params; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三，清理指定缓存信息\"><a href=\"#三，清理指定缓存信息\" class=\"headerlink\" title=\"三，清理指定缓存信息\"></a>三，清理指定缓存信息</h4><p>使用第三方模块ngx_cache_purge来实现。</p>\n<h4 id=\"四，部分页面不缓存，比如登录注册页不希望缓存，可以使用proxy-no-cache实现\"><a href=\"#四，部分页面不缓存，比如登录注册页不希望缓存，可以使用proxy-no-cache实现\" class=\"headerlink\" title=\"四，部分页面不缓存，比如登录注册页不希望缓存，可以使用proxy_no_cache实现\"></a>四，部分页面不缓存，比如登录注册页不希望缓存，可以使用proxy_no_cache实现</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax：proxy_no_cache string …;</span><br><span class=\"line\"></span><br><span class=\"line\">Default：—;</span><br><span class=\"line\"></span><br><span class=\"line\">Context：http、server、location;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置实例</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">    ...... </span><br><span class=\"line\">    <span class=\"attribute\">if</span> ($request_uri <span class=\"regexp\">~ ^/(login|register|password\\/reset))</span> &#123; </span><br><span class=\"line\">        <span class=\"attribute\">set</span> $cookie_nocache <span class=\"number\">1</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">        <span class=\"attribute\">proxy_cache</span> test_cache; </span><br><span class=\"line\">        <span class=\"attribute\">proxy_cache_valid</span> <span class=\"number\">200</span> <span class=\"number\">304</span> <span class=\"number\">12h</span>; </span><br><span class=\"line\">        <span class=\"attribute\">proxy_cache_valid</span> any <span class=\"number\">10m</span>; </span><br><span class=\"line\">        <span class=\"attribute\">proxy_cache_key</span> $host$uri$is_args$args; </span><br><span class=\"line\">        <span class=\"attribute\">proxy_no_cache</span> $cookie_nocache $arg_nocache $arg_comment; </span><br><span class=\"line\">        <span class=\"attribute\">proxy_no_cache</span> $http_pragma $http_authorization; </span><br><span class=\"line\">        <span class=\"attribute\">add_header</span> Nginx-Cache <span class=\"string\">&quot;$upstream_cache_status&quot;</span>; <span class=\"comment\"># 增加头信息 key(Nginx-Cache) value($upstream_cache_status) </span></span><br><span class=\"line\">        <span class=\"attribute\">proxy_next_upstream</span> <span class=\"literal\">error</span> timeout invalid_header http_500 http_502 http_503 http_504; <span class=\"comment\"># 当出现5xx，超时，错误等时，跳过直接访问下一台服务器 </span></span><br><span class=\"line\">        <span class=\"attribute\">include</span> proxy_params; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"五，大文件分片请求混存\"><a href=\"#五，大文件分片请求混存\" class=\"headerlink\" title=\"五，大文件分片请求混存\"></a>五，大文件分片请求混存</h4><ul>\n<li><p>优势：每个子请求收到的数据都会形成一个独立的文件，一个请求断了，其他请求不受影响。</p>\n</li>\n<li><p>缺点：当文件很大时或者slice很小时，可能会导致文件描述符耗尽等情况。</p>\n</li>\n</ul>"},{"title":"Nginx深入了解-高级(三)","date":"2018-08-30T06:08:20.000Z","_content":"\nNginx 高级模块的使用。secure_link_module模块、geoip_module模块。\n\n<!-- more -->\n\n#### 一，secure_link_module模块\n\n1,限制并允许检查请求的连接的真实性以及保护资源免遭未经授权的访问。\n2,限制链接的生效周期。\n\n##### 配置语法\n\n> Syntax：secure_link expression;\n> Default：–\n> Context：http、server、location\n\n\n> Syntax：secure_link_md5 expression;\n> Default：–\n> Context：http、server、location\n\n图示：\n\n![图示](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190215113404.png)\n\n配置实例:\n\n```nginx\nserver { \n\tlisten 80; \n\n\t... \n\n\tlocation / { \n\t\tsecure_link $arg_md5,$arg_expires; \n\t\tsecure_link_md5 \"$secure_link_expires$uri test\"; \n\t\tif ($secure_link = \"\") { \n\t\t\treturn 403; \n\t\t} \n\t\tif ($secure_link = \"0\") { \n\t\t\treturn 410; \n\t\t} \n\t} \n}\n```\n\n#### 二，geoid_module模块\n\n> 给予IP地址匹配MaxMind GeoIP二进制文件，读取IP所在地域信息。\n\nhttp://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz\n\nhttp://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz\n\nhttp_geoip_mpdule使用场景\n\n- 区别国内外作HTTP访问规则\n- 区别国内城市地域作HTTP访问规则\n\n配置实例：\n\n```nginx\n# 将下载模块load \n\nload_module \"modules/ngx_http_geoip_module.so\"; \nload_module \"modules/ngx_stream_geoip_module.so\"; \n\nuser nginx; \nworker_process 1; \n\n....\n```\n\n```nginx\n# 读取下载的maxmind文件 \ngeoip_country /etc/nginx/geoip/GeoIP.dat; \ngeoip_city /etc/nginx/geoip/GeoLiteCity.dat; \n\nserver { \n\tlisten 80; \n\tserver_name localhost; \n\n\tlocation / { \n\t\tif ($geoip_counter_code != CN) { \n\t\t\treturn 403; \n\t\t} \n\t} \n\n\tlocation /myip { \n\t\tdefault_type text/plain; \n\t\treturn 200 \"$remote_addr $geoip_country_name $geoip_country_code $geoip_city\"; \n\t} \n}\n```","source":"_posts/Nginx深入了解-高级-三.md","raw":"---\ntitle: Nginx深入了解-高级(三)\ndate: 2018-08-30 14:08:20\ntags: nginx\n---\n\nNginx 高级模块的使用。secure_link_module模块、geoip_module模块。\n\n<!-- more -->\n\n#### 一，secure_link_module模块\n\n1,限制并允许检查请求的连接的真实性以及保护资源免遭未经授权的访问。\n2,限制链接的生效周期。\n\n##### 配置语法\n\n> Syntax：secure_link expression;\n> Default：–\n> Context：http、server、location\n\n\n> Syntax：secure_link_md5 expression;\n> Default：–\n> Context：http、server、location\n\n图示：\n\n![图示](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190215113404.png)\n\n配置实例:\n\n```nginx\nserver { \n\tlisten 80; \n\n\t... \n\n\tlocation / { \n\t\tsecure_link $arg_md5,$arg_expires; \n\t\tsecure_link_md5 \"$secure_link_expires$uri test\"; \n\t\tif ($secure_link = \"\") { \n\t\t\treturn 403; \n\t\t} \n\t\tif ($secure_link = \"0\") { \n\t\t\treturn 410; \n\t\t} \n\t} \n}\n```\n\n#### 二，geoid_module模块\n\n> 给予IP地址匹配MaxMind GeoIP二进制文件，读取IP所在地域信息。\n\nhttp://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz\n\nhttp://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz\n\nhttp_geoip_mpdule使用场景\n\n- 区别国内外作HTTP访问规则\n- 区别国内城市地域作HTTP访问规则\n\n配置实例：\n\n```nginx\n# 将下载模块load \n\nload_module \"modules/ngx_http_geoip_module.so\"; \nload_module \"modules/ngx_stream_geoip_module.so\"; \n\nuser nginx; \nworker_process 1; \n\n....\n```\n\n```nginx\n# 读取下载的maxmind文件 \ngeoip_country /etc/nginx/geoip/GeoIP.dat; \ngeoip_city /etc/nginx/geoip/GeoLiteCity.dat; \n\nserver { \n\tlisten 80; \n\tserver_name localhost; \n\n\tlocation / { \n\t\tif ($geoip_counter_code != CN) { \n\t\t\treturn 403; \n\t\t} \n\t} \n\n\tlocation /myip { \n\t\tdefault_type text/plain; \n\t\treturn 200 \"$remote_addr $geoip_country_name $geoip_country_code $geoip_city\"; \n\t} \n}\n```","slug":"Nginx深入了解-高级-三","published":1,"updated":"2021-03-11T01:40:18.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb2j0015w7c955x15u6c","content":"<p>Nginx 高级模块的使用。secure_link_module模块、geoip_module模块。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"一，secure-link-module模块\"><a href=\"#一，secure-link-module模块\" class=\"headerlink\" title=\"一，secure_link_module模块\"></a>一，secure_link_module模块</h4><p>1,限制并允许检查请求的连接的真实性以及保护资源免遭未经授权的访问。<br>2,限制链接的生效周期。</p>\n<h5 id=\"配置语法\"><a href=\"#配置语法\" class=\"headerlink\" title=\"配置语法\"></a>配置语法</h5><blockquote>\n<p>Syntax：secure_link expression;<br>Default：–<br>Context：http、server、location</p>\n</blockquote>\n<blockquote>\n<p>Syntax：secure_link_md5 expression;<br>Default：–<br>Context：http、server、location</p>\n</blockquote>\n<p>图示：</p>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190215113404.png\" alt=\"图示\"></p>\n<p>配置实例:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">\t... </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">\t\t<span class=\"attribute\">secure_link</span> $arg_md5,$arg_expires; </span><br><span class=\"line\">\t\t<span class=\"attribute\">secure_link_md5</span> <span class=\"string\">&quot;$secure_link_expires$uri test&quot;</span>; </span><br><span class=\"line\">\t\t<span class=\"attribute\">if</span> ($secure_link = <span class=\"string\">&quot;&quot;</span>) &#123; </span><br><span class=\"line\">\t\t\t<span class=\"attribute\">return</span> <span class=\"number\">403</span>; </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\t<span class=\"attribute\">if</span> ($secure_link = <span class=\"string\">&quot;0&quot;</span>) &#123; </span><br><span class=\"line\">\t\t\t<span class=\"attribute\">return</span> <span class=\"number\">410</span>; </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二，geoid-module模块\"><a href=\"#二，geoid-module模块\" class=\"headerlink\" title=\"二，geoid_module模块\"></a>二，geoid_module模块</h4><blockquote>\n<p>给予IP地址匹配MaxMind GeoIP二进制文件，读取IP所在地域信息。</p>\n</blockquote>\n<p><a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz\">http://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz</a></p>\n<p><a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz\">http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz</a></p>\n<p>http_geoip_mpdule使用场景</p>\n<ul>\n<li>区别国内外作HTTP访问规则</li>\n<li>区别国内城市地域作HTTP访问规则</li>\n</ul>\n<p>配置实例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将下载模块load </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">load_module</span> <span class=\"string\">&quot;modules/ngx_http_geoip_module.so&quot;</span>; </span><br><span class=\"line\"><span class=\"attribute\">load_module</span> <span class=\"string\">&quot;modules/ngx_stream_geoip_module.so&quot;</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">user</span> nginx; </span><br><span class=\"line\"><span class=\"attribute\">worker_process</span> <span class=\"number\">1</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 读取下载的maxmind文件 </span></span><br><span class=\"line\"><span class=\"attribute\">geoip_country</span> /etc/nginx/geoip/GeoIP.dat; </span><br><span class=\"line\"><span class=\"attribute\">geoip_city</span> /etc/nginx/geoip/GeoLiteCity.dat; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">\t\t<span class=\"attribute\">if</span> ($geoip_counter_code != CN) &#123; </span><br><span class=\"line\">\t\t\t<span class=\"attribute\">return</span> <span class=\"number\">403</span>; </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attribute\">location</span> /myip &#123; </span><br><span class=\"line\">\t\t<span class=\"attribute\">default_type</span> text/plain; </span><br><span class=\"line\">\t\t<span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">&quot;$remote_addr $geoip_country_name $geoip_country_code $geoip_city&quot;</span>; </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>Nginx 高级模块的使用。secure_link_module模块、geoip_module模块。</p>","more":"<h4 id=\"一，secure-link-module模块\"><a href=\"#一，secure-link-module模块\" class=\"headerlink\" title=\"一，secure_link_module模块\"></a>一，secure_link_module模块</h4><p>1,限制并允许检查请求的连接的真实性以及保护资源免遭未经授权的访问。<br>2,限制链接的生效周期。</p>\n<h5 id=\"配置语法\"><a href=\"#配置语法\" class=\"headerlink\" title=\"配置语法\"></a>配置语法</h5><blockquote>\n<p>Syntax：secure_link expression;<br>Default：–<br>Context：http、server、location</p>\n</blockquote>\n<blockquote>\n<p>Syntax：secure_link_md5 expression;<br>Default：–<br>Context：http、server、location</p>\n</blockquote>\n<p>图示：</p>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190215113404.png\" alt=\"图示\"></p>\n<p>配置实例:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">\t... </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">\t\t<span class=\"attribute\">secure_link</span> $arg_md5,$arg_expires; </span><br><span class=\"line\">\t\t<span class=\"attribute\">secure_link_md5</span> <span class=\"string\">&quot;$secure_link_expires$uri test&quot;</span>; </span><br><span class=\"line\">\t\t<span class=\"attribute\">if</span> ($secure_link = <span class=\"string\">&quot;&quot;</span>) &#123; </span><br><span class=\"line\">\t\t\t<span class=\"attribute\">return</span> <span class=\"number\">403</span>; </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\t<span class=\"attribute\">if</span> ($secure_link = <span class=\"string\">&quot;0&quot;</span>) &#123; </span><br><span class=\"line\">\t\t\t<span class=\"attribute\">return</span> <span class=\"number\">410</span>; </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二，geoid-module模块\"><a href=\"#二，geoid-module模块\" class=\"headerlink\" title=\"二，geoid_module模块\"></a>二，geoid_module模块</h4><blockquote>\n<p>给予IP地址匹配MaxMind GeoIP二进制文件，读取IP所在地域信息。</p>\n</blockquote>\n<p><a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz\">http://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz</a></p>\n<p><a href=\"http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz\">http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz</a></p>\n<p>http_geoip_mpdule使用场景</p>\n<ul>\n<li>区别国内外作HTTP访问规则</li>\n<li>区别国内城市地域作HTTP访问规则</li>\n</ul>\n<p>配置实例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将下载模块load </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">load_module</span> <span class=\"string\">&quot;modules/ngx_http_geoip_module.so&quot;</span>; </span><br><span class=\"line\"><span class=\"attribute\">load_module</span> <span class=\"string\">&quot;modules/ngx_stream_geoip_module.so&quot;</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">user</span> nginx; </span><br><span class=\"line\"><span class=\"attribute\">worker_process</span> <span class=\"number\">1</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 读取下载的maxmind文件 </span></span><br><span class=\"line\"><span class=\"attribute\">geoip_country</span> /etc/nginx/geoip/GeoIP.dat; </span><br><span class=\"line\"><span class=\"attribute\">geoip_city</span> /etc/nginx/geoip/GeoLiteCity.dat; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attribute\">location</span> / &#123; </span><br><span class=\"line\">\t\t<span class=\"attribute\">if</span> ($geoip_counter_code != CN) &#123; </span><br><span class=\"line\">\t\t\t<span class=\"attribute\">return</span> <span class=\"number\">403</span>; </span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attribute\">location</span> /myip &#123; </span><br><span class=\"line\">\t\t<span class=\"attribute\">default_type</span> text/plain; </span><br><span class=\"line\">\t\t<span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">&quot;$remote_addr $geoip_country_name $geoip_country_code $geoip_city&quot;</span>; </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Nginx深入了解-高级(二)","date":"2018-08-18T06:08:20.000Z","_content":"\nNginx的Rewrite规则，实现url的重定向以及重写，用来实现特定场景的支持；比如特定页面、接口的转发等。\n\n<!-- more -->\n\n##### 一，场景\n\n1）URL访问跳转，支持开发设计\n\n 页面跳转、兼容性支持、展示效果等。\n\n2）SEO优化\n\n 伪静态改写，优化搜索引擎。\n\n3）维护\n\n 后台维护、流量转发等。\n\n4）安全\n\n 伪静态，将真实的页面进行伪装，让外部的爬虫、黑客攻击感觉不到是一个动态的页面。\n\n##### 二，配置语法\n\n> Syntax：rewrite regex replacement [flag];\n>\n> Default：-\n>\n> Context：server、location、if\n\neg：当网站需要维护时，可以指定一个页面，通过rewrite规则转发。\n\n```nginx\nrewrite ^(.*)$ /pages/main.html break;\n```\n\n##### 三，正则表达式\n\n| 表达式 |                  描述                  |\n| :----: | :------------------------------------: |\n|   .    |       匹配除换行符以外的任意字符       |\n|   ?    |              重复0次或1次              |\n|   +    |            重复1次或更多次             |\n|   *    |   最少连接数，哪个机器连接数少就分发   |\n|   \\d   |                匹配数字                |\n|   ^    |            匹配字符串的开始            |\n|   $    |            匹配字符串的结束            |\n|  {n}   |                重复n次                 |\n|  {n,}  |            重复n次或更多次             |\n|  [c]   |             匹配单个字符c              |\n| [a-z]  |       匹配a-z小写字母的任意一个        |\n|   \\    |                转义字符                |\n|   ()   | 用于匹配括号之间的内容，通过$1、$2调用 |\n\neg：匹配user_agent信息里面MISE的\n\n```nginx\nif ($http_user_agent ~ MISE) {\n    rewrite ^(.*)$ /mise/$1 break; # $1匹配()内的内容\n}\n```\n\n##### 四，Nginx中的flag\n\n|   flag    |                    描述                     |\n| :-------: | :-----------------------------------------: |\n|   last    |      停止rewrite检测，会再建立一次请求      |\n|   break   |       停止rewrite检测，不会再建立请求       |\n| redirect  | 返回302临时重定向，地址栏会显示跳转后的地址 |\n| permanent | 返回301永久重定向，地址栏会显示跳转后的地址 |\n\neg：\n\n```nginx\n# last break \nserver { \n  listen 80; \n  server_name localhost; \n  ... \n  location ~ ^/break { \n    rewrite ^/break /test/ break; \n  } \n  location ~ ^/last { \n    rewrite ^/last /test/ last; # 返回200 {\"status\":\"success\"} \n  } \n  location /test/ { \n    default_type application/json; \n    return 200 '{\"status\":\"success\"}'; \n  } \n}\n```\n\neg:\n\n```nginx\n# redirect permanent\nserver { \n  listen 80; \n  server_name localhost; \n  ... \n  location ~ ^/mantis { \n    #rewrite ^/mantis https://www.mantis.me/ permanent; #301 \n    rewrite ^/mantis https://www.mantis.me/ redirect; #302 \n  } \n}\n```\n\n","source":"_posts/Nginx深入了解-高级-二.md","raw":"---\ntitle: Nginx深入了解-高级(二)\ndate: 2018-08-18 14:08:20\ntags: nginx\n---\n\nNginx的Rewrite规则，实现url的重定向以及重写，用来实现特定场景的支持；比如特定页面、接口的转发等。\n\n<!-- more -->\n\n##### 一，场景\n\n1）URL访问跳转，支持开发设计\n\n 页面跳转、兼容性支持、展示效果等。\n\n2）SEO优化\n\n 伪静态改写，优化搜索引擎。\n\n3）维护\n\n 后台维护、流量转发等。\n\n4）安全\n\n 伪静态，将真实的页面进行伪装，让外部的爬虫、黑客攻击感觉不到是一个动态的页面。\n\n##### 二，配置语法\n\n> Syntax：rewrite regex replacement [flag];\n>\n> Default：-\n>\n> Context：server、location、if\n\neg：当网站需要维护时，可以指定一个页面，通过rewrite规则转发。\n\n```nginx\nrewrite ^(.*)$ /pages/main.html break;\n```\n\n##### 三，正则表达式\n\n| 表达式 |                  描述                  |\n| :----: | :------------------------------------: |\n|   .    |       匹配除换行符以外的任意字符       |\n|   ?    |              重复0次或1次              |\n|   +    |            重复1次或更多次             |\n|   *    |   最少连接数，哪个机器连接数少就分发   |\n|   \\d   |                匹配数字                |\n|   ^    |            匹配字符串的开始            |\n|   $    |            匹配字符串的结束            |\n|  {n}   |                重复n次                 |\n|  {n,}  |            重复n次或更多次             |\n|  [c]   |             匹配单个字符c              |\n| [a-z]  |       匹配a-z小写字母的任意一个        |\n|   \\    |                转义字符                |\n|   ()   | 用于匹配括号之间的内容，通过$1、$2调用 |\n\neg：匹配user_agent信息里面MISE的\n\n```nginx\nif ($http_user_agent ~ MISE) {\n    rewrite ^(.*)$ /mise/$1 break; # $1匹配()内的内容\n}\n```\n\n##### 四，Nginx中的flag\n\n|   flag    |                    描述                     |\n| :-------: | :-----------------------------------------: |\n|   last    |      停止rewrite检测，会再建立一次请求      |\n|   break   |       停止rewrite检测，不会再建立请求       |\n| redirect  | 返回302临时重定向，地址栏会显示跳转后的地址 |\n| permanent | 返回301永久重定向，地址栏会显示跳转后的地址 |\n\neg：\n\n```nginx\n# last break \nserver { \n  listen 80; \n  server_name localhost; \n  ... \n  location ~ ^/break { \n    rewrite ^/break /test/ break; \n  } \n  location ~ ^/last { \n    rewrite ^/last /test/ last; # 返回200 {\"status\":\"success\"} \n  } \n  location /test/ { \n    default_type application/json; \n    return 200 '{\"status\":\"success\"}'; \n  } \n}\n```\n\neg:\n\n```nginx\n# redirect permanent\nserver { \n  listen 80; \n  server_name localhost; \n  ... \n  location ~ ^/mantis { \n    #rewrite ^/mantis https://www.mantis.me/ permanent; #301 \n    rewrite ^/mantis https://www.mantis.me/ redirect; #302 \n  } \n}\n```\n\n","slug":"Nginx深入了解-高级-二","published":1,"updated":"2021-03-11T01:40:23.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb2k0017w7c9e9rt514k","content":"<p>Nginx的Rewrite规则，实现url的重定向以及重写，用来实现特定场景的支持；比如特定页面、接口的转发等。</p>\n<span id=\"more\"></span>\n\n<h5 id=\"一，场景\"><a href=\"#一，场景\" class=\"headerlink\" title=\"一，场景\"></a>一，场景</h5><p>1）URL访问跳转，支持开发设计</p>\n<p> 页面跳转、兼容性支持、展示效果等。</p>\n<p>2）SEO优化</p>\n<p> 伪静态改写，优化搜索引擎。</p>\n<p>3）维护</p>\n<p> 后台维护、流量转发等。</p>\n<p>4）安全</p>\n<p> 伪静态，将真实的页面进行伪装，让外部的爬虫、黑客攻击感觉不到是一个动态的页面。</p>\n<h5 id=\"二，配置语法\"><a href=\"#二，配置语法\" class=\"headerlink\" title=\"二，配置语法\"></a>二，配置语法</h5><blockquote>\n<p>Syntax：rewrite regex replacement [flag];</p>\n<p>Default：-</p>\n<p>Context：server、location、if</p>\n</blockquote>\n<p>eg：当网站需要维护时，可以指定一个页面，通过rewrite规则转发。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)$</span> /pages/main.html <span class=\"literal\">break</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"三，正则表达式\"><a href=\"#三，正则表达式\" class=\"headerlink\" title=\"三，正则表达式\"></a>三，正则表达式</h5><table>\n<thead>\n<tr>\n<th align=\"center\">表达式</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">.</td>\n<td align=\"center\">匹配除换行符以外的任意字符</td>\n</tr>\n<tr>\n<td align=\"center\">?</td>\n<td align=\"center\">重复0次或1次</td>\n</tr>\n<tr>\n<td align=\"center\">+</td>\n<td align=\"center\">重复1次或更多次</td>\n</tr>\n<tr>\n<td align=\"center\">*</td>\n<td align=\"center\">最少连接数，哪个机器连接数少就分发</td>\n</tr>\n<tr>\n<td align=\"center\">\\d</td>\n<td align=\"center\">匹配数字</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"center\">匹配字符串的开始</td>\n</tr>\n<tr>\n<td align=\"center\">$</td>\n<td align=\"center\">匹配字符串的结束</td>\n</tr>\n<tr>\n<td align=\"center\">{n}</td>\n<td align=\"center\">重复n次</td>\n</tr>\n<tr>\n<td align=\"center\">{n,}</td>\n<td align=\"center\">重复n次或更多次</td>\n</tr>\n<tr>\n<td align=\"center\">[c]</td>\n<td align=\"center\">匹配单个字符c</td>\n</tr>\n<tr>\n<td align=\"center\">[a-z]</td>\n<td align=\"center\">匹配a-z小写字母的任意一个</td>\n</tr>\n<tr>\n<td align=\"center\">\\</td>\n<td align=\"center\">转义字符</td>\n</tr>\n<tr>\n<td align=\"center\">()</td>\n<td align=\"center\">用于匹配括号之间的内容，通过$1、$2调用</td>\n</tr>\n</tbody></table>\n<p>eg：匹配user_agent信息里面MISE的</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">if</span> ($http_user_agent <span class=\"regexp\">~ MISE)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)$</span> /mise/<span class=\"variable\">$1</span> <span class=\"literal\">break</span>; <span class=\"comment\"># $1匹配()内的内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"四，Nginx中的flag\"><a href=\"#四，Nginx中的flag\" class=\"headerlink\" title=\"四，Nginx中的flag\"></a>四，Nginx中的flag</h5><table>\n<thead>\n<tr>\n<th align=\"center\">flag</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">last</td>\n<td align=\"center\">停止rewrite检测，会再建立一次请求</td>\n</tr>\n<tr>\n<td align=\"center\">break</td>\n<td align=\"center\">停止rewrite检测，不会再建立请求</td>\n</tr>\n<tr>\n<td align=\"center\">redirect</td>\n<td align=\"center\">返回302临时重定向，地址栏会显示跳转后的地址</td>\n</tr>\n<tr>\n<td align=\"center\">permanent</td>\n<td align=\"center\">返回301永久重定向，地址栏会显示跳转后的地址</td>\n</tr>\n</tbody></table>\n<p>eg：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># last break </span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ ^/break</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/break</span> /test/ <span class=\"literal\">break</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ ^/last</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/last</span> /test/ <span class=\"literal\">last</span>; <span class=\"comment\"># 返回200 &#123;&quot;status&quot;:&quot;success&quot;&#125; </span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"attribute\">location</span> /test/ &#123; </span><br><span class=\"line\">    <span class=\"attribute\">default_type</span> application/json; </span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">&#x27;&#123;&quot;status&quot;:&quot;success&quot;&#125;&#x27;</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># redirect permanent</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ ^/mantis</span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">#rewrite ^/mantis https://www.mantis.me/ permanent; #301 </span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/mantis</span> https://www.mantis.me/ <span class=\"literal\">redirect</span>; <span class=\"comment\">#302 </span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>Nginx的Rewrite规则，实现url的重定向以及重写，用来实现特定场景的支持；比如特定页面、接口的转发等。</p>","more":"<h5 id=\"一，场景\"><a href=\"#一，场景\" class=\"headerlink\" title=\"一，场景\"></a>一，场景</h5><p>1）URL访问跳转，支持开发设计</p>\n<p> 页面跳转、兼容性支持、展示效果等。</p>\n<p>2）SEO优化</p>\n<p> 伪静态改写，优化搜索引擎。</p>\n<p>3）维护</p>\n<p> 后台维护、流量转发等。</p>\n<p>4）安全</p>\n<p> 伪静态，将真实的页面进行伪装，让外部的爬虫、黑客攻击感觉不到是一个动态的页面。</p>\n<h5 id=\"二，配置语法\"><a href=\"#二，配置语法\" class=\"headerlink\" title=\"二，配置语法\"></a>二，配置语法</h5><blockquote>\n<p>Syntax：rewrite regex replacement [flag];</p>\n<p>Default：-</p>\n<p>Context：server、location、if</p>\n</blockquote>\n<p>eg：当网站需要维护时，可以指定一个页面，通过rewrite规则转发。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)$</span> /pages/main.html <span class=\"literal\">break</span>;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"三，正则表达式\"><a href=\"#三，正则表达式\" class=\"headerlink\" title=\"三，正则表达式\"></a>三，正则表达式</h5><table>\n<thead>\n<tr>\n<th align=\"center\">表达式</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">.</td>\n<td align=\"center\">匹配除换行符以外的任意字符</td>\n</tr>\n<tr>\n<td align=\"center\">?</td>\n<td align=\"center\">重复0次或1次</td>\n</tr>\n<tr>\n<td align=\"center\">+</td>\n<td align=\"center\">重复1次或更多次</td>\n</tr>\n<tr>\n<td align=\"center\">*</td>\n<td align=\"center\">最少连接数，哪个机器连接数少就分发</td>\n</tr>\n<tr>\n<td align=\"center\">\\d</td>\n<td align=\"center\">匹配数字</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"center\">匹配字符串的开始</td>\n</tr>\n<tr>\n<td align=\"center\">$</td>\n<td align=\"center\">匹配字符串的结束</td>\n</tr>\n<tr>\n<td align=\"center\">{n}</td>\n<td align=\"center\">重复n次</td>\n</tr>\n<tr>\n<td align=\"center\">{n,}</td>\n<td align=\"center\">重复n次或更多次</td>\n</tr>\n<tr>\n<td align=\"center\">[c]</td>\n<td align=\"center\">匹配单个字符c</td>\n</tr>\n<tr>\n<td align=\"center\">[a-z]</td>\n<td align=\"center\">匹配a-z小写字母的任意一个</td>\n</tr>\n<tr>\n<td align=\"center\">\\</td>\n<td align=\"center\">转义字符</td>\n</tr>\n<tr>\n<td align=\"center\">()</td>\n<td align=\"center\">用于匹配括号之间的内容，通过$1、$2调用</td>\n</tr>\n</tbody></table>\n<p>eg：匹配user_agent信息里面MISE的</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">if</span> ($http_user_agent <span class=\"regexp\">~ MISE)</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)$</span> /mise/<span class=\"variable\">$1</span> <span class=\"literal\">break</span>; <span class=\"comment\"># $1匹配()内的内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"四，Nginx中的flag\"><a href=\"#四，Nginx中的flag\" class=\"headerlink\" title=\"四，Nginx中的flag\"></a>四，Nginx中的flag</h5><table>\n<thead>\n<tr>\n<th align=\"center\">flag</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">last</td>\n<td align=\"center\">停止rewrite检测，会再建立一次请求</td>\n</tr>\n<tr>\n<td align=\"center\">break</td>\n<td align=\"center\">停止rewrite检测，不会再建立请求</td>\n</tr>\n<tr>\n<td align=\"center\">redirect</td>\n<td align=\"center\">返回302临时重定向，地址栏会显示跳转后的地址</td>\n</tr>\n<tr>\n<td align=\"center\">permanent</td>\n<td align=\"center\">返回301永久重定向，地址栏会显示跳转后的地址</td>\n</tr>\n</tbody></table>\n<p>eg：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># last break </span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ ^/break</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/break</span> /test/ <span class=\"literal\">break</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ ^/last</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/last</span> /test/ <span class=\"literal\">last</span>; <span class=\"comment\"># 返回200 &#123;&quot;status&quot;:&quot;success&quot;&#125; </span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"attribute\">location</span> /test/ &#123; </span><br><span class=\"line\">    <span class=\"attribute\">default_type</span> application/json; </span><br><span class=\"line\">    <span class=\"attribute\">return</span> <span class=\"number\">200</span> <span class=\"string\">&#x27;&#123;&quot;status&quot;:&quot;success&quot;&#125;&#x27;</span>; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>eg:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># redirect permanent</span></span><br><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">80</span>; </span><br><span class=\"line\">  <span class=\"attribute\">server_name</span> localhost; </span><br><span class=\"line\">  ... </span><br><span class=\"line\">  <span class=\"attribute\">location</span> <span class=\"regexp\">~ ^/mantis</span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">#rewrite ^/mantis https://www.mantis.me/ permanent; #301 </span></span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/mantis</span> https://www.mantis.me/ <span class=\"literal\">redirect</span>; <span class=\"comment\">#302 </span></span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Nginx深入了解-高级(五)","date":"2018-10-12T06:08:20.000Z","_content":"\n使用Nginx与Lua开发。Lua是一个简洁、轻量、可扩展性的脚本语言；充分结合Nginx的并发处理epoll优势和Lua的轻量实现简单的功能且高并发的场景。\n\n<!-- more -->\n\n##### Lua安装\n\n```bash\nyum install lua\n```\n\n##### Lua运行\n\n```bash\n# 命令行 \nCentos-Aliyun$ lua \nLua 5.1.4 Copyright(C) 1994-2018 Lua.org,PUC-Rio \n> orint(\"hello world\") \nhello world \n# 脚本 \nCentos-Aliyun$ cat test.lua \n#!/usr/bin/lua \nprint(\"hello world\") \nCentos-Aliyun$ chmod a+rx ./test/lua \nCentos-Aliyun$ ./test.lua \nhello word\n```\n\n##### Lua基本语法\n\n一，注释：- 行注释\n\n– [[\n\n块注释\n\n–]]\n\n二，变量\n\n```lua\na = 'alo\\n123\"'\na = \"alo\\n123\"\"\na = '\\97lo\\10\\04923\"'\na = [[alo\n123\"]]\n```\n\n布尔类型只有nil和false是false，数字0、’’ 空字符串(‘ \\0’)都是true\n\nlua中的变量如果没有特殊说明则都是全局变量，局部变量使用local定义。\n\n三，while循环语句\n\n```lua\nsum = 0\nnum = 1\nwhile num <= 100 do\n    sum = sum + num\n    num = num + 1\nend\nprint(\"sum = \", sum)\n```\n\nLua没有++或者+=操作。\n\n四，for循环语句\n\n```lua\nsum = 0\nfor i =1 100 do\n    sum = sum + i\nend\n```\n\n五，if判断语法\n\n```lua\nif age == 40 and sex == \"Male\" then \n  print(\"Mans age than 40\") \nelseif age > 60 and sex ~= \"Fameale\" then - ~=表示不等于 \n  print(\"age than 60\"); \nelse local age = io.read() - 从终断读取信息 \n  print(\"Your age is\"..age) - ..表示字符串拼接 \nend\n```\n\n> io库分别从stdin和stdout读写的read和write函数\n\n##### Nginx + Lua环境搭建\n\n- 安装LuaJIT\n\n```bash\nwget http://luajit.org/download/LuaJIT-2.0.2.tar.gz \nmake install PREFIX=/usr/local/LuaJIT \nexport LUAJIT_LIB=/usr/local/LuaJIT/lib \nexport LUAJIT_INC=/usr/local/LuaJIT/include/luajit-2.0\n```\n\n- ngx_devel_kit和lua-nginx-module安装\n\n```bash\ncd /opt/download \nwget https://github.com/simpl/ngx_devel_kit/archive/v0.3.0.tar.gz \nwget https://github.com/openresty/lua-nginx-module/archive/v0.10.9rc7.tar.gz \ntar -zxvf v0.3.0.tar.gz \ntar -zxvf v0.10.9rc7.tar.gz\n```\n\n- 重新编译nginx\n\n```bash\ncd /opt/download \nwget http://nginx.org/download/nginx-1.12.1.tag.gz \ntar -zxvf nginx-1.12.1.tag.gz cd nginx-1.12.1 \n./configure --prefix=/etc/nginx \\ \n--sbin-path=/usr/sbin/nginx \\ \n--modules-path=/usr/lib64/nginx/modules \\ \n--conf-path=/etc/nginx/nginx.conf \\ \n--error-log-path=/var/run/nginx/error.log \\ \n--http-log-path=/var/log/nginx/access.log \\ \n--pid-path=/var/run/nginx.pid \\ \n--lock-path=/var/run/nginx.lock \\ \n--http-client-body-temp-path=/var/cache/nginx/client_temp \\ \n--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\ \n--http-fastcgi-temp-path=/var/cache/nginx/fastcgi-temp \\ \n--http-uwsgi-temp-path=/var/cache/nginx/uwsgi-temp \\ \n--http-scgi-temp-path=/var/cache/nginx/scgi-temp \\ \n--user=nginx \\ \n--group=nginx \\ \n--with-compat \\ \n--with-file-aio \\ \n--with-threads \\ \n--with-http_addition_module \\ \n--with-http_auth_request_module \\ \n--with-http_dav_module \\ \n--with-http_flv_module \\ \n--with-http_gunzip_module \\ \n--with-http_gzip_static_module \\ \n--with-http_mp4_module \\ \n--with-http_random_index_module \\ \n--with-http_realip_module \\ \n--with-http_secure_link_module \\ \n--with-http_slice_module \\ \n--with-http_ssl_module \\ \n--with-http_stub_status_module \\ \n--with-http_sub_module \\ \n--with-http_v2_module \\ \n--with-mail \\ \n--with-mail_ssl_module \\ \n--with-stream \\ \n--with-stream_realip_module \\ \n--with-stream_ssl_module \\ \n--with-stream_ssl_preread_module \\ \n--with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC' \\ \n--with-ld-opt='-Wl,-z,relro -Wl,-z,now -pie' \\ \n--add-module=/opt/download/ngx_devel_kit-0.3.0 \\ \n--add-module=/opt/download/lua-nginx-module-0.10.9rc7 \nmake && make install ## make -j 4 && make install\n```\n\n##### Nginx调用Lua模块指令\n\n> Nginx的可插拔模块化加载执行共有11个处理阶段\n\n\n|                指令                 | 描述                                  |\n| :---------------------------------: | :------------------------------------ |\n|     set_by_lua、set_by_lua_file     | 设置Nginx变量，可以实现复杂的赋值逻辑 |\n|  access_by_lua、access_by_lua_file  | 请求访问阶段处理，用于访问控制        |\n| content_by_lua、content_by_lua_file | 内容处理器，接受请求处理并输出响应    |\n\n\n> Nginx Lua API\n\n\n|         API          | 描述                                  |\n| :---: | :---: |\n|       nix.var        | nginx变量                             |\n|  ngx.req.get_header  | 获取请求头                            |\n| ngx.req.get_uri_args | 获取url请求参数                       |\n|     ngx.redirect     | 重定向                                |\n|      ngx.print       | 输出相应内容                          |\n|       ngx.say        | 同ngx.print，但是会最后输出一个换行符 |\n|      ngx.header      | 输出响应头                            |\n|          …           |                                       |","source":"_posts/Nginx深入了解-高级-五.md","raw":"---\ntitle: Nginx深入了解-高级(五)\ndate: 2018-10-12 14:08:20\ntags: nginx\n---\n\n使用Nginx与Lua开发。Lua是一个简洁、轻量、可扩展性的脚本语言；充分结合Nginx的并发处理epoll优势和Lua的轻量实现简单的功能且高并发的场景。\n\n<!-- more -->\n\n##### Lua安装\n\n```bash\nyum install lua\n```\n\n##### Lua运行\n\n```bash\n# 命令行 \nCentos-Aliyun$ lua \nLua 5.1.4 Copyright(C) 1994-2018 Lua.org,PUC-Rio \n> orint(\"hello world\") \nhello world \n# 脚本 \nCentos-Aliyun$ cat test.lua \n#!/usr/bin/lua \nprint(\"hello world\") \nCentos-Aliyun$ chmod a+rx ./test/lua \nCentos-Aliyun$ ./test.lua \nhello word\n```\n\n##### Lua基本语法\n\n一，注释：- 行注释\n\n– [[\n\n块注释\n\n–]]\n\n二，变量\n\n```lua\na = 'alo\\n123\"'\na = \"alo\\n123\"\"\na = '\\97lo\\10\\04923\"'\na = [[alo\n123\"]]\n```\n\n布尔类型只有nil和false是false，数字0、’’ 空字符串(‘ \\0’)都是true\n\nlua中的变量如果没有特殊说明则都是全局变量，局部变量使用local定义。\n\n三，while循环语句\n\n```lua\nsum = 0\nnum = 1\nwhile num <= 100 do\n    sum = sum + num\n    num = num + 1\nend\nprint(\"sum = \", sum)\n```\n\nLua没有++或者+=操作。\n\n四，for循环语句\n\n```lua\nsum = 0\nfor i =1 100 do\n    sum = sum + i\nend\n```\n\n五，if判断语法\n\n```lua\nif age == 40 and sex == \"Male\" then \n  print(\"Mans age than 40\") \nelseif age > 60 and sex ~= \"Fameale\" then - ~=表示不等于 \n  print(\"age than 60\"); \nelse local age = io.read() - 从终断读取信息 \n  print(\"Your age is\"..age) - ..表示字符串拼接 \nend\n```\n\n> io库分别从stdin和stdout读写的read和write函数\n\n##### Nginx + Lua环境搭建\n\n- 安装LuaJIT\n\n```bash\nwget http://luajit.org/download/LuaJIT-2.0.2.tar.gz \nmake install PREFIX=/usr/local/LuaJIT \nexport LUAJIT_LIB=/usr/local/LuaJIT/lib \nexport LUAJIT_INC=/usr/local/LuaJIT/include/luajit-2.0\n```\n\n- ngx_devel_kit和lua-nginx-module安装\n\n```bash\ncd /opt/download \nwget https://github.com/simpl/ngx_devel_kit/archive/v0.3.0.tar.gz \nwget https://github.com/openresty/lua-nginx-module/archive/v0.10.9rc7.tar.gz \ntar -zxvf v0.3.0.tar.gz \ntar -zxvf v0.10.9rc7.tar.gz\n```\n\n- 重新编译nginx\n\n```bash\ncd /opt/download \nwget http://nginx.org/download/nginx-1.12.1.tag.gz \ntar -zxvf nginx-1.12.1.tag.gz cd nginx-1.12.1 \n./configure --prefix=/etc/nginx \\ \n--sbin-path=/usr/sbin/nginx \\ \n--modules-path=/usr/lib64/nginx/modules \\ \n--conf-path=/etc/nginx/nginx.conf \\ \n--error-log-path=/var/run/nginx/error.log \\ \n--http-log-path=/var/log/nginx/access.log \\ \n--pid-path=/var/run/nginx.pid \\ \n--lock-path=/var/run/nginx.lock \\ \n--http-client-body-temp-path=/var/cache/nginx/client_temp \\ \n--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\ \n--http-fastcgi-temp-path=/var/cache/nginx/fastcgi-temp \\ \n--http-uwsgi-temp-path=/var/cache/nginx/uwsgi-temp \\ \n--http-scgi-temp-path=/var/cache/nginx/scgi-temp \\ \n--user=nginx \\ \n--group=nginx \\ \n--with-compat \\ \n--with-file-aio \\ \n--with-threads \\ \n--with-http_addition_module \\ \n--with-http_auth_request_module \\ \n--with-http_dav_module \\ \n--with-http_flv_module \\ \n--with-http_gunzip_module \\ \n--with-http_gzip_static_module \\ \n--with-http_mp4_module \\ \n--with-http_random_index_module \\ \n--with-http_realip_module \\ \n--with-http_secure_link_module \\ \n--with-http_slice_module \\ \n--with-http_ssl_module \\ \n--with-http_stub_status_module \\ \n--with-http_sub_module \\ \n--with-http_v2_module \\ \n--with-mail \\ \n--with-mail_ssl_module \\ \n--with-stream \\ \n--with-stream_realip_module \\ \n--with-stream_ssl_module \\ \n--with-stream_ssl_preread_module \\ \n--with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC' \\ \n--with-ld-opt='-Wl,-z,relro -Wl,-z,now -pie' \\ \n--add-module=/opt/download/ngx_devel_kit-0.3.0 \\ \n--add-module=/opt/download/lua-nginx-module-0.10.9rc7 \nmake && make install ## make -j 4 && make install\n```\n\n##### Nginx调用Lua模块指令\n\n> Nginx的可插拔模块化加载执行共有11个处理阶段\n\n\n|                指令                 | 描述                                  |\n| :---------------------------------: | :------------------------------------ |\n|     set_by_lua、set_by_lua_file     | 设置Nginx变量，可以实现复杂的赋值逻辑 |\n|  access_by_lua、access_by_lua_file  | 请求访问阶段处理，用于访问控制        |\n| content_by_lua、content_by_lua_file | 内容处理器，接受请求处理并输出响应    |\n\n\n> Nginx Lua API\n\n\n|         API          | 描述                                  |\n| :---: | :---: |\n|       nix.var        | nginx变量                             |\n|  ngx.req.get_header  | 获取请求头                            |\n| ngx.req.get_uri_args | 获取url请求参数                       |\n|     ngx.redirect     | 重定向                                |\n|      ngx.print       | 输出相应内容                          |\n|       ngx.say        | 同ngx.print，但是会最后输出一个换行符 |\n|      ngx.header      | 输出响应头                            |\n|          …           |                                       |","slug":"Nginx深入了解-高级-五","published":1,"updated":"2021-03-11T01:40:31.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb2l0019w7c96vhl7zl7","content":"<p>使用Nginx与Lua开发。Lua是一个简洁、轻量、可扩展性的脚本语言；充分结合Nginx的并发处理epoll优势和Lua的轻量实现简单的功能且高并发的场景。</p>\n<span id=\"more\"></span>\n\n<h5 id=\"Lua安装\"><a href=\"#Lua安装\" class=\"headerlink\" title=\"Lua安装\"></a>Lua安装</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install lua</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Lua运行\"><a href=\"#Lua运行\" class=\"headerlink\" title=\"Lua运行\"></a>Lua运行</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 命令行 </span></span><br><span class=\"line\">Centos-Aliyun$ lua </span><br><span class=\"line\">Lua 5.1.4 Copyright(C) 1994-2018 Lua.org,PUC-Rio </span><br><span class=\"line\">&gt; orint(<span class=\"string\">&quot;hello world&quot;</span>) </span><br><span class=\"line\">hello world </span><br><span class=\"line\"><span class=\"comment\"># 脚本 </span></span><br><span class=\"line\">Centos-Aliyun$ cat test.lua </span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/lua </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello world&quot;</span>) </span><br><span class=\"line\">Centos-Aliyun$ chmod a+rx ./<span class=\"built_in\">test</span>/lua </span><br><span class=\"line\">Centos-Aliyun$ ./test.lua </span><br><span class=\"line\">hello word</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Lua基本语法\"><a href=\"#Lua基本语法\" class=\"headerlink\" title=\"Lua基本语法\"></a>Lua基本语法</h5><p>一，注释：- 行注释</p>\n<p>– [[</p>\n<p>块注释</p>\n<p>–]]</p>\n<p>二，变量</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">&#x27;alo\\n123&quot;&#x27;</span></span><br><span class=\"line\">a = <span class=\"string\">&quot;alo\\n123&quot;</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">a = &#x27;\\97lo\\10\\04923&quot;</span><span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">a = [[alo</span></span><br><span class=\"line\"><span class=\"string\">123&quot;]]</span></span><br></pre></td></tr></table></figure>\n\n<p>布尔类型只有nil和false是false，数字0、’’ 空字符串(‘ \\0’)都是true</p>\n<p>lua中的变量如果没有特殊说明则都是全局变量，局部变量使用local定义。</p>\n<p>三，while循环语句</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum = <span class=\"number\">0</span></span><br><span class=\"line\">num = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> num &lt;= <span class=\"number\">100</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    sum = sum + num</span><br><span class=\"line\">    num = num + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;sum = &quot;</span>, sum)</span><br></pre></td></tr></table></figure>\n\n<p>Lua没有++或者+=操作。</p>\n<p>四，for循环语句</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i =<span class=\"number\">1</span> <span class=\"number\">100</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    sum = sum + i</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>五，if判断语法</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> age == <span class=\"number\">40</span> <span class=\"keyword\">and</span> sex == <span class=\"string\">&quot;Male&quot;</span> <span class=\"keyword\">then</span> </span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Mans age than 40&quot;</span>) </span><br><span class=\"line\"><span class=\"keyword\">elseif</span> age &gt; <span class=\"number\">60</span> <span class=\"keyword\">and</span> sex ~= <span class=\"string\">&quot;Fameale&quot;</span> <span class=\"keyword\">then</span> - ~=表示不等于 </span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;age than 60&quot;</span>); </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">local</span> age = <span class=\"built_in\">io</span>.<span class=\"built_in\">read</span>() - 从终断读取信息 </span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Your age is&quot;</span>..age) - ..表示字符串拼接 </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>io库分别从stdin和stdout读写的read和write函数</p>\n</blockquote>\n<h5 id=\"Nginx-Lua环境搭建\"><a href=\"#Nginx-Lua环境搭建\" class=\"headerlink\" title=\"Nginx + Lua环境搭建\"></a>Nginx + Lua环境搭建</h5><ul>\n<li>安装LuaJIT</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://luajit.org/download/LuaJIT-2.0.2.tar.gz </span><br><span class=\"line\">make install PREFIX=/usr/<span class=\"built_in\">local</span>/LuaJIT </span><br><span class=\"line\"><span class=\"built_in\">export</span> LUAJIT_LIB=/usr/<span class=\"built_in\">local</span>/LuaJIT/lib </span><br><span class=\"line\"><span class=\"built_in\">export</span> LUAJIT_INC=/usr/<span class=\"built_in\">local</span>/LuaJIT/include/luajit-2.0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ngx_devel_kit和lua-nginx-module安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /opt/download </span><br><span class=\"line\">wget https://github.com/simpl/ngx_devel_kit/archive/v0.3.0.tar.gz </span><br><span class=\"line\">wget https://github.com/openresty/lua-nginx-module/archive/v0.10.9rc7.tar.gz </span><br><span class=\"line\">tar -zxvf v0.3.0.tar.gz </span><br><span class=\"line\">tar -zxvf v0.10.9rc7.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重新编译nginx</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /opt/download </span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.12.1.tag.gz </span><br><span class=\"line\">tar -zxvf nginx-1.12.1.tag.gz <span class=\"built_in\">cd</span> nginx-1.12.1 </span><br><span class=\"line\">./configure --prefix=/etc/nginx \\ </span><br><span class=\"line\">--sbin-path=/usr/sbin/nginx \\ </span><br><span class=\"line\">--modules-path=/usr/lib64/nginx/modules \\ </span><br><span class=\"line\">--conf-path=/etc/nginx/nginx.conf \\ </span><br><span class=\"line\">--error-log-path=/var/run/nginx/error.log \\ </span><br><span class=\"line\">--http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log \\ </span><br><span class=\"line\">--pid-path=/var/run/nginx.pid \\ </span><br><span class=\"line\">--lock-path=/var/run/nginx.lock \\ </span><br><span class=\"line\">--http-client-body-temp-path=/var/cache/nginx/client_temp \\ </span><br><span class=\"line\">--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\ </span><br><span class=\"line\">--http-fastcgi-temp-path=/var/cache/nginx/fastcgi-temp \\ </span><br><span class=\"line\">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi-temp \\ </span><br><span class=\"line\">--http-scgi-temp-path=/var/cache/nginx/scgi-temp \\ </span><br><span class=\"line\">--user=nginx \\ </span><br><span class=\"line\">--group=nginx \\ </span><br><span class=\"line\">--with-compat \\ </span><br><span class=\"line\">--with-file-aio \\ </span><br><span class=\"line\">--with-threads \\ </span><br><span class=\"line\">--with-http_addition_module \\ </span><br><span class=\"line\">--with-http_auth_request_module \\ </span><br><span class=\"line\">--with-http_dav_module \\ </span><br><span class=\"line\">--with-http_flv_module \\ </span><br><span class=\"line\">--with-http_gunzip_module \\ </span><br><span class=\"line\">--with-http_gzip_static_module \\ </span><br><span class=\"line\">--with-http_mp4_module \\ </span><br><span class=\"line\">--with-http_random_index_module \\ </span><br><span class=\"line\">--with-http_realip_module \\ </span><br><span class=\"line\">--with-http_secure_link_module \\ </span><br><span class=\"line\">--with-http_slice_module \\ </span><br><span class=\"line\">--with-http_ssl_module \\ </span><br><span class=\"line\">--with-http_stub_status_module \\ </span><br><span class=\"line\">--with-http_sub_module \\ </span><br><span class=\"line\">--with-http_v2_module \\ </span><br><span class=\"line\">--with-mail \\ </span><br><span class=\"line\">--with-mail_ssl_module \\ </span><br><span class=\"line\">--with-stream \\ </span><br><span class=\"line\">--with-stream_realip_module \\ </span><br><span class=\"line\">--with-stream_ssl_module \\ </span><br><span class=\"line\">--with-stream_ssl_preread_module \\ </span><br><span class=\"line\">--with-cc-opt=<span class=\"string\">&#x27;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC&#x27;</span> \\ </span><br><span class=\"line\">--with-ld-opt=<span class=\"string\">&#x27;-Wl,-z,relro -Wl,-z,now -pie&#x27;</span> \\ </span><br><span class=\"line\">--add-module=/opt/download/ngx_devel_kit-0.3.0 \\ </span><br><span class=\"line\">--add-module=/opt/download/lua-nginx-module-0.10.9rc7 </span><br><span class=\"line\">make &amp;&amp; make install <span class=\"comment\">## make -j 4 &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Nginx调用Lua模块指令\"><a href=\"#Nginx调用Lua模块指令\" class=\"headerlink\" title=\"Nginx调用Lua模块指令\"></a>Nginx调用Lua模块指令</h5><blockquote>\n<p>Nginx的可插拔模块化加载执行共有11个处理阶段</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">指令</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">set_by_lua、set_by_lua_file</td>\n<td align=\"left\">设置Nginx变量，可以实现复杂的赋值逻辑</td>\n</tr>\n<tr>\n<td align=\"center\">access_by_lua、access_by_lua_file</td>\n<td align=\"left\">请求访问阶段处理，用于访问控制</td>\n</tr>\n<tr>\n<td align=\"center\">content_by_lua、content_by_lua_file</td>\n<td align=\"left\">内容处理器，接受请求处理并输出响应</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Nginx Lua API</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">nix.var</td>\n<td align=\"center\">nginx变量</td>\n</tr>\n<tr>\n<td align=\"center\">ngx.req.get_header</td>\n<td align=\"center\">获取请求头</td>\n</tr>\n<tr>\n<td align=\"center\">ngx.req.get_uri_args</td>\n<td align=\"center\">获取url请求参数</td>\n</tr>\n<tr>\n<td align=\"center\">ngx.redirect</td>\n<td align=\"center\">重定向</td>\n</tr>\n<tr>\n<td align=\"center\">ngx.print</td>\n<td align=\"center\">输出相应内容</td>\n</tr>\n<tr>\n<td align=\"center\">ngx.say</td>\n<td align=\"center\">同ngx.print，但是会最后输出一个换行符</td>\n</tr>\n<tr>\n<td align=\"center\">ngx.header</td>\n<td align=\"center\">输出响应头</td>\n</tr>\n<tr>\n<td align=\"center\">…</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<p>使用Nginx与Lua开发。Lua是一个简洁、轻量、可扩展性的脚本语言；充分结合Nginx的并发处理epoll优势和Lua的轻量实现简单的功能且高并发的场景。</p>","more":"<h5 id=\"Lua安装\"><a href=\"#Lua安装\" class=\"headerlink\" title=\"Lua安装\"></a>Lua安装</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install lua</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Lua运行\"><a href=\"#Lua运行\" class=\"headerlink\" title=\"Lua运行\"></a>Lua运行</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 命令行 </span></span><br><span class=\"line\">Centos-Aliyun$ lua </span><br><span class=\"line\">Lua 5.1.4 Copyright(C) 1994-2018 Lua.org,PUC-Rio </span><br><span class=\"line\">&gt; orint(<span class=\"string\">&quot;hello world&quot;</span>) </span><br><span class=\"line\">hello world </span><br><span class=\"line\"><span class=\"comment\"># 脚本 </span></span><br><span class=\"line\">Centos-Aliyun$ cat test.lua </span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/lua </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello world&quot;</span>) </span><br><span class=\"line\">Centos-Aliyun$ chmod a+rx ./<span class=\"built_in\">test</span>/lua </span><br><span class=\"line\">Centos-Aliyun$ ./test.lua </span><br><span class=\"line\">hello word</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Lua基本语法\"><a href=\"#Lua基本语法\" class=\"headerlink\" title=\"Lua基本语法\"></a>Lua基本语法</h5><p>一，注释：- 行注释</p>\n<p>– [[</p>\n<p>块注释</p>\n<p>–]]</p>\n<p>二，变量</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">&#x27;alo\\n123&quot;&#x27;</span></span><br><span class=\"line\">a = <span class=\"string\">&quot;alo\\n123&quot;</span><span class=\"string\">&quot;</span></span><br><span class=\"line\"><span class=\"string\">a = &#x27;\\97lo\\10\\04923&quot;</span><span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">a = [[alo</span></span><br><span class=\"line\"><span class=\"string\">123&quot;]]</span></span><br></pre></td></tr></table></figure>\n\n<p>布尔类型只有nil和false是false，数字0、’’ 空字符串(‘ \\0’)都是true</p>\n<p>lua中的变量如果没有特殊说明则都是全局变量，局部变量使用local定义。</p>\n<p>三，while循环语句</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum = <span class=\"number\">0</span></span><br><span class=\"line\">num = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> num &lt;= <span class=\"number\">100</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    sum = sum + num</span><br><span class=\"line\">    num = num + <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;sum = &quot;</span>, sum)</span><br></pre></td></tr></table></figure>\n\n<p>Lua没有++或者+=操作。</p>\n<p>四，for循环语句</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i =<span class=\"number\">1</span> <span class=\"number\">100</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">    sum = sum + i</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>五，if判断语法</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> age == <span class=\"number\">40</span> <span class=\"keyword\">and</span> sex == <span class=\"string\">&quot;Male&quot;</span> <span class=\"keyword\">then</span> </span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Mans age than 40&quot;</span>) </span><br><span class=\"line\"><span class=\"keyword\">elseif</span> age &gt; <span class=\"number\">60</span> <span class=\"keyword\">and</span> sex ~= <span class=\"string\">&quot;Fameale&quot;</span> <span class=\"keyword\">then</span> - ~=表示不等于 </span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;age than 60&quot;</span>); </span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">local</span> age = <span class=\"built_in\">io</span>.<span class=\"built_in\">read</span>() - 从终断读取信息 </span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Your age is&quot;</span>..age) - ..表示字符串拼接 </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>io库分别从stdin和stdout读写的read和write函数</p>\n</blockquote>\n<h5 id=\"Nginx-Lua环境搭建\"><a href=\"#Nginx-Lua环境搭建\" class=\"headerlink\" title=\"Nginx + Lua环境搭建\"></a>Nginx + Lua环境搭建</h5><ul>\n<li>安装LuaJIT</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://luajit.org/download/LuaJIT-2.0.2.tar.gz </span><br><span class=\"line\">make install PREFIX=/usr/<span class=\"built_in\">local</span>/LuaJIT </span><br><span class=\"line\"><span class=\"built_in\">export</span> LUAJIT_LIB=/usr/<span class=\"built_in\">local</span>/LuaJIT/lib </span><br><span class=\"line\"><span class=\"built_in\">export</span> LUAJIT_INC=/usr/<span class=\"built_in\">local</span>/LuaJIT/include/luajit-2.0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ngx_devel_kit和lua-nginx-module安装</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /opt/download </span><br><span class=\"line\">wget https://github.com/simpl/ngx_devel_kit/archive/v0.3.0.tar.gz </span><br><span class=\"line\">wget https://github.com/openresty/lua-nginx-module/archive/v0.10.9rc7.tar.gz </span><br><span class=\"line\">tar -zxvf v0.3.0.tar.gz </span><br><span class=\"line\">tar -zxvf v0.10.9rc7.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重新编译nginx</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /opt/download </span><br><span class=\"line\">wget http://nginx.org/download/nginx-1.12.1.tag.gz </span><br><span class=\"line\">tar -zxvf nginx-1.12.1.tag.gz <span class=\"built_in\">cd</span> nginx-1.12.1 </span><br><span class=\"line\">./configure --prefix=/etc/nginx \\ </span><br><span class=\"line\">--sbin-path=/usr/sbin/nginx \\ </span><br><span class=\"line\">--modules-path=/usr/lib64/nginx/modules \\ </span><br><span class=\"line\">--conf-path=/etc/nginx/nginx.conf \\ </span><br><span class=\"line\">--error-log-path=/var/run/nginx/error.log \\ </span><br><span class=\"line\">--http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log \\ </span><br><span class=\"line\">--pid-path=/var/run/nginx.pid \\ </span><br><span class=\"line\">--lock-path=/var/run/nginx.lock \\ </span><br><span class=\"line\">--http-client-body-temp-path=/var/cache/nginx/client_temp \\ </span><br><span class=\"line\">--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\ </span><br><span class=\"line\">--http-fastcgi-temp-path=/var/cache/nginx/fastcgi-temp \\ </span><br><span class=\"line\">--http-uwsgi-temp-path=/var/cache/nginx/uwsgi-temp \\ </span><br><span class=\"line\">--http-scgi-temp-path=/var/cache/nginx/scgi-temp \\ </span><br><span class=\"line\">--user=nginx \\ </span><br><span class=\"line\">--group=nginx \\ </span><br><span class=\"line\">--with-compat \\ </span><br><span class=\"line\">--with-file-aio \\ </span><br><span class=\"line\">--with-threads \\ </span><br><span class=\"line\">--with-http_addition_module \\ </span><br><span class=\"line\">--with-http_auth_request_module \\ </span><br><span class=\"line\">--with-http_dav_module \\ </span><br><span class=\"line\">--with-http_flv_module \\ </span><br><span class=\"line\">--with-http_gunzip_module \\ </span><br><span class=\"line\">--with-http_gzip_static_module \\ </span><br><span class=\"line\">--with-http_mp4_module \\ </span><br><span class=\"line\">--with-http_random_index_module \\ </span><br><span class=\"line\">--with-http_realip_module \\ </span><br><span class=\"line\">--with-http_secure_link_module \\ </span><br><span class=\"line\">--with-http_slice_module \\ </span><br><span class=\"line\">--with-http_ssl_module \\ </span><br><span class=\"line\">--with-http_stub_status_module \\ </span><br><span class=\"line\">--with-http_sub_module \\ </span><br><span class=\"line\">--with-http_v2_module \\ </span><br><span class=\"line\">--with-mail \\ </span><br><span class=\"line\">--with-mail_ssl_module \\ </span><br><span class=\"line\">--with-stream \\ </span><br><span class=\"line\">--with-stream_realip_module \\ </span><br><span class=\"line\">--with-stream_ssl_module \\ </span><br><span class=\"line\">--with-stream_ssl_preread_module \\ </span><br><span class=\"line\">--with-cc-opt=<span class=\"string\">&#x27;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic -fPIC&#x27;</span> \\ </span><br><span class=\"line\">--with-ld-opt=<span class=\"string\">&#x27;-Wl,-z,relro -Wl,-z,now -pie&#x27;</span> \\ </span><br><span class=\"line\">--add-module=/opt/download/ngx_devel_kit-0.3.0 \\ </span><br><span class=\"line\">--add-module=/opt/download/lua-nginx-module-0.10.9rc7 </span><br><span class=\"line\">make &amp;&amp; make install <span class=\"comment\">## make -j 4 &amp;&amp; make install</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Nginx调用Lua模块指令\"><a href=\"#Nginx调用Lua模块指令\" class=\"headerlink\" title=\"Nginx调用Lua模块指令\"></a>Nginx调用Lua模块指令</h5><blockquote>\n<p>Nginx的可插拔模块化加载执行共有11个处理阶段</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">指令</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">set_by_lua、set_by_lua_file</td>\n<td align=\"left\">设置Nginx变量，可以实现复杂的赋值逻辑</td>\n</tr>\n<tr>\n<td align=\"center\">access_by_lua、access_by_lua_file</td>\n<td align=\"left\">请求访问阶段处理，用于访问控制</td>\n</tr>\n<tr>\n<td align=\"center\">content_by_lua、content_by_lua_file</td>\n<td align=\"left\">内容处理器，接受请求处理并输出响应</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Nginx Lua API</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"center\">API</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">nix.var</td>\n<td align=\"center\">nginx变量</td>\n</tr>\n<tr>\n<td align=\"center\">ngx.req.get_header</td>\n<td align=\"center\">获取请求头</td>\n</tr>\n<tr>\n<td align=\"center\">ngx.req.get_uri_args</td>\n<td align=\"center\">获取url请求参数</td>\n</tr>\n<tr>\n<td align=\"center\">ngx.redirect</td>\n<td align=\"center\">重定向</td>\n</tr>\n<tr>\n<td align=\"center\">ngx.print</td>\n<td align=\"center\">输出相应内容</td>\n</tr>\n<tr>\n<td align=\"center\">ngx.say</td>\n<td align=\"center\">同ngx.print，但是会最后输出一个换行符</td>\n</tr>\n<tr>\n<td align=\"center\">ngx.header</td>\n<td align=\"center\">输出响应头</td>\n</tr>\n<tr>\n<td align=\"center\">…</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>"},{"title":"Nginx深入了解-高级(四)","date":"2018-09-25T06:08:20.000Z","_content":"\nNginx的https原理及实际应用场景。\n\n<!-- more -->\n\n#### HTTPS加密协议原理：\n\n##### 中间人伪造客户端和服务端:\n\n> 使用CA证书解决中间人伪造客户端和服务端的风险，客户端对数字证书进行CA校验：\n\n- 如果校验成功则利用公钥加密\n- 如果校验失败则停止回话\n\n##### HTTPS服务优化\n\n- 方法一：激活keepalive长连接\n- 方法二：设置ssl session缓存\n\n配置实例:\n\n```nginx\nserver { \n\tlisten 443; \n\tserver_name ....; \n\n\tkeepalive_time 100; // 设置超时时间 \n\n\tssl on; \n\tssl_session_cache shared:SSL:10m; \n\tssl_session_timeout 10m; \n\t\n\tssl_certificate ....; \n\tssl certificate_key ....; \n\t.... \n}\n```","source":"_posts/Nginx深入了解-高级-四.md","raw":"---\ntitle: Nginx深入了解-高级(四)\ndate: 2018-09-25 14:08:20\ntags: nginx\n---\n\nNginx的https原理及实际应用场景。\n\n<!-- more -->\n\n#### HTTPS加密协议原理：\n\n##### 中间人伪造客户端和服务端:\n\n> 使用CA证书解决中间人伪造客户端和服务端的风险，客户端对数字证书进行CA校验：\n\n- 如果校验成功则利用公钥加密\n- 如果校验失败则停止回话\n\n##### HTTPS服务优化\n\n- 方法一：激活keepalive长连接\n- 方法二：设置ssl session缓存\n\n配置实例:\n\n```nginx\nserver { \n\tlisten 443; \n\tserver_name ....; \n\n\tkeepalive_time 100; // 设置超时时间 \n\n\tssl on; \n\tssl_session_cache shared:SSL:10m; \n\tssl_session_timeout 10m; \n\t\n\tssl_certificate ....; \n\tssl certificate_key ....; \n\t.... \n}\n```","slug":"Nginx深入了解-高级-四","published":1,"updated":"2021-03-11T01:40:36.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb2m001cw7c90gl6gy9n","content":"<p>Nginx的https原理及实际应用场景。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"HTTPS加密协议原理：\"><a href=\"#HTTPS加密协议原理：\" class=\"headerlink\" title=\"HTTPS加密协议原理：\"></a>HTTPS加密协议原理：</h4><h5 id=\"中间人伪造客户端和服务端\"><a href=\"#中间人伪造客户端和服务端\" class=\"headerlink\" title=\"中间人伪造客户端和服务端:\"></a>中间人伪造客户端和服务端:</h5><blockquote>\n<p>使用CA证书解决中间人伪造客户端和服务端的风险，客户端对数字证书进行CA校验：</p>\n</blockquote>\n<ul>\n<li>如果校验成功则利用公钥加密</li>\n<li>如果校验失败则停止回话</li>\n</ul>\n<h5 id=\"HTTPS服务优化\"><a href=\"#HTTPS服务优化\" class=\"headerlink\" title=\"HTTPS服务优化\"></a>HTTPS服务优化</h5><ul>\n<li>方法一：激活keepalive长连接</li>\n<li>方法二：设置ssl session缓存</li>\n</ul>\n<p>配置实例:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">443</span>; </span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> ....; </span><br><span class=\"line\"></span><br><span class=\"line\">\tkeepalive_time 100; // 设置超时时间 </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attribute\">ssl</span> <span class=\"literal\">on</span>; </span><br><span class=\"line\">\t<span class=\"attribute\">ssl_session_cache</span> shared:SSL:<span class=\"number\">10m</span>; </span><br><span class=\"line\">\t<span class=\"attribute\">ssl_session_timeout</span> <span class=\"number\">10m</span>; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"attribute\">ssl_certificate</span> ....; </span><br><span class=\"line\">\t<span class=\"attribute\">ssl</span> certificate_key ....; </span><br><span class=\"line\">\t.... </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>Nginx的https原理及实际应用场景。</p>","more":"<h4 id=\"HTTPS加密协议原理：\"><a href=\"#HTTPS加密协议原理：\" class=\"headerlink\" title=\"HTTPS加密协议原理：\"></a>HTTPS加密协议原理：</h4><h5 id=\"中间人伪造客户端和服务端\"><a href=\"#中间人伪造客户端和服务端\" class=\"headerlink\" title=\"中间人伪造客户端和服务端:\"></a>中间人伪造客户端和服务端:</h5><blockquote>\n<p>使用CA证书解决中间人伪造客户端和服务端的风险，客户端对数字证书进行CA校验：</p>\n</blockquote>\n<ul>\n<li>如果校验成功则利用公钥加密</li>\n<li>如果校验失败则停止回话</li>\n</ul>\n<h5 id=\"HTTPS服务优化\"><a href=\"#HTTPS服务优化\" class=\"headerlink\" title=\"HTTPS服务优化\"></a>HTTPS服务优化</h5><ul>\n<li>方法一：激活keepalive长连接</li>\n<li>方法二：设置ssl session缓存</li>\n</ul>\n<p>配置实例:</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123; </span><br><span class=\"line\">\t<span class=\"attribute\">listen</span> <span class=\"number\">443</span>; </span><br><span class=\"line\">\t<span class=\"attribute\">server_name</span> ....; </span><br><span class=\"line\"></span><br><span class=\"line\">\tkeepalive_time 100; // 设置超时时间 </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"attribute\">ssl</span> <span class=\"literal\">on</span>; </span><br><span class=\"line\">\t<span class=\"attribute\">ssl_session_cache</span> shared:SSL:<span class=\"number\">10m</span>; </span><br><span class=\"line\">\t<span class=\"attribute\">ssl_session_timeout</span> <span class=\"number\">10m</span>; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"attribute\">ssl_certificate</span> ....; </span><br><span class=\"line\">\t<span class=\"attribute\">ssl</span> certificate_key ....; </span><br><span class=\"line\">\t.... </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Redis在实际工作中遇到的各种应用场景","date":"2019-01-30T05:39:48.000Z","_content":"\n> Redis作为一种内存类型的数据库工具，在实际工作中除了常见的用来做缓存外，还有很多实际的用处；如并发场景下的的事务锁、实现统计功能、sug等。\n\n<!-- more -->\n\nRedis有很多种数据结构：字符串(string)、散列(hash)、列表(list)、集合(set)、有序集合(zset，使用Skip List跳跃表实现)、位图(bitmap)、HyperLogLog、地图坐标(GEO)；Redis相比于其他的NoSQL数据库在执行速度方面快很多且效率很高，这是因为它是基于内存来存储相关数据的，且它是基于多路复用的时间响应系统。\n\nRedis支持事务、内存淘汰、持久化(AOF、RDB、RDB+AOF)。\n\n多机支持：主从复制（单master多slave）、高可用、集群。\n\neg: 获取Redis客户端\n\n```go\npackage util \nimport \"github.com/go-redis/redis\" \nfunc RedisClient() *redis.Client { \n  client := redis.NewClient(&redis.Options{ \n    Addr: \"127.0.0.1:6379\", \n    Password: \"\", \n    DB: 0, \n  }) \n  return client \n}\n```\n\n#### 实际场景应用\n\n##### 一，锁\n\n> 锁是⼀一种同步机制， 它可以保证⼀一项资源在任何时候只能被⼀一个进程使⽤用， 如果有其他进程想要 使⽤用相同的资源， 那么它们就必须等待， 直到正在使⽤用资源的进程放弃使⽤用权为⽌止。\n\n锁的两种操作：获取(acquire)和释放(release)。\n\n实现锁通常用到三种方式来实现：字符串、事务和带NX的SET。\n\n- 字符串\n\n将⼀一个字符串串键⽤用作锁，如果这个键有值，那么说明锁已被获取;反之，如果键没有值，那么说明\n锁未被获取，程序可以通过为其设置值来获取锁。\n\n```go\npackage util \nimport \"github.com/chunlintang/frequency-limit/util\" \n\nconst LOCK_KEY = \"lock_key\" \nconst LOCK_VALUE = \"lock_value\" \nvar client = util.RedisClient() \n// 获取锁，查看所是否存在 \nfunc acquire() bool { \n  current_value, _ := client.Get(lock_key).Result() \n  if current_value == \"\" { \n    if _, err := client.Set(lock_key, lock_value, 0).Result(); err != nil { \n      return false \n    } \n    return true \n  } \n  return false \n} \n// 释放锁 \nfunc release() bool { \n  if _, err := client.Del(lock_key).Result(); err != nil { \n    return false \n  } \n  return true \n}\n```\n\n> 弊端\n\n因为 GET 和 SET 在两个不不同的请求中执⾏行行，在它们之间可 能有其他请求已经改变了了锁键的值，导致“锁键为空”这⼀一判 断不不再为真，从⽽而引发多个客户端之间的竞争条件。\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190217123339.png)\n\n- 事务\n\n锁的基本实现⽅方法跟之前⼀一样，但使⽤用 Redis 的事务特性保证操作的安全性。\n\n```go\nfunc acquire() bool { \n  txf := func(tx *redis.Tx) error { \n    // get current value or zero \n    n, err := tx.Get(lock_key).Int() \n    if err != nil && err != redis.Nil { \n      return err \n    } \n    // actual opperation (local in optimistic lock) \n    n++ \n    // runs only if the watched keys remain unchanged \n    _, err = tx.Pipelined(func(pipe redis.Pipeliner) error { \n      // pipe handles the error case \n      pipe.Set(lock_key, n, 0) \n      return nil \n    }) \n    return err \n  } \n  err := client.Watch(txf, lock_key) \n  if err != redis.TxFailedErr { \n    return false \n  } \n  current_value, _ := client.Get(lock_key).Result() \n  if current_value == \"\" { \n    pl := client.TxPipeline() \n    client.Set(lock_key, lock_value, 0) \n    repl, _ := pl.Exec() \n    if repl != nil { \n      return true \n    } \n  } \n  return false \n}\n```\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190217131144.png)\n\n- 带NX的SET\n\n```go\nfunc acquire() bool  {\n    repl, _ := client.SetNX(lock_key, lock_value, 0).Result()\n    return repl\n}\n```\n\n##### 二，计数器，统计当前在线用户数\n\n可使用集合、位图和HyperLogLog实现。\n\n- 集合\n\n当⼀一个新的用户上线时，将它的⽤用户名添加到记录在线⽤用户的集合当中。\n\n```go\nconst online_user = \"ONLINE_USER\" \nvar client = util.RedisClient() \n\nfunc setOnline(user string) bool { \n  if _, err := client.SAdd(online_user, user).Result(); err != nil { \n    return false \n  } \n  return true \n} \n\nfunc countOnline() int64 { \n  repl, _ := client.SCard(online_user).Result() \n  return repl \n} \n\nfunc existOnline(user string) bool { \n  repl, _ := client.SIsMember(online_user, user).Result() \n  return repl \n}\n```\n\n> 弊端\n\n集合的体积将随着元素的增加⽽而增加，集合包含的元素越多，每个元素的体积越⼤大，集合的体积也\n就越⼤大。另外，因为使⽤用 Redis 储存信息还有⼀一些额外的消耗(overhead)，所以实际的内存占⽤用数量量 将⽐比这个估算值更更⾼高。\n\n- 位图\n\n为每个⽤用户创建⼀一个相对应的数字 ID ，当⼀一个⽤用户上线时，使⽤用他的 ID 作为索引，将位图指定索 引上的⼆二进制位设置为 1 。\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190217134254.png)\n\n```go\nconst online_user_bitmap = \"ONLINE_USER_BITMAP\" \n\nfunc setOnline(user_id int64) bool { \n  if _, err := client.SetBit(online_user_bitmap, user_id, 1).Result(); err != nil {\n    return false \n  } \n  return true \n} \n\nfunc countOnline() int64 { \n  repl, _ := client.BitCount(online_user_bitmap, &redis.BitCount{0, 0}).Result() \n  return repl \n} \n\nfunc existOnline(user_id int64) bool { \n  repl, _ := client.GetBit(online_user_bitmap, user_id).Result() \n  return repl == 1 \n}\n```\n\n虽然位图的体积仍然会随着⽤用户数量量的增多⽽而变⼤大，但因为记录每个⽤用户所需的内存数量量从原来的 平均 10 字节变成了了 1 位，所以实现⽅方法⼆二将节约⼤大量量内存。\n\n- HyperLogLog\n\n当⼀一个⽤用户上线时，使⽤用统计在线⽤用户数量量的 HyperLogLog 对其进⾏行行计数。\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190217140531.png)\n\n```go\nconst online_use_hll = \"ONLINE_USER_HLL\"\n\nfunc setOnline(user string) {\n    client.PFAdd(online_use_hll, user)\n}\n\nfunc countOnline() int64 {\n    repl, _ := client.PFCount(online_use_hll).Result()\n    return repl\n}\n```\n\n##### 三，自动补全\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190217141017.png)\n\n利用权重实现。\n\n```go\npackage autocomplete \n\nimport ( \n  \"fmt\" \"github.com/chunlintang/frequency-limit/util\" \n) \n\nconst autocomplete = \"autocomplete::\" \n\nvar client = util.RedisClient() \n\nfunc Feed(prefix, content string, weight float64) { \n  for i, _ := range prefix { \n    segment := prefix[:i+1] \n    key := autocomplete + segment \n    if _, err := client.ZIncrBy(key, weight, content).Result(); err != nil {\n      fmt.Println(\"ZIncrBy err\") \n    } \n  } \n} \n\nfunc Hint(prefix string, count int64) []string { \n  key := autocomplete + prefix \n  //result, _ := client.Cmd(\"ZREVANGE\", key, 0, count-1).List() \n  result, _ := client.ZRevRange(key, 0, count-1).Result() \n  return result \n}\n```\n\n","source":"_posts/Redis在实际工作中遇到的各种应用场景.md","raw":"---\ntitle: Redis在实际工作中遇到的各种应用场景\ndate: 2019-01-30 13:39:48\ntags: redis\n---\n\n> Redis作为一种内存类型的数据库工具，在实际工作中除了常见的用来做缓存外，还有很多实际的用处；如并发场景下的的事务锁、实现统计功能、sug等。\n\n<!-- more -->\n\nRedis有很多种数据结构：字符串(string)、散列(hash)、列表(list)、集合(set)、有序集合(zset，使用Skip List跳跃表实现)、位图(bitmap)、HyperLogLog、地图坐标(GEO)；Redis相比于其他的NoSQL数据库在执行速度方面快很多且效率很高，这是因为它是基于内存来存储相关数据的，且它是基于多路复用的时间响应系统。\n\nRedis支持事务、内存淘汰、持久化(AOF、RDB、RDB+AOF)。\n\n多机支持：主从复制（单master多slave）、高可用、集群。\n\neg: 获取Redis客户端\n\n```go\npackage util \nimport \"github.com/go-redis/redis\" \nfunc RedisClient() *redis.Client { \n  client := redis.NewClient(&redis.Options{ \n    Addr: \"127.0.0.1:6379\", \n    Password: \"\", \n    DB: 0, \n  }) \n  return client \n}\n```\n\n#### 实际场景应用\n\n##### 一，锁\n\n> 锁是⼀一种同步机制， 它可以保证⼀一项资源在任何时候只能被⼀一个进程使⽤用， 如果有其他进程想要 使⽤用相同的资源， 那么它们就必须等待， 直到正在使⽤用资源的进程放弃使⽤用权为⽌止。\n\n锁的两种操作：获取(acquire)和释放(release)。\n\n实现锁通常用到三种方式来实现：字符串、事务和带NX的SET。\n\n- 字符串\n\n将⼀一个字符串串键⽤用作锁，如果这个键有值，那么说明锁已被获取;反之，如果键没有值，那么说明\n锁未被获取，程序可以通过为其设置值来获取锁。\n\n```go\npackage util \nimport \"github.com/chunlintang/frequency-limit/util\" \n\nconst LOCK_KEY = \"lock_key\" \nconst LOCK_VALUE = \"lock_value\" \nvar client = util.RedisClient() \n// 获取锁，查看所是否存在 \nfunc acquire() bool { \n  current_value, _ := client.Get(lock_key).Result() \n  if current_value == \"\" { \n    if _, err := client.Set(lock_key, lock_value, 0).Result(); err != nil { \n      return false \n    } \n    return true \n  } \n  return false \n} \n// 释放锁 \nfunc release() bool { \n  if _, err := client.Del(lock_key).Result(); err != nil { \n    return false \n  } \n  return true \n}\n```\n\n> 弊端\n\n因为 GET 和 SET 在两个不不同的请求中执⾏行行，在它们之间可 能有其他请求已经改变了了锁键的值，导致“锁键为空”这⼀一判 断不不再为真，从⽽而引发多个客户端之间的竞争条件。\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190217123339.png)\n\n- 事务\n\n锁的基本实现⽅方法跟之前⼀一样，但使⽤用 Redis 的事务特性保证操作的安全性。\n\n```go\nfunc acquire() bool { \n  txf := func(tx *redis.Tx) error { \n    // get current value or zero \n    n, err := tx.Get(lock_key).Int() \n    if err != nil && err != redis.Nil { \n      return err \n    } \n    // actual opperation (local in optimistic lock) \n    n++ \n    // runs only if the watched keys remain unchanged \n    _, err = tx.Pipelined(func(pipe redis.Pipeliner) error { \n      // pipe handles the error case \n      pipe.Set(lock_key, n, 0) \n      return nil \n    }) \n    return err \n  } \n  err := client.Watch(txf, lock_key) \n  if err != redis.TxFailedErr { \n    return false \n  } \n  current_value, _ := client.Get(lock_key).Result() \n  if current_value == \"\" { \n    pl := client.TxPipeline() \n    client.Set(lock_key, lock_value, 0) \n    repl, _ := pl.Exec() \n    if repl != nil { \n      return true \n    } \n  } \n  return false \n}\n```\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190217131144.png)\n\n- 带NX的SET\n\n```go\nfunc acquire() bool  {\n    repl, _ := client.SetNX(lock_key, lock_value, 0).Result()\n    return repl\n}\n```\n\n##### 二，计数器，统计当前在线用户数\n\n可使用集合、位图和HyperLogLog实现。\n\n- 集合\n\n当⼀一个新的用户上线时，将它的⽤用户名添加到记录在线⽤用户的集合当中。\n\n```go\nconst online_user = \"ONLINE_USER\" \nvar client = util.RedisClient() \n\nfunc setOnline(user string) bool { \n  if _, err := client.SAdd(online_user, user).Result(); err != nil { \n    return false \n  } \n  return true \n} \n\nfunc countOnline() int64 { \n  repl, _ := client.SCard(online_user).Result() \n  return repl \n} \n\nfunc existOnline(user string) bool { \n  repl, _ := client.SIsMember(online_user, user).Result() \n  return repl \n}\n```\n\n> 弊端\n\n集合的体积将随着元素的增加⽽而增加，集合包含的元素越多，每个元素的体积越⼤大，集合的体积也\n就越⼤大。另外，因为使⽤用 Redis 储存信息还有⼀一些额外的消耗(overhead)，所以实际的内存占⽤用数量量 将⽐比这个估算值更更⾼高。\n\n- 位图\n\n为每个⽤用户创建⼀一个相对应的数字 ID ，当⼀一个⽤用户上线时，使⽤用他的 ID 作为索引，将位图指定索 引上的⼆二进制位设置为 1 。\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190217134254.png)\n\n```go\nconst online_user_bitmap = \"ONLINE_USER_BITMAP\" \n\nfunc setOnline(user_id int64) bool { \n  if _, err := client.SetBit(online_user_bitmap, user_id, 1).Result(); err != nil {\n    return false \n  } \n  return true \n} \n\nfunc countOnline() int64 { \n  repl, _ := client.BitCount(online_user_bitmap, &redis.BitCount{0, 0}).Result() \n  return repl \n} \n\nfunc existOnline(user_id int64) bool { \n  repl, _ := client.GetBit(online_user_bitmap, user_id).Result() \n  return repl == 1 \n}\n```\n\n虽然位图的体积仍然会随着⽤用户数量量的增多⽽而变⼤大，但因为记录每个⽤用户所需的内存数量量从原来的 平均 10 字节变成了了 1 位，所以实现⽅方法⼆二将节约⼤大量量内存。\n\n- HyperLogLog\n\n当⼀一个⽤用户上线时，使⽤用统计在线⽤用户数量量的 HyperLogLog 对其进⾏行行计数。\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190217140531.png)\n\n```go\nconst online_use_hll = \"ONLINE_USER_HLL\"\n\nfunc setOnline(user string) {\n    client.PFAdd(online_use_hll, user)\n}\n\nfunc countOnline() int64 {\n    repl, _ := client.PFCount(online_use_hll).Result()\n    return repl\n}\n```\n\n##### 三，自动补全\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190217141017.png)\n\n利用权重实现。\n\n```go\npackage autocomplete \n\nimport ( \n  \"fmt\" \"github.com/chunlintang/frequency-limit/util\" \n) \n\nconst autocomplete = \"autocomplete::\" \n\nvar client = util.RedisClient() \n\nfunc Feed(prefix, content string, weight float64) { \n  for i, _ := range prefix { \n    segment := prefix[:i+1] \n    key := autocomplete + segment \n    if _, err := client.ZIncrBy(key, weight, content).Result(); err != nil {\n      fmt.Println(\"ZIncrBy err\") \n    } \n  } \n} \n\nfunc Hint(prefix string, count int64) []string { \n  key := autocomplete + prefix \n  //result, _ := client.Cmd(\"ZREVANGE\", key, 0, count-1).List() \n  result, _ := client.ZRevRange(key, 0, count-1).Result() \n  return result \n}\n```\n\n","slug":"Redis在实际工作中遇到的各种应用场景","published":1,"updated":"2021-03-11T01:40:42.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb2n001ew7c9bpbo8jed","content":"<blockquote>\n<p>Redis作为一种内存类型的数据库工具，在实际工作中除了常见的用来做缓存外，还有很多实际的用处；如并发场景下的的事务锁、实现统计功能、sug等。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>Redis有很多种数据结构：字符串(string)、散列(hash)、列表(list)、集合(set)、有序集合(zset，使用Skip List跳跃表实现)、位图(bitmap)、HyperLogLog、地图坐标(GEO)；Redis相比于其他的NoSQL数据库在执行速度方面快很多且效率很高，这是因为它是基于内存来存储相关数据的，且它是基于多路复用的时间响应系统。</p>\n<p>Redis支持事务、内存淘汰、持久化(AOF、RDB、RDB+AOF)。</p>\n<p>多机支持：主从复制（单master多slave）、高可用、集群。</p>\n<p>eg: 获取Redis客户端</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> util </span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;github.com/go-redis/redis&quot;</span> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RedisClient</span><span class=\"params\">()</span> *<span class=\"title\">redis</span>.<span class=\"title\">Client</span></span> &#123; </span><br><span class=\"line\">  client := redis.NewClient(&amp;redis.Options&#123; </span><br><span class=\"line\">    Addr: <span class=\"string\">&quot;127.0.0.1:6379&quot;</span>, </span><br><span class=\"line\">    Password: <span class=\"string\">&quot;&quot;</span>, </span><br><span class=\"line\">    DB: <span class=\"number\">0</span>, </span><br><span class=\"line\">  &#125;) </span><br><span class=\"line\">  <span class=\"keyword\">return</span> client </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实际场景应用\"><a href=\"#实际场景应用\" class=\"headerlink\" title=\"实际场景应用\"></a>实际场景应用</h4><h5 id=\"一，锁\"><a href=\"#一，锁\" class=\"headerlink\" title=\"一，锁\"></a>一，锁</h5><blockquote>\n<p>锁是⼀一种同步机制， 它可以保证⼀一项资源在任何时候只能被⼀一个进程使⽤用， 如果有其他进程想要 使⽤用相同的资源， 那么它们就必须等待， 直到正在使⽤用资源的进程放弃使⽤用权为⽌止。</p>\n</blockquote>\n<p>锁的两种操作：获取(acquire)和释放(release)。</p>\n<p>实现锁通常用到三种方式来实现：字符串、事务和带NX的SET。</p>\n<ul>\n<li>字符串</li>\n</ul>\n<p>将⼀一个字符串串键⽤用作锁，如果这个键有值，那么说明锁已被获取;反之，如果键没有值，那么说明<br>锁未被获取，程序可以通过为其设置值来获取锁。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> util </span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;github.com/chunlintang/frequency-limit/util&quot;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> LOCK_KEY = <span class=\"string\">&quot;lock_key&quot;</span> </span><br><span class=\"line\"><span class=\"keyword\">const</span> LOCK_VALUE = <span class=\"string\">&quot;lock_value&quot;</span> </span><br><span class=\"line\"><span class=\"keyword\">var</span> client = util.RedisClient() </span><br><span class=\"line\"><span class=\"comment\">// 获取锁，查看所是否存在 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">acquire</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123; </span><br><span class=\"line\">  current_value, _ := client.Get(lock_key).Result() </span><br><span class=\"line\">  <span class=\"keyword\">if</span> current_value == <span class=\"string\">&quot;&quot;</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> _, err := client.Set(lock_key, lock_value, <span class=\"number\">0</span>).Result(); err != <span class=\"literal\">nil</span> &#123; </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span> </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span> </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// 释放锁 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">release</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> _, err := client.Del(lock_key).Result(); err != <span class=\"literal\">nil</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>弊端</p>\n</blockquote>\n<p>因为 GET 和 SET 在两个不不同的请求中执⾏行行，在它们之间可 能有其他请求已经改变了了锁键的值，导致“锁键为空”这⼀一判 断不不再为真，从⽽而引发多个客户端之间的竞争条件。</p>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190217123339.png\"></p>\n<ul>\n<li>事务</li>\n</ul>\n<p>锁的基本实现⽅方法跟之前⼀一样，但使⽤用 Redis 的事务特性保证操作的安全性。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">acquire</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123; </span><br><span class=\"line\">  txf := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *redis.Tx)</span> <span class=\"title\">error</span></span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">// get current value or zero </span></span><br><span class=\"line\">    n, err := tx.Get(lock_key).Int() </span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; err != redis.Nil &#123; </span><br><span class=\"line\">      <span class=\"keyword\">return</span> err </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">// actual opperation (local in optimistic lock) </span></span><br><span class=\"line\">    n++ </span><br><span class=\"line\">    <span class=\"comment\">// runs only if the watched keys remain unchanged </span></span><br><span class=\"line\">    _, err = tx.Pipelined(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(pipe redis.Pipeliner)</span> <span class=\"title\">error</span></span> &#123; </span><br><span class=\"line\">      <span class=\"comment\">// pipe handles the error case </span></span><br><span class=\"line\">      pipe.Set(lock_key, n, <span class=\"number\">0</span>) </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> </span><br><span class=\"line\">    &#125;) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> err </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  err := client.Watch(txf, lock_key) </span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != redis.TxFailedErr &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  current_value, _ := client.Get(lock_key).Result() </span><br><span class=\"line\">  <span class=\"keyword\">if</span> current_value == <span class=\"string\">&quot;&quot;</span> &#123; </span><br><span class=\"line\">    pl := client.TxPipeline() </span><br><span class=\"line\">    client.Set(lock_key, lock_value, <span class=\"number\">0</span>) </span><br><span class=\"line\">    repl, _ := pl.Exec() </span><br><span class=\"line\">    <span class=\"keyword\">if</span> repl != <span class=\"literal\">nil</span> &#123; </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190217131144.png\"></p>\n<ul>\n<li>带NX的SET</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">acquire</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span>  &#123;</span><br><span class=\"line\">    repl, _ := client.SetNX(lock_key, lock_value, <span class=\"number\">0</span>).Result()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> repl</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"二，计数器，统计当前在线用户数\"><a href=\"#二，计数器，统计当前在线用户数\" class=\"headerlink\" title=\"二，计数器，统计当前在线用户数\"></a>二，计数器，统计当前在线用户数</h5><p>可使用集合、位图和HyperLogLog实现。</p>\n<ul>\n<li>集合</li>\n</ul>\n<p>当⼀一个新的用户上线时，将它的⽤用户名添加到记录在线⽤用户的集合当中。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> online_user = <span class=\"string\">&quot;ONLINE_USER&quot;</span> </span><br><span class=\"line\"><span class=\"keyword\">var</span> client = util.RedisClient() </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setOnline</span><span class=\"params\">(user <span class=\"keyword\">string</span>)</span> <span class=\"title\">bool</span></span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> _, err := client.SAdd(online_user, user).Result(); err != <span class=\"literal\">nil</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">countOnline</span><span class=\"params\">()</span> <span class=\"title\">int64</span></span> &#123; </span><br><span class=\"line\">  repl, _ := client.SCard(online_user).Result() </span><br><span class=\"line\">  <span class=\"keyword\">return</span> repl </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">existOnline</span><span class=\"params\">(user <span class=\"keyword\">string</span>)</span> <span class=\"title\">bool</span></span> &#123; </span><br><span class=\"line\">  repl, _ := client.SIsMember(online_user, user).Result() </span><br><span class=\"line\">  <span class=\"keyword\">return</span> repl </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>弊端</p>\n</blockquote>\n<p>集合的体积将随着元素的增加⽽而增加，集合包含的元素越多，每个元素的体积越⼤大，集合的体积也<br>就越⼤大。另外，因为使⽤用 Redis 储存信息还有⼀一些额外的消耗(overhead)，所以实际的内存占⽤用数量量 将⽐比这个估算值更更⾼高。</p>\n<ul>\n<li>位图</li>\n</ul>\n<p>为每个⽤用户创建⼀一个相对应的数字 ID ，当⼀一个⽤用户上线时，使⽤用他的 ID 作为索引，将位图指定索 引上的⼆二进制位设置为 1 。</p>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190217134254.png\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> online_user_bitmap = <span class=\"string\">&quot;ONLINE_USER_BITMAP&quot;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setOnline</span><span class=\"params\">(user_id <span class=\"keyword\">int64</span>)</span> <span class=\"title\">bool</span></span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> _, err := client.SetBit(online_user_bitmap, user_id, <span class=\"number\">1</span>).Result(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">countOnline</span><span class=\"params\">()</span> <span class=\"title\">int64</span></span> &#123; </span><br><span class=\"line\">  repl, _ := client.BitCount(online_user_bitmap, &amp;redis.BitCount&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;).Result() </span><br><span class=\"line\">  <span class=\"keyword\">return</span> repl </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">existOnline</span><span class=\"params\">(user_id <span class=\"keyword\">int64</span>)</span> <span class=\"title\">bool</span></span> &#123; </span><br><span class=\"line\">  repl, _ := client.GetBit(online_user_bitmap, user_id).Result() </span><br><span class=\"line\">  <span class=\"keyword\">return</span> repl == <span class=\"number\">1</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>虽然位图的体积仍然会随着⽤用户数量量的增多⽽而变⼤大，但因为记录每个⽤用户所需的内存数量量从原来的 平均 10 字节变成了了 1 位，所以实现⽅方法⼆二将节约⼤大量量内存。</p>\n<ul>\n<li>HyperLogLog</li>\n</ul>\n<p>当⼀一个⽤用户上线时，使⽤用统计在线⽤用户数量量的 HyperLogLog 对其进⾏行行计数。</p>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190217140531.png\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> online_use_hll = <span class=\"string\">&quot;ONLINE_USER_HLL&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setOnline</span><span class=\"params\">(user <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    client.PFAdd(online_use_hll, user)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">countOnline</span><span class=\"params\">()</span> <span class=\"title\">int64</span></span> &#123;</span><br><span class=\"line\">    repl, _ := client.PFCount(online_use_hll).Result()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> repl</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"三，自动补全\"><a href=\"#三，自动补全\" class=\"headerlink\" title=\"三，自动补全\"></a>三，自动补全</h5><p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190217141017.png\"></p>\n<p>利用权重实现。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> autocomplete </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ( </span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span> <span class=\"string\">&quot;github.com/chunlintang/frequency-limit/util&quot;</span> </span><br><span class=\"line\">) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> autocomplete = <span class=\"string\">&quot;autocomplete::&quot;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> client = util.RedisClient() </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Feed</span><span class=\"params\">(prefix, content <span class=\"keyword\">string</span>, weight <span class=\"keyword\">float64</span>)</span></span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> prefix &#123; </span><br><span class=\"line\">    segment := prefix[:i+<span class=\"number\">1</span>] </span><br><span class=\"line\">    key := autocomplete + segment </span><br><span class=\"line\">    <span class=\"keyword\">if</span> _, err := client.ZIncrBy(key, weight, content).Result(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      fmt.Println(<span class=\"string\">&quot;ZIncrBy err&quot;</span>) </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Hint</span><span class=\"params\">(prefix <span class=\"keyword\">string</span>, count <span class=\"keyword\">int64</span>)</span> []<span class=\"title\">string</span></span> &#123; </span><br><span class=\"line\">  key := autocomplete + prefix </span><br><span class=\"line\">  <span class=\"comment\">//result, _ := client.Cmd(&quot;ZREVANGE&quot;, key, 0, count-1).List() </span></span><br><span class=\"line\">  result, _ := client.ZRevRange(key, <span class=\"number\">0</span>, count<span class=\"number\">-1</span>).Result() </span><br><span class=\"line\">  <span class=\"keyword\">return</span> result </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Redis作为一种内存类型的数据库工具，在实际工作中除了常见的用来做缓存外，还有很多实际的用处；如并发场景下的的事务锁、实现统计功能、sug等。</p>\n</blockquote>","more":"<p>Redis有很多种数据结构：字符串(string)、散列(hash)、列表(list)、集合(set)、有序集合(zset，使用Skip List跳跃表实现)、位图(bitmap)、HyperLogLog、地图坐标(GEO)；Redis相比于其他的NoSQL数据库在执行速度方面快很多且效率很高，这是因为它是基于内存来存储相关数据的，且它是基于多路复用的时间响应系统。</p>\n<p>Redis支持事务、内存淘汰、持久化(AOF、RDB、RDB+AOF)。</p>\n<p>多机支持：主从复制（单master多slave）、高可用、集群。</p>\n<p>eg: 获取Redis客户端</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> util </span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;github.com/go-redis/redis&quot;</span> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RedisClient</span><span class=\"params\">()</span> *<span class=\"title\">redis</span>.<span class=\"title\">Client</span></span> &#123; </span><br><span class=\"line\">  client := redis.NewClient(&amp;redis.Options&#123; </span><br><span class=\"line\">    Addr: <span class=\"string\">&quot;127.0.0.1:6379&quot;</span>, </span><br><span class=\"line\">    Password: <span class=\"string\">&quot;&quot;</span>, </span><br><span class=\"line\">    DB: <span class=\"number\">0</span>, </span><br><span class=\"line\">  &#125;) </span><br><span class=\"line\">  <span class=\"keyword\">return</span> client </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实际场景应用\"><a href=\"#实际场景应用\" class=\"headerlink\" title=\"实际场景应用\"></a>实际场景应用</h4><h5 id=\"一，锁\"><a href=\"#一，锁\" class=\"headerlink\" title=\"一，锁\"></a>一，锁</h5><blockquote>\n<p>锁是⼀一种同步机制， 它可以保证⼀一项资源在任何时候只能被⼀一个进程使⽤用， 如果有其他进程想要 使⽤用相同的资源， 那么它们就必须等待， 直到正在使⽤用资源的进程放弃使⽤用权为⽌止。</p>\n</blockquote>\n<p>锁的两种操作：获取(acquire)和释放(release)。</p>\n<p>实现锁通常用到三种方式来实现：字符串、事务和带NX的SET。</p>\n<ul>\n<li>字符串</li>\n</ul>\n<p>将⼀一个字符串串键⽤用作锁，如果这个键有值，那么说明锁已被获取;反之，如果键没有值，那么说明<br>锁未被获取，程序可以通过为其设置值来获取锁。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> util </span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;github.com/chunlintang/frequency-limit/util&quot;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> LOCK_KEY = <span class=\"string\">&quot;lock_key&quot;</span> </span><br><span class=\"line\"><span class=\"keyword\">const</span> LOCK_VALUE = <span class=\"string\">&quot;lock_value&quot;</span> </span><br><span class=\"line\"><span class=\"keyword\">var</span> client = util.RedisClient() </span><br><span class=\"line\"><span class=\"comment\">// 获取锁，查看所是否存在 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">acquire</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123; </span><br><span class=\"line\">  current_value, _ := client.Get(lock_key).Result() </span><br><span class=\"line\">  <span class=\"keyword\">if</span> current_value == <span class=\"string\">&quot;&quot;</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> _, err := client.Set(lock_key, lock_value, <span class=\"number\">0</span>).Result(); err != <span class=\"literal\">nil</span> &#123; </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span> </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span> </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// 释放锁 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">release</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> _, err := client.Del(lock_key).Result(); err != <span class=\"literal\">nil</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>弊端</p>\n</blockquote>\n<p>因为 GET 和 SET 在两个不不同的请求中执⾏行行，在它们之间可 能有其他请求已经改变了了锁键的值，导致“锁键为空”这⼀一判 断不不再为真，从⽽而引发多个客户端之间的竞争条件。</p>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190217123339.png\"></p>\n<ul>\n<li>事务</li>\n</ul>\n<p>锁的基本实现⽅方法跟之前⼀一样，但使⽤用 Redis 的事务特性保证操作的安全性。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">acquire</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123; </span><br><span class=\"line\">  txf := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *redis.Tx)</span> <span class=\"title\">error</span></span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">// get current value or zero </span></span><br><span class=\"line\">    n, err := tx.Get(lock_key).Int() </span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; err != redis.Nil &#123; </span><br><span class=\"line\">      <span class=\"keyword\">return</span> err </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"comment\">// actual opperation (local in optimistic lock) </span></span><br><span class=\"line\">    n++ </span><br><span class=\"line\">    <span class=\"comment\">// runs only if the watched keys remain unchanged </span></span><br><span class=\"line\">    _, err = tx.Pipelined(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(pipe redis.Pipeliner)</span> <span class=\"title\">error</span></span> &#123; </span><br><span class=\"line\">      <span class=\"comment\">// pipe handles the error case </span></span><br><span class=\"line\">      pipe.Set(lock_key, n, <span class=\"number\">0</span>) </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> </span><br><span class=\"line\">    &#125;) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> err </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  err := client.Watch(txf, lock_key) </span><br><span class=\"line\">  <span class=\"keyword\">if</span> err != redis.TxFailedErr &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  current_value, _ := client.Get(lock_key).Result() </span><br><span class=\"line\">  <span class=\"keyword\">if</span> current_value == <span class=\"string\">&quot;&quot;</span> &#123; </span><br><span class=\"line\">    pl := client.TxPipeline() </span><br><span class=\"line\">    client.Set(lock_key, lock_value, <span class=\"number\">0</span>) </span><br><span class=\"line\">    repl, _ := pl.Exec() </span><br><span class=\"line\">    <span class=\"keyword\">if</span> repl != <span class=\"literal\">nil</span> &#123; </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190217131144.png\"></p>\n<ul>\n<li>带NX的SET</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">acquire</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span>  &#123;</span><br><span class=\"line\">    repl, _ := client.SetNX(lock_key, lock_value, <span class=\"number\">0</span>).Result()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> repl</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"二，计数器，统计当前在线用户数\"><a href=\"#二，计数器，统计当前在线用户数\" class=\"headerlink\" title=\"二，计数器，统计当前在线用户数\"></a>二，计数器，统计当前在线用户数</h5><p>可使用集合、位图和HyperLogLog实现。</p>\n<ul>\n<li>集合</li>\n</ul>\n<p>当⼀一个新的用户上线时，将它的⽤用户名添加到记录在线⽤用户的集合当中。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> online_user = <span class=\"string\">&quot;ONLINE_USER&quot;</span> </span><br><span class=\"line\"><span class=\"keyword\">var</span> client = util.RedisClient() </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setOnline</span><span class=\"params\">(user <span class=\"keyword\">string</span>)</span> <span class=\"title\">bool</span></span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> _, err := client.SAdd(online_user, user).Result(); err != <span class=\"literal\">nil</span> &#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">countOnline</span><span class=\"params\">()</span> <span class=\"title\">int64</span></span> &#123; </span><br><span class=\"line\">  repl, _ := client.SCard(online_user).Result() </span><br><span class=\"line\">  <span class=\"keyword\">return</span> repl </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">existOnline</span><span class=\"params\">(user <span class=\"keyword\">string</span>)</span> <span class=\"title\">bool</span></span> &#123; </span><br><span class=\"line\">  repl, _ := client.SIsMember(online_user, user).Result() </span><br><span class=\"line\">  <span class=\"keyword\">return</span> repl </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>弊端</p>\n</blockquote>\n<p>集合的体积将随着元素的增加⽽而增加，集合包含的元素越多，每个元素的体积越⼤大，集合的体积也<br>就越⼤大。另外，因为使⽤用 Redis 储存信息还有⼀一些额外的消耗(overhead)，所以实际的内存占⽤用数量量 将⽐比这个估算值更更⾼高。</p>\n<ul>\n<li>位图</li>\n</ul>\n<p>为每个⽤用户创建⼀一个相对应的数字 ID ，当⼀一个⽤用户上线时，使⽤用他的 ID 作为索引，将位图指定索 引上的⼆二进制位设置为 1 。</p>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190217134254.png\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> online_user_bitmap = <span class=\"string\">&quot;ONLINE_USER_BITMAP&quot;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setOnline</span><span class=\"params\">(user_id <span class=\"keyword\">int64</span>)</span> <span class=\"title\">bool</span></span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">if</span> _, err := client.SetBit(online_user_bitmap, user_id, <span class=\"number\">1</span>).Result(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span> </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span> </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">countOnline</span><span class=\"params\">()</span> <span class=\"title\">int64</span></span> &#123; </span><br><span class=\"line\">  repl, _ := client.BitCount(online_user_bitmap, &amp;redis.BitCount&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;).Result() </span><br><span class=\"line\">  <span class=\"keyword\">return</span> repl </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">existOnline</span><span class=\"params\">(user_id <span class=\"keyword\">int64</span>)</span> <span class=\"title\">bool</span></span> &#123; </span><br><span class=\"line\">  repl, _ := client.GetBit(online_user_bitmap, user_id).Result() </span><br><span class=\"line\">  <span class=\"keyword\">return</span> repl == <span class=\"number\">1</span> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>虽然位图的体积仍然会随着⽤用户数量量的增多⽽而变⼤大，但因为记录每个⽤用户所需的内存数量量从原来的 平均 10 字节变成了了 1 位，所以实现⽅方法⼆二将节约⼤大量量内存。</p>\n<ul>\n<li>HyperLogLog</li>\n</ul>\n<p>当⼀一个⽤用户上线时，使⽤用统计在线⽤用户数量量的 HyperLogLog 对其进⾏行行计数。</p>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190217140531.png\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> online_use_hll = <span class=\"string\">&quot;ONLINE_USER_HLL&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setOnline</span><span class=\"params\">(user <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    client.PFAdd(online_use_hll, user)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">countOnline</span><span class=\"params\">()</span> <span class=\"title\">int64</span></span> &#123;</span><br><span class=\"line\">    repl, _ := client.PFCount(online_use_hll).Result()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> repl</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"三，自动补全\"><a href=\"#三，自动补全\" class=\"headerlink\" title=\"三，自动补全\"></a>三，自动补全</h5><p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190217141017.png\"></p>\n<p>利用权重实现。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> autocomplete </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ( </span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span> <span class=\"string\">&quot;github.com/chunlintang/frequency-limit/util&quot;</span> </span><br><span class=\"line\">) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> autocomplete = <span class=\"string\">&quot;autocomplete::&quot;</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> client = util.RedisClient() </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Feed</span><span class=\"params\">(prefix, content <span class=\"keyword\">string</span>, weight <span class=\"keyword\">float64</span>)</span></span> &#123; </span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> prefix &#123; </span><br><span class=\"line\">    segment := prefix[:i+<span class=\"number\">1</span>] </span><br><span class=\"line\">    key := autocomplete + segment </span><br><span class=\"line\">    <span class=\"keyword\">if</span> _, err := client.ZIncrBy(key, weight, content).Result(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      fmt.Println(<span class=\"string\">&quot;ZIncrBy err&quot;</span>) </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Hint</span><span class=\"params\">(prefix <span class=\"keyword\">string</span>, count <span class=\"keyword\">int64</span>)</span> []<span class=\"title\">string</span></span> &#123; </span><br><span class=\"line\">  key := autocomplete + prefix </span><br><span class=\"line\">  <span class=\"comment\">//result, _ := client.Cmd(&quot;ZREVANGE&quot;, key, 0, count-1).List() </span></span><br><span class=\"line\">  result, _ := client.ZRevRange(key, <span class=\"number\">0</span>, count<span class=\"number\">-1</span>).Result() </span><br><span class=\"line\">  <span class=\"keyword\">return</span> result </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Redis集群快速搭建","date":"2019-02-19T05:14:36.000Z","_content":"\n> 我们知道，对于大型应用而言，如何保证线上功能稳定是一件很重要的事情；大多数的web应用都会用到缓存来降低数据库的压力，而单机缓存服务带来的问题是，一旦单机机器挂掉，所有的应用将无法使用。因此就需要有多台机器来保证服务的稳定，这里就涉及到了集群的概念。下面以redis5.0为实例进行快速搭建一个简单的集群。\n\n<!-- more -->\n\n##### 环境\n\n- Centos7\n- Redis5.0.x\n\n##### Redis安装\n\n1. [下载](https://redis.io/download)，我们这里使用5.0.3的stable版本\n\n```shell\nwget http://download.redis.io/releases/redis-5.0.3.tar.gz\n```\n\n2. 解压\n\n```shell\ntar -zxvf redis-5.0.5.tar.gz\n```\n\n3. 安装\n\n```shell\ncd redis-5.0.5\nmake && make install\n```\n\n至此，我们的redis已经安装完成。\n\n##### 集群搭建\n\n- 基本配置\n\n在根目录下新建文件夹```redis-cluster```，复制redis-5.0.3 src下的```redis.conf```到```redis-cluster```分别命名为```master.conf```和```slave.conf```。分别修改这两个文件注释掉bind.\n\n```shell\n# bind 127.0.0.1\n```\n\n修改slave.conf文件，修改端口号，增加配置slaveof.\n\n```shell\n# 从节点这里我们使用6380端口\nport 7002\n# 配置主节点的ip和端口号，这里我们使用本地的，根据情况如果使用其他机器作为主节点，可修改对应配置\nslaveof 127.0.0.1 6379\n```\n\n使用```redis-server```分别指定对应的配置文件启动，使用```info replication```可查看对应信息。\n\n6379:\n\n```shell\n➜ redis-cluster redis-cli -h 127.0.0.1 -p 6379 \n127.0.0.1:6379> info replication \n# Replication \nrole:master \nconnected_slaves:1 \nslave0:ip=127.0.0.1,port=6380,state=online,offset=113,lag=0 \nmaster_repl_offset:113 \nrepl_backlog_active:1 \nrepl_backlog_size:1048576 \nrepl_backlog_first_byte_offset:2 \nrepl_backlog_histlen:112\n```\n\n6380:\n\n```shell\n➜ redis-cluster redis-cli -h 127.0.0.1 -p 7002 \n127.0.0.1:6380> info replication \n# Replication \nrole:slave \nmaster_host:127.0.0.1 \nmaster_port:6379 \nmaster_link_status:up \nmaster_last_io_seconds_ago:2 \nmaster_sync_in_progress:0 \nslave_repl_offset:99 \nslave_priority:100 \nslave_read_only:1 \nconnected_slaves:0 \nmaster_repl_offset:0 \nrepl_backlog_active:0 \nrepl_backlog_size:1048576 \nrepl_backlog_first_byte_offset:0 \nrepl_backlog_histlen:0\n```\n\n- 哨兵\n\n至此，一个简单的集群就搭建成功了，但是有个弊端是一旦master挂掉之后，无法生成新的master节点，导致写操作就会失效。因此，我们需要在master挂掉之后会自动启动一个slave节点来代替master节点，使服务仍然可用，这里就用到了哨兵。\n\n哨兵的作用不言而喻，就是用来监控master节点的状态，并生成新的master节点。\n\n复制一份```redis-5.0.3/src```下的```redis-sentinel.conf```到```redis-cluster```下，命名为```redis-sentinel-7002.conf```，并修改如下配置。\n\n```shell\nsentinel monitor mymaster 127.0.0.1 7002 2 # 哨兵监听的主节点的ip和端口号，2表示需要的哨兵数 \n# Default is 30 seconds. \nsentinel down-after-milliseconds mymaster 30000 # 超时时间，表示3s内没有响应则认为主节点down掉 \n# Default is 3 minutes. \nsentinel failover-timeout mymaster 180000 # 表示18s后，master节点仍然没有恢复，则重新生成新的master节点\n```\n\n配置完成后使用如下命令来启动sentinel:\n\n```shell\nredis-sentinel /etc/redis-cluster/redis-sentinel-7002.conf\n```\n\n我们可以模拟让```master```节点挂掉后看是否```7002```端口是否会变成新的```master```节点。手动kill掉```master```，然后使用`info replication`再次查看```7002```的信息。\n\n```shell\n➜ redis-cluster redis-cli -h 127.0.0.1 -p 7002 \n127.0.0.1:7002> info replication \n# Replication \nrole:master \nconnected_slaves:0 \nmaster_repl_offset:29 \nrepl_backlog_active:1 \nrepl_backlog_size:1048576 \nrepl_backlog_first_byte_offset:2 \nrepl_backlog_histlen:28\n```\n\n- redis-cluster\n\n哨兵模式的缺点对数据量有限制，受限于机器的内存的最小节点，因此这还可以使用数据分片的方式来实现存储，即```redis-cluster```。\n\n修改配置，注释掉```slave.conf```的```slaveof```.\n\n```shell\n# slaveof 127.0.0.1 6379\n```\n\n分别修改```6379```和```7002```修改以下配置：\n\n```shell\ncluster-enabled yes \n# Every cluster node has a cluster configuration file. This file is not \n# intended to be edited by hand. It is created and updated by Redis nodes. \n# Every Redis Cluster node requires a different cluster configuration file. \n# Make sure that instances running in the same system do not have \n# overlapping cluster configuration file names. \ncluster-config-file nodes-6379.conf # 各自对应 \n# Cluster node timeout is the amount of milliseconds a node must be unreachable \n# for it to be considered in failure state. \n# Most other internal time limits are multiple of the node timeout. \ncluster-node-timeout 15000\n```\n\n我们复制多个配置文案命名为```redis-7002.conf ~ redis-7005.conf```；使用如下命令创建集群:\n\n```shell\n➜ redis-cluster redis-cli --cluster create 127.0.0.1:6379 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006 --cluster-replicas 1 \n>>> Performing hash slots allocation on 6 nodes... \nMaster[0] -> Slots 0 - 5460 \nMaster[1] -> Slots 5461 - 10922 \nMaster[2] -> Slots 10923 - 16383 \nAdding replica 127.0.0.1:7004 to 127.0.0.1:6379 \nAdding replica 127.0.0.1:7005 to 127.0.0.1:7002 \nAdding replica 127.0.0.1:7006 to 127.0.0.1:7003 \n>>> Trying to optimize slaves allocation for anti-affinity \n[WARNING] Some slaves are in the same host as their master \nM: 21aa1be9fdf18ba229646d31160c771c39298d29 127.0.0.1:6379 \n   slots:[0-5460] (5461 slots) master \nM: a2a10c4d6d9e691cb48890f3b9c3d1793613b1ce 127.0.0.1:7002 \n   slots:[5461-10922] (5462 slots) master \nM: 3a0b64b91fed7f9f096ffd7c98481d03be964a10 127.0.0.1:7003 \n   slots:[10923-16383] (5461 slots) master \nS: aafc91d92f75c5b1572b80ccca49e089bf377dc5 127.0.0.1:7004 \n   replicates 3a0b64b91fed7f9f096ffd7c98481d03be964a10 \nS: 0a7021591a5498f514005410eff25394d28d5f60 127.0.0.1:7005 \n   replicates 21aa1be9fdf18ba229646d31160c771c39298d29 \nS: 243d39cc830e701dd314f0d2a9273310c6f04abb 127.0.0.1:7006 \n   replicates a2a10c4d6d9e691cb48890f3b9c3d1793613b1ce \nCan I set the above configuration? (type 'yes' to accept):\n```\n\n其中—```cluster-replicas 1```表示：一主一从配置，6个节点就是3主3从。\n\n各个节点已经分配好，输入```yes```，打印如下信息说明集群创建成功。\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190219161228.png)\n\n如果我们想要删除或者添加节点，可以使用`redis-cli --cluster add-node`和`redis-cli --cluster del-node`命令。\n\n比如我们要新增一个节点```127.0.0.1:7007```，挂载在```6379```节点上。\n\n```shell\nredis-cli --cluster add-node 127.0.0.1:7007 127.0.0.1:6379\n```\n\n删除该节点，先查出节点的id.\n\n```shell\nredis-cli --cluster check 127.0.0.1:7007\n```\n\n输出如下信息：\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190219164232.png)\n\n找到对应节点id，这里是ef1035f7b8efe2b42cd1ac1c52833aca45edb498，执行以下命令即刻删除。\n\n```shell\nredis-cli --cluster del-node 127.0.0.1:7007 ef1035f7b8efe2b42cd1ac1c52833aca45edb498\n```","source":"_posts/Redis集群快速搭建.md","raw":"---\ntitle: Redis集群快速搭建\ndate: 2019-02-19 13:14:36\ntags: \n - redis\n---\n\n> 我们知道，对于大型应用而言，如何保证线上功能稳定是一件很重要的事情；大多数的web应用都会用到缓存来降低数据库的压力，而单机缓存服务带来的问题是，一旦单机机器挂掉，所有的应用将无法使用。因此就需要有多台机器来保证服务的稳定，这里就涉及到了集群的概念。下面以redis5.0为实例进行快速搭建一个简单的集群。\n\n<!-- more -->\n\n##### 环境\n\n- Centos7\n- Redis5.0.x\n\n##### Redis安装\n\n1. [下载](https://redis.io/download)，我们这里使用5.0.3的stable版本\n\n```shell\nwget http://download.redis.io/releases/redis-5.0.3.tar.gz\n```\n\n2. 解压\n\n```shell\ntar -zxvf redis-5.0.5.tar.gz\n```\n\n3. 安装\n\n```shell\ncd redis-5.0.5\nmake && make install\n```\n\n至此，我们的redis已经安装完成。\n\n##### 集群搭建\n\n- 基本配置\n\n在根目录下新建文件夹```redis-cluster```，复制redis-5.0.3 src下的```redis.conf```到```redis-cluster```分别命名为```master.conf```和```slave.conf```。分别修改这两个文件注释掉bind.\n\n```shell\n# bind 127.0.0.1\n```\n\n修改slave.conf文件，修改端口号，增加配置slaveof.\n\n```shell\n# 从节点这里我们使用6380端口\nport 7002\n# 配置主节点的ip和端口号，这里我们使用本地的，根据情况如果使用其他机器作为主节点，可修改对应配置\nslaveof 127.0.0.1 6379\n```\n\n使用```redis-server```分别指定对应的配置文件启动，使用```info replication```可查看对应信息。\n\n6379:\n\n```shell\n➜ redis-cluster redis-cli -h 127.0.0.1 -p 6379 \n127.0.0.1:6379> info replication \n# Replication \nrole:master \nconnected_slaves:1 \nslave0:ip=127.0.0.1,port=6380,state=online,offset=113,lag=0 \nmaster_repl_offset:113 \nrepl_backlog_active:1 \nrepl_backlog_size:1048576 \nrepl_backlog_first_byte_offset:2 \nrepl_backlog_histlen:112\n```\n\n6380:\n\n```shell\n➜ redis-cluster redis-cli -h 127.0.0.1 -p 7002 \n127.0.0.1:6380> info replication \n# Replication \nrole:slave \nmaster_host:127.0.0.1 \nmaster_port:6379 \nmaster_link_status:up \nmaster_last_io_seconds_ago:2 \nmaster_sync_in_progress:0 \nslave_repl_offset:99 \nslave_priority:100 \nslave_read_only:1 \nconnected_slaves:0 \nmaster_repl_offset:0 \nrepl_backlog_active:0 \nrepl_backlog_size:1048576 \nrepl_backlog_first_byte_offset:0 \nrepl_backlog_histlen:0\n```\n\n- 哨兵\n\n至此，一个简单的集群就搭建成功了，但是有个弊端是一旦master挂掉之后，无法生成新的master节点，导致写操作就会失效。因此，我们需要在master挂掉之后会自动启动一个slave节点来代替master节点，使服务仍然可用，这里就用到了哨兵。\n\n哨兵的作用不言而喻，就是用来监控master节点的状态，并生成新的master节点。\n\n复制一份```redis-5.0.3/src```下的```redis-sentinel.conf```到```redis-cluster```下，命名为```redis-sentinel-7002.conf```，并修改如下配置。\n\n```shell\nsentinel monitor mymaster 127.0.0.1 7002 2 # 哨兵监听的主节点的ip和端口号，2表示需要的哨兵数 \n# Default is 30 seconds. \nsentinel down-after-milliseconds mymaster 30000 # 超时时间，表示3s内没有响应则认为主节点down掉 \n# Default is 3 minutes. \nsentinel failover-timeout mymaster 180000 # 表示18s后，master节点仍然没有恢复，则重新生成新的master节点\n```\n\n配置完成后使用如下命令来启动sentinel:\n\n```shell\nredis-sentinel /etc/redis-cluster/redis-sentinel-7002.conf\n```\n\n我们可以模拟让```master```节点挂掉后看是否```7002```端口是否会变成新的```master```节点。手动kill掉```master```，然后使用`info replication`再次查看```7002```的信息。\n\n```shell\n➜ redis-cluster redis-cli -h 127.0.0.1 -p 7002 \n127.0.0.1:7002> info replication \n# Replication \nrole:master \nconnected_slaves:0 \nmaster_repl_offset:29 \nrepl_backlog_active:1 \nrepl_backlog_size:1048576 \nrepl_backlog_first_byte_offset:2 \nrepl_backlog_histlen:28\n```\n\n- redis-cluster\n\n哨兵模式的缺点对数据量有限制，受限于机器的内存的最小节点，因此这还可以使用数据分片的方式来实现存储，即```redis-cluster```。\n\n修改配置，注释掉```slave.conf```的```slaveof```.\n\n```shell\n# slaveof 127.0.0.1 6379\n```\n\n分别修改```6379```和```7002```修改以下配置：\n\n```shell\ncluster-enabled yes \n# Every cluster node has a cluster configuration file. This file is not \n# intended to be edited by hand. It is created and updated by Redis nodes. \n# Every Redis Cluster node requires a different cluster configuration file. \n# Make sure that instances running in the same system do not have \n# overlapping cluster configuration file names. \ncluster-config-file nodes-6379.conf # 各自对应 \n# Cluster node timeout is the amount of milliseconds a node must be unreachable \n# for it to be considered in failure state. \n# Most other internal time limits are multiple of the node timeout. \ncluster-node-timeout 15000\n```\n\n我们复制多个配置文案命名为```redis-7002.conf ~ redis-7005.conf```；使用如下命令创建集群:\n\n```shell\n➜ redis-cluster redis-cli --cluster create 127.0.0.1:6379 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006 --cluster-replicas 1 \n>>> Performing hash slots allocation on 6 nodes... \nMaster[0] -> Slots 0 - 5460 \nMaster[1] -> Slots 5461 - 10922 \nMaster[2] -> Slots 10923 - 16383 \nAdding replica 127.0.0.1:7004 to 127.0.0.1:6379 \nAdding replica 127.0.0.1:7005 to 127.0.0.1:7002 \nAdding replica 127.0.0.1:7006 to 127.0.0.1:7003 \n>>> Trying to optimize slaves allocation for anti-affinity \n[WARNING] Some slaves are in the same host as their master \nM: 21aa1be9fdf18ba229646d31160c771c39298d29 127.0.0.1:6379 \n   slots:[0-5460] (5461 slots) master \nM: a2a10c4d6d9e691cb48890f3b9c3d1793613b1ce 127.0.0.1:7002 \n   slots:[5461-10922] (5462 slots) master \nM: 3a0b64b91fed7f9f096ffd7c98481d03be964a10 127.0.0.1:7003 \n   slots:[10923-16383] (5461 slots) master \nS: aafc91d92f75c5b1572b80ccca49e089bf377dc5 127.0.0.1:7004 \n   replicates 3a0b64b91fed7f9f096ffd7c98481d03be964a10 \nS: 0a7021591a5498f514005410eff25394d28d5f60 127.0.0.1:7005 \n   replicates 21aa1be9fdf18ba229646d31160c771c39298d29 \nS: 243d39cc830e701dd314f0d2a9273310c6f04abb 127.0.0.1:7006 \n   replicates a2a10c4d6d9e691cb48890f3b9c3d1793613b1ce \nCan I set the above configuration? (type 'yes' to accept):\n```\n\n其中—```cluster-replicas 1```表示：一主一从配置，6个节点就是3主3从。\n\n各个节点已经分配好，输入```yes```，打印如下信息说明集群创建成功。\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190219161228.png)\n\n如果我们想要删除或者添加节点，可以使用`redis-cli --cluster add-node`和`redis-cli --cluster del-node`命令。\n\n比如我们要新增一个节点```127.0.0.1:7007```，挂载在```6379```节点上。\n\n```shell\nredis-cli --cluster add-node 127.0.0.1:7007 127.0.0.1:6379\n```\n\n删除该节点，先查出节点的id.\n\n```shell\nredis-cli --cluster check 127.0.0.1:7007\n```\n\n输出如下信息：\n\n![](https://raw.githubusercontent.com/chunlintang/imgLib/master/20190219164232.png)\n\n找到对应节点id，这里是ef1035f7b8efe2b42cd1ac1c52833aca45edb498，执行以下命令即刻删除。\n\n```shell\nredis-cli --cluster del-node 127.0.0.1:7007 ef1035f7b8efe2b42cd1ac1c52833aca45edb498\n```","slug":"Redis集群快速搭建","published":1,"updated":"2021-03-11T02:13:30.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknwscb2u0021w7c9cwksfmzz","content":"<blockquote>\n<p>我们知道，对于大型应用而言，如何保证线上功能稳定是一件很重要的事情；大多数的web应用都会用到缓存来降低数据库的压力，而单机缓存服务带来的问题是，一旦单机机器挂掉，所有的应用将无法使用。因此就需要有多台机器来保证服务的稳定，这里就涉及到了集群的概念。下面以redis5.0为实例进行快速搭建一个简单的集群。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h5 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h5><ul>\n<li>Centos7</li>\n<li>Redis5.0.x</li>\n</ul>\n<h5 id=\"Redis安装\"><a href=\"#Redis安装\" class=\"headerlink\" title=\"Redis安装\"></a>Redis安装</h5><ol>\n<li><a href=\"https://redis.io/download\">下载</a>，我们这里使用5.0.3的stable版本</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-5.0.3.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>解压</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf redis-5.0.5.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd redis-5.0.5</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>至此，我们的redis已经安装完成。</p>\n<h5 id=\"集群搭建\"><a href=\"#集群搭建\" class=\"headerlink\" title=\"集群搭建\"></a>集群搭建</h5><ul>\n<li>基本配置</li>\n</ul>\n<p>在根目录下新建文件夹<code>redis-cluster</code>，复制redis-5.0.3 src下的<code>redis.conf</code>到<code>redis-cluster</code>分别命名为<code>master.conf</code>和<code>slave.conf</code>。分别修改这两个文件注释掉bind.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">bind</span> 127.0.0.1</span></span><br></pre></td></tr></table></figure>\n\n<p>修改slave.conf文件，修改端口号，增加配置slaveof.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 从节点这里我们使用6380端口</span></span><br><span class=\"line\">port 7002</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置主节点的ip和端口号，这里我们使用本地的，根据情况如果使用其他机器作为主节点，可修改对应配置</span></span><br><span class=\"line\">slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>redis-server</code>分别指定对应的配置文件启动，使用<code>info replication</code>可查看对应信息。</p>\n<p>6379:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ redis-cluster redis-cli -h 127.0.0.1 -p 6379 </span><br><span class=\"line\">127.0.0.1:6379&gt; info replication </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Replication</span> </span><br><span class=\"line\">role:master </span><br><span class=\"line\">connected_slaves:1 </span><br><span class=\"line\">slave0:ip=127.0.0.1,port=6380,state=online,offset=113,lag=0 </span><br><span class=\"line\">master_repl_offset:113 </span><br><span class=\"line\">repl_backlog_active:1 </span><br><span class=\"line\">repl_backlog_size:1048576 </span><br><span class=\"line\">repl_backlog_first_byte_offset:2 </span><br><span class=\"line\">repl_backlog_histlen:112</span><br></pre></td></tr></table></figure>\n\n<p>6380:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ redis-cluster redis-cli -h 127.0.0.1 -p 7002 </span><br><span class=\"line\">127.0.0.1:6380&gt; info replication </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Replication</span> </span><br><span class=\"line\">role:slave </span><br><span class=\"line\">master_host:127.0.0.1 </span><br><span class=\"line\">master_port:6379 </span><br><span class=\"line\">master_link_status:up </span><br><span class=\"line\">master_last_io_seconds_ago:2 </span><br><span class=\"line\">master_sync_in_progress:0 </span><br><span class=\"line\">slave_repl_offset:99 </span><br><span class=\"line\">slave_priority:100 </span><br><span class=\"line\">slave_read_only:1 </span><br><span class=\"line\">connected_slaves:0 </span><br><span class=\"line\">master_repl_offset:0 </span><br><span class=\"line\">repl_backlog_active:0 </span><br><span class=\"line\">repl_backlog_size:1048576 </span><br><span class=\"line\">repl_backlog_first_byte_offset:0 </span><br><span class=\"line\">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>哨兵</li>\n</ul>\n<p>至此，一个简单的集群就搭建成功了，但是有个弊端是一旦master挂掉之后，无法生成新的master节点，导致写操作就会失效。因此，我们需要在master挂掉之后会自动启动一个slave节点来代替master节点，使服务仍然可用，这里就用到了哨兵。</p>\n<p>哨兵的作用不言而喻，就是用来监控master节点的状态，并生成新的master节点。</p>\n<p>复制一份<code>redis-5.0.3/src</code>下的<code>redis-sentinel.conf</code>到<code>redis-cluster</code>下，命名为<code>redis-sentinel-7002.conf</code>，并修改如下配置。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sentinel monitor mymaster 127.0.0.1 7002 2 # 哨兵监听的主节点的ip和端口号，2表示需要的哨兵数 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Default is 30 seconds.</span> </span><br><span class=\"line\">sentinel down-after-milliseconds mymaster 30000 # 超时时间，表示3s内没有响应则认为主节点down掉 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Default is 3 minutes.</span> </span><br><span class=\"line\">sentinel failover-timeout mymaster 180000 # 表示18s后，master节点仍然没有恢复，则重新生成新的master节点</span><br></pre></td></tr></table></figure>\n\n<p>配置完成后使用如下命令来启动sentinel:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-sentinel /etc/redis-cluster/redis-sentinel-7002.conf</span><br></pre></td></tr></table></figure>\n\n<p>我们可以模拟让<code>master</code>节点挂掉后看是否<code>7002</code>端口是否会变成新的<code>master</code>节点。手动kill掉<code>master</code>，然后使用<code>info replication</code>再次查看<code>7002</code>的信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ redis-cluster redis-cli -h 127.0.0.1 -p 7002 </span><br><span class=\"line\">127.0.0.1:7002&gt; info replication </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Replication</span> </span><br><span class=\"line\">role:master </span><br><span class=\"line\">connected_slaves:0 </span><br><span class=\"line\">master_repl_offset:29 </span><br><span class=\"line\">repl_backlog_active:1 </span><br><span class=\"line\">repl_backlog_size:1048576 </span><br><span class=\"line\">repl_backlog_first_byte_offset:2 </span><br><span class=\"line\">repl_backlog_histlen:28</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>redis-cluster</li>\n</ul>\n<p>哨兵模式的缺点对数据量有限制，受限于机器的内存的最小节点，因此这还可以使用数据分片的方式来实现存储，即<code>redis-cluster</code>。</p>\n<p>修改配置，注释掉<code>slave.conf</code>的<code>slaveof</code>.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> slaveof 127.0.0.1 6379</span></span><br></pre></td></tr></table></figure>\n\n<p>分别修改<code>6379</code>和<code>7002</code>修改以下配置：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cluster-enabled yes </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Every cluster node has a cluster configuration file. This file is not</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> intended to be edited by hand. It is created and updated by Redis nodes.</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Every Redis Cluster node requires a different cluster configuration file.</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Make sure that instances running <span class=\"keyword\">in</span> the same system <span class=\"keyword\">do</span> not have</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> overlapping cluster configuration file names.</span> </span><br><span class=\"line\">cluster-config-file nodes-6379.conf # 各自对应 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Cluster node timeout is the amount of milliseconds a node must be unreachable</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">for</span> it to be considered <span class=\"keyword\">in</span> failure state.</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Most other internal time limits are multiple of the node timeout.</span> </span><br><span class=\"line\">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure>\n\n<p>我们复制多个配置文案命名为<code>redis-7002.conf ~ redis-7005.conf</code>；使用如下命令创建集群:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ redis-cluster redis-cli --cluster create 127.0.0.1:6379 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006 --cluster-replicas 1 </span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; Performing <span class=\"built_in\">hash</span> slots allocation on 6 nodes...</span> </span><br><span class=\"line\">Master[0] -&gt; Slots 0 - 5460 </span><br><span class=\"line\">Master[1] -&gt; Slots 5461 - 10922 </span><br><span class=\"line\">Master[2] -&gt; Slots 10923 - 16383 </span><br><span class=\"line\">Adding replica 127.0.0.1:7004 to 127.0.0.1:6379 </span><br><span class=\"line\">Adding replica 127.0.0.1:7005 to 127.0.0.1:7002 </span><br><span class=\"line\">Adding replica 127.0.0.1:7006 to 127.0.0.1:7003 </span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; Trying to optimize slaves allocation <span class=\"keyword\">for</span> anti-affinity</span> </span><br><span class=\"line\">[WARNING] Some slaves are in the same host as their master </span><br><span class=\"line\">M: 21aa1be9fdf18ba229646d31160c771c39298d29 127.0.0.1:6379 </span><br><span class=\"line\">   slots:[0-5460] (5461 slots) master </span><br><span class=\"line\">M: a2a10c4d6d9e691cb48890f3b9c3d1793613b1ce 127.0.0.1:7002 </span><br><span class=\"line\">   slots:[5461-10922] (5462 slots) master </span><br><span class=\"line\">M: 3a0b64b91fed7f9f096ffd7c98481d03be964a10 127.0.0.1:7003 </span><br><span class=\"line\">   slots:[10923-16383] (5461 slots) master </span><br><span class=\"line\">S: aafc91d92f75c5b1572b80ccca49e089bf377dc5 127.0.0.1:7004 </span><br><span class=\"line\">   replicates 3a0b64b91fed7f9f096ffd7c98481d03be964a10 </span><br><span class=\"line\">S: 0a7021591a5498f514005410eff25394d28d5f60 127.0.0.1:7005 </span><br><span class=\"line\">   replicates 21aa1be9fdf18ba229646d31160c771c39298d29 </span><br><span class=\"line\">S: 243d39cc830e701dd314f0d2a9273310c6f04abb 127.0.0.1:7006 </span><br><span class=\"line\">   replicates a2a10c4d6d9e691cb48890f3b9c3d1793613b1ce </span><br><span class=\"line\">Can I set the above configuration? (type &#x27;yes&#x27; to accept):</span><br></pre></td></tr></table></figure>\n\n<p>其中—<code>cluster-replicas 1</code>表示：一主一从配置，6个节点就是3主3从。</p>\n<p>各个节点已经分配好，输入<code>yes</code>，打印如下信息说明集群创建成功。</p>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190219161228.png\"></p>\n<p>如果我们想要删除或者添加节点，可以使用<code>redis-cli --cluster add-node</code>和<code>redis-cli --cluster del-node</code>命令。</p>\n<p>比如我们要新增一个节点<code>127.0.0.1:7007</code>，挂载在<code>6379</code>节点上。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster add-node 127.0.0.1:7007 127.0.0.1:6379</span><br></pre></td></tr></table></figure>\n\n<p>删除该节点，先查出节点的id.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 127.0.0.1:7007</span><br></pre></td></tr></table></figure>\n\n<p>输出如下信息：</p>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190219164232.png\"></p>\n<p>找到对应节点id，这里是ef1035f7b8efe2b42cd1ac1c52833aca45edb498，执行以下命令即刻删除。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster del-node 127.0.0.1:7007 ef1035f7b8efe2b42cd1ac1c52833aca45edb498</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>我们知道，对于大型应用而言，如何保证线上功能稳定是一件很重要的事情；大多数的web应用都会用到缓存来降低数据库的压力，而单机缓存服务带来的问题是，一旦单机机器挂掉，所有的应用将无法使用。因此就需要有多台机器来保证服务的稳定，这里就涉及到了集群的概念。下面以redis5.0为实例进行快速搭建一个简单的集群。</p>\n</blockquote>","more":"<h5 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h5><ul>\n<li>Centos7</li>\n<li>Redis5.0.x</li>\n</ul>\n<h5 id=\"Redis安装\"><a href=\"#Redis安装\" class=\"headerlink\" title=\"Redis安装\"></a>Redis安装</h5><ol>\n<li><a href=\"https://redis.io/download\">下载</a>，我们这里使用5.0.3的stable版本</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://download.redis.io/releases/redis-5.0.3.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>解压</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf redis-5.0.5.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd redis-5.0.5</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>至此，我们的redis已经安装完成。</p>\n<h5 id=\"集群搭建\"><a href=\"#集群搭建\" class=\"headerlink\" title=\"集群搭建\"></a>集群搭建</h5><ul>\n<li>基本配置</li>\n</ul>\n<p>在根目录下新建文件夹<code>redis-cluster</code>，复制redis-5.0.3 src下的<code>redis.conf</code>到<code>redis-cluster</code>分别命名为<code>master.conf</code>和<code>slave.conf</code>。分别修改这两个文件注释掉bind.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">bind</span> 127.0.0.1</span></span><br></pre></td></tr></table></figure>\n\n<p>修改slave.conf文件，修改端口号，增加配置slaveof.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 从节点这里我们使用6380端口</span></span><br><span class=\"line\">port 7002</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置主节点的ip和端口号，这里我们使用本地的，根据情况如果使用其他机器作为主节点，可修改对应配置</span></span><br><span class=\"line\">slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>redis-server</code>分别指定对应的配置文件启动，使用<code>info replication</code>可查看对应信息。</p>\n<p>6379:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ redis-cluster redis-cli -h 127.0.0.1 -p 6379 </span><br><span class=\"line\">127.0.0.1:6379&gt; info replication </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Replication</span> </span><br><span class=\"line\">role:master </span><br><span class=\"line\">connected_slaves:1 </span><br><span class=\"line\">slave0:ip=127.0.0.1,port=6380,state=online,offset=113,lag=0 </span><br><span class=\"line\">master_repl_offset:113 </span><br><span class=\"line\">repl_backlog_active:1 </span><br><span class=\"line\">repl_backlog_size:1048576 </span><br><span class=\"line\">repl_backlog_first_byte_offset:2 </span><br><span class=\"line\">repl_backlog_histlen:112</span><br></pre></td></tr></table></figure>\n\n<p>6380:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ redis-cluster redis-cli -h 127.0.0.1 -p 7002 </span><br><span class=\"line\">127.0.0.1:6380&gt; info replication </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Replication</span> </span><br><span class=\"line\">role:slave </span><br><span class=\"line\">master_host:127.0.0.1 </span><br><span class=\"line\">master_port:6379 </span><br><span class=\"line\">master_link_status:up </span><br><span class=\"line\">master_last_io_seconds_ago:2 </span><br><span class=\"line\">master_sync_in_progress:0 </span><br><span class=\"line\">slave_repl_offset:99 </span><br><span class=\"line\">slave_priority:100 </span><br><span class=\"line\">slave_read_only:1 </span><br><span class=\"line\">connected_slaves:0 </span><br><span class=\"line\">master_repl_offset:0 </span><br><span class=\"line\">repl_backlog_active:0 </span><br><span class=\"line\">repl_backlog_size:1048576 </span><br><span class=\"line\">repl_backlog_first_byte_offset:0 </span><br><span class=\"line\">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>哨兵</li>\n</ul>\n<p>至此，一个简单的集群就搭建成功了，但是有个弊端是一旦master挂掉之后，无法生成新的master节点，导致写操作就会失效。因此，我们需要在master挂掉之后会自动启动一个slave节点来代替master节点，使服务仍然可用，这里就用到了哨兵。</p>\n<p>哨兵的作用不言而喻，就是用来监控master节点的状态，并生成新的master节点。</p>\n<p>复制一份<code>redis-5.0.3/src</code>下的<code>redis-sentinel.conf</code>到<code>redis-cluster</code>下，命名为<code>redis-sentinel-7002.conf</code>，并修改如下配置。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sentinel monitor mymaster 127.0.0.1 7002 2 # 哨兵监听的主节点的ip和端口号，2表示需要的哨兵数 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Default is 30 seconds.</span> </span><br><span class=\"line\">sentinel down-after-milliseconds mymaster 30000 # 超时时间，表示3s内没有响应则认为主节点down掉 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Default is 3 minutes.</span> </span><br><span class=\"line\">sentinel failover-timeout mymaster 180000 # 表示18s后，master节点仍然没有恢复，则重新生成新的master节点</span><br></pre></td></tr></table></figure>\n\n<p>配置完成后使用如下命令来启动sentinel:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-sentinel /etc/redis-cluster/redis-sentinel-7002.conf</span><br></pre></td></tr></table></figure>\n\n<p>我们可以模拟让<code>master</code>节点挂掉后看是否<code>7002</code>端口是否会变成新的<code>master</code>节点。手动kill掉<code>master</code>，然后使用<code>info replication</code>再次查看<code>7002</code>的信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ redis-cluster redis-cli -h 127.0.0.1 -p 7002 </span><br><span class=\"line\">127.0.0.1:7002&gt; info replication </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Replication</span> </span><br><span class=\"line\">role:master </span><br><span class=\"line\">connected_slaves:0 </span><br><span class=\"line\">master_repl_offset:29 </span><br><span class=\"line\">repl_backlog_active:1 </span><br><span class=\"line\">repl_backlog_size:1048576 </span><br><span class=\"line\">repl_backlog_first_byte_offset:2 </span><br><span class=\"line\">repl_backlog_histlen:28</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>redis-cluster</li>\n</ul>\n<p>哨兵模式的缺点对数据量有限制，受限于机器的内存的最小节点，因此这还可以使用数据分片的方式来实现存储，即<code>redis-cluster</code>。</p>\n<p>修改配置，注释掉<code>slave.conf</code>的<code>slaveof</code>.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> slaveof 127.0.0.1 6379</span></span><br></pre></td></tr></table></figure>\n\n<p>分别修改<code>6379</code>和<code>7002</code>修改以下配置：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cluster-enabled yes </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Every cluster node has a cluster configuration file. This file is not</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> intended to be edited by hand. It is created and updated by Redis nodes.</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Every Redis Cluster node requires a different cluster configuration file.</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Make sure that instances running <span class=\"keyword\">in</span> the same system <span class=\"keyword\">do</span> not have</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> overlapping cluster configuration file names.</span> </span><br><span class=\"line\">cluster-config-file nodes-6379.conf # 各自对应 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Cluster node timeout is the amount of milliseconds a node must be unreachable</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">for</span> it to be considered <span class=\"keyword\">in</span> failure state.</span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Most other internal time limits are multiple of the node timeout.</span> </span><br><span class=\"line\">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure>\n\n<p>我们复制多个配置文案命名为<code>redis-7002.conf ~ redis-7005.conf</code>；使用如下命令创建集群:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜ redis-cluster redis-cli --cluster create 127.0.0.1:6379 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006 --cluster-replicas 1 </span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; Performing <span class=\"built_in\">hash</span> slots allocation on 6 nodes...</span> </span><br><span class=\"line\">Master[0] -&gt; Slots 0 - 5460 </span><br><span class=\"line\">Master[1] -&gt; Slots 5461 - 10922 </span><br><span class=\"line\">Master[2] -&gt; Slots 10923 - 16383 </span><br><span class=\"line\">Adding replica 127.0.0.1:7004 to 127.0.0.1:6379 </span><br><span class=\"line\">Adding replica 127.0.0.1:7005 to 127.0.0.1:7002 </span><br><span class=\"line\">Adding replica 127.0.0.1:7006 to 127.0.0.1:7003 </span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt; Trying to optimize slaves allocation <span class=\"keyword\">for</span> anti-affinity</span> </span><br><span class=\"line\">[WARNING] Some slaves are in the same host as their master </span><br><span class=\"line\">M: 21aa1be9fdf18ba229646d31160c771c39298d29 127.0.0.1:6379 </span><br><span class=\"line\">   slots:[0-5460] (5461 slots) master </span><br><span class=\"line\">M: a2a10c4d6d9e691cb48890f3b9c3d1793613b1ce 127.0.0.1:7002 </span><br><span class=\"line\">   slots:[5461-10922] (5462 slots) master </span><br><span class=\"line\">M: 3a0b64b91fed7f9f096ffd7c98481d03be964a10 127.0.0.1:7003 </span><br><span class=\"line\">   slots:[10923-16383] (5461 slots) master </span><br><span class=\"line\">S: aafc91d92f75c5b1572b80ccca49e089bf377dc5 127.0.0.1:7004 </span><br><span class=\"line\">   replicates 3a0b64b91fed7f9f096ffd7c98481d03be964a10 </span><br><span class=\"line\">S: 0a7021591a5498f514005410eff25394d28d5f60 127.0.0.1:7005 </span><br><span class=\"line\">   replicates 21aa1be9fdf18ba229646d31160c771c39298d29 </span><br><span class=\"line\">S: 243d39cc830e701dd314f0d2a9273310c6f04abb 127.0.0.1:7006 </span><br><span class=\"line\">   replicates a2a10c4d6d9e691cb48890f3b9c3d1793613b1ce </span><br><span class=\"line\">Can I set the above configuration? (type &#x27;yes&#x27; to accept):</span><br></pre></td></tr></table></figure>\n\n<p>其中—<code>cluster-replicas 1</code>表示：一主一从配置，6个节点就是3主3从。</p>\n<p>各个节点已经分配好，输入<code>yes</code>，打印如下信息说明集群创建成功。</p>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190219161228.png\"></p>\n<p>如果我们想要删除或者添加节点，可以使用<code>redis-cli --cluster add-node</code>和<code>redis-cli --cluster del-node</code>命令。</p>\n<p>比如我们要新增一个节点<code>127.0.0.1:7007</code>，挂载在<code>6379</code>节点上。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster add-node 127.0.0.1:7007 127.0.0.1:6379</span><br></pre></td></tr></table></figure>\n\n<p>删除该节点，先查出节点的id.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster check 127.0.0.1:7007</span><br></pre></td></tr></table></figure>\n\n<p>输出如下信息：</p>\n<p><img src=\"https://raw.githubusercontent.com/chunlintang/imgLib/master/20190219164232.png\"></p>\n<p>找到对应节点id，这里是ef1035f7b8efe2b42cd1ac1c52833aca45edb498，执行以下命令即刻删除。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli --cluster del-node 127.0.0.1:7007 ef1035f7b8efe2b42cd1ac1c52833aca45edb498</span><br></pre></td></tr></table></figure>"},{"title":"Go笔记-错误处理与测试","date":"2021-04-26T02:22:13.000Z","_content":"\n像`java`，`php`等其他语言使用`try-and-catch`来捕捉异常，`go`有自己的一套异常机制`defer-panic-recover`。`go`的异常捕获机制更轻量，只作为处理错误的最后手段。\n\n<!-- more -->\n\n#### 错误处理\n\nGo中有一个预定义的`error`接口类型，错误值标识错误状态：\n\n```go\ntype error interface {\n  Error() string\n}\n```\n\n##### 定义错误\n\n当我们需要新定义一个错误类型时，都可以使用`error`包中的`error.New`函数接收错误信息来创建，如：\n\n```go\nerr := error.New(\"error infos\")\n```\n\n","source":"_posts/Go笔记-错误处理与测试.md","raw":"---\ntitle: Go笔记-错误处理与测试\ndate: 2021-04-26 10:22:13\ntags: go\n---\n\n像`java`，`php`等其他语言使用`try-and-catch`来捕捉异常，`go`有自己的一套异常机制`defer-panic-recover`。`go`的异常捕获机制更轻量，只作为处理错误的最后手段。\n\n<!-- more -->\n\n#### 错误处理\n\nGo中有一个预定义的`error`接口类型，错误值标识错误状态：\n\n```go\ntype error interface {\n  Error() string\n}\n```\n\n##### 定义错误\n\n当我们需要新定义一个错误类型时，都可以使用`error`包中的`error.New`函数接收错误信息来创建，如：\n\n```go\nerr := error.New(\"error infos\")\n```\n\n","slug":"Go笔记-错误处理与测试","published":1,"updated":"2021-04-27T06:01:13.876Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckops58o900000bs6g3dn1cpd","content":"<p>像<code>java</code>，<code>php</code>等其他语言使用<code>try-and-catch</code>来捕捉异常，<code>go</code>有自己的一套异常机制<code>defer-panic-recover</code>。<code>go</code>的异常捕获机制更轻量，只作为处理错误的最后手段。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h4><p>Go中有一个预定义的<code>error</code>接口类型，错误值标识错误状态：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> error <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Error() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"定义错误\"><a href=\"#定义错误\" class=\"headerlink\" title=\"定义错误\"></a>定义错误</h5><p>当我们需要新定义一个错误类型时，都可以使用<code>error</code>包中的<code>error.New</code>函数接收错误信息来创建，如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := error.New(<span class=\"string\">&quot;error infos&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>像<code>java</code>，<code>php</code>等其他语言使用<code>try-and-catch</code>来捕捉异常，<code>go</code>有自己的一套异常机制<code>defer-panic-recover</code>。<code>go</code>的异常捕获机制更轻量，只作为处理错误的最后手段。</p>","more":"<h4 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h4><p>Go中有一个预定义的<code>error</code>接口类型，错误值标识错误状态：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> error <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  Error() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"定义错误\"><a href=\"#定义错误\" class=\"headerlink\" title=\"定义错误\"></a>定义错误</h5><p>当我们需要新定义一个错误类型时，都可以使用<code>error</code>包中的<code>error.New</code>函数接收错误信息来创建，如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err := error.New(<span class=\"string\">&quot;error infos&quot;</span>)</span><br></pre></td></tr></table></figure>"},{"title":"Go高效并发模式","date":"2022-03-05T10:28:38.000Z","_content":"\n`Golang`中实现高效并发场景模式。\n\n<!-- more -->\n\n#### 一，`for select`无限循环模式\n\n`for + select`实现多路复用，无条件`return`会一直执行`default`。\n\n```go\nfor {\n  select {\n    case <-done:\n    \treturn\n  \tdefault:\n    \t// TODO\n  }\n}\n```\n\n#### 二，`for range select`有限循环模式\n\n```go\nfor _, s := range []int {\n  select {\n    case <-done:\n    \treturn\n    case resultCh <-s:\n  }\n}\n```\n\n#### 三，`select timeout`模式\n\n设置超时时间，避免因网络等其他问题导致此次获取不到响应。\n\n```go\nfunc main() {\n  result := make(chan string)\n  timeout := time.After(3 * time.Second)\n  go func() {\n    time.Sleep(5 * time.Second)\n    result <- \"server result\"\n  }()\n  for {\n    select {\n      case v := result:\n      \tfmt.Println(v)\n      case <-timeout:\n      \tfmt.Println(\"timeout\")\n      \treturn\n    \tdefault:\n      \tfmt.Println(\"wait...\")\n      \ttime.Sleep(1 * time.Second)\n    }\n  }\n}\n\n// wait...\n// wait...\n// wait...\n// timeout\n```\n\n#### 四，`Context的WithTimeout`函数超时取消\n\n推荐使用`WithTimeout`而非`select+timeout`.\n\n```go\nfunc main() {\n  ctx, stop := context.WithTimeout(context.Background(), 3 * time.Second)\n  go func() {\n    worker(ctx, \"张三\")\n  }()\n  go func() {\n    worker(ctx, \"李四\")\n  }()\n  time.Sleep(5 * time.Second)\n  stop()\n  fmt.Println(\"...\")\n}\n\nfunc worker(ctx context.Context, name string) {\n  for {\n    select {\n      case <-ctx.Done():\n      \tfmt.Println(\"下班咯~\")\n      \treturn\n      default:\n      \tfmt.Println(name, \"摸鱼中~\")\n      time.Sleep(1 * time.Second)\n    }\n  }\n}\n\n// 张三 摸鱼中~\n// 李四 摸鱼中 ~\n// 张三 摸鱼中~\n// 李四 摸鱼中 ~\n// 张三 摸鱼中~\n// 李四 摸鱼中 ~\n// 下班咯~\n// 下班咯~\n// wait 2s\n// ...\n```\n\n#### 五，`Pipline`模式\n\n也称之为流水线模式，如生产手机：零件采购->组装->打包成品。\n\n```go\nfunc main() {\n  coms := buy(10)\n  phones := build(coms)\n  packs := pack(phones)\n  for p := range packs {\n    fmt.Println(p)\n  }\n}\n\n// 零件采购\nfunc buy(n int) <-chan string {\n  out := make(chan string)\n  go func() {\n    defer close(out)\n    for i := 0; i <= n; i++ {\n      out <-fmt.Sprint(\"零件\", i)\n    }\n  }()\n  return out\n}\n\n// 组装\nfunc build(in <-chan string) <-chan string {\n  out := make(chan string)\n  go func() {\n    defer close(out)\n    for c := range in {\n      out <- \"组装()\" + c + \")\"\n    }\n  }()\n  return out\n}\n\n// 打包\nfunc pack(in <-chan string) <-chan string {\n  out := make(chan string)\n  go func() {\n    defer close(out)\n    for c := range in {\n      out <- \"打包(\" + c + \")\"\n    }\n  }()\n  return out\n}\n\n/**\n打包(组装()零件0))\n打包(组装()零件1))\n打包(组装()零件2))\n打包(组装()零件3))\n打包(组装()零件4))\n打包(组装()零件5))\n打包(组装()零件6))\n打包(组装()零件7))\n打包(组装()零件8))\n打包(组装()零件9))\n打包(组装()零件10))\n*/\n```\n\n#### 六，扇入扇出模式\n\n流水线模式可以看出，中间某个环节如果耗时比较严重的情况下，相应的会拖慢其他环节效率，为了提升性能，可以考虑扇入扇出模式，考虑给中间环节增加成本，如上给组装环节增加人手：\n\n```go\nfunc main() {\n\tcoms := buy(10)\n\tphones1 := build(coms)\n\tphones2 := build(coms)\n\tphones3 := build(coms)\n\tphones := merge(phones1, phones2, phones3)\n\tpacks := pack(phones)\n\tfor p := range packs {\n\t\tfmt.Println(p)\n\t}\n}\n\n// 零件采购\nfunc buy(n int) <-chan string {\n\tout := make(chan string)\n\tgo func() {\n\t\tdefer close(out)\n\t\tfor i := 0; i <= n; i++ {\n\t\t\tout <- fmt.Sprint(\"零件\", i)\n\t\t}\n\t}()\n\treturn out\n}\n\n// 组装\nfunc build(in <-chan string) <-chan string {\n\tout := make(chan string)\n\tgo func() {\n\t\tdefer close(out)\n\t\tfor c := range in {\n\t\t\tout <- \"组装()\" + c + \")\"\n\t\t}\n\t}()\n\treturn out\n}\n\n// 打包\nfunc pack(in <-chan string) <-chan string {\n\tout := make(chan string)\n\tgo func() {\n\t\tdefer close(out)\n\t\tfor c := range in {\n\t\t\tout <- \"打包(\" + c + \")\"\n\t\t}\n\t}()\n\treturn out\n}\n\n// 扇入函数，把多个channel中的数据发送到一个channel中\nfunc merge(ins ...<-chan string) <-chan string {\n\tvar wg sync.WaitGroup\n\tout := make(chan string)\n\tp := func(in <-chan string) {\n\t\tdefer wg.Done()\n\t\tfor c := range in {\n\t\t\tout <- c\n\t\t}\n\t}\n\n\twg.Add(len(ins))\n\tfor _, cs := range ins {\n\t\tgo p(cs)\n\t}\n\tgo func() {\n\t\twg.Wait()\n\t\tclose(out)\n\t}()\n\n\treturn out\n}\n\n/**\n打包(组装()零件2))\n打包(组装()零件3))\n打包(组装()零件1))\n打包(组装()零件5))\n打包(组装()零件6))\n打包(组装()零件4))\n打包(组装()零件0))\n打包(组装()零件7))\n打包(组装()零件9))\n打包(组装()零件10))\n打包(组装()零件8))\n*/\n```\n\n#### 七，未来模式(`Futures`)\n\n我们发现有时候有的任务之间并不需要依赖，为了提高性能，有些独立的任务可以并发执行：\n\n> `Futures`模式主协程不用等待子协程返回的结果，可以先去做其他的事，等将来子协程结果返回后再来取，如果子协程没有返回，则继续等待。\n\n如以做饭为例：洗菜、烧水2个步骤之间没有依赖关系，可同时做：\n\n```go\nfunc main() {\n\tvegetablesCh := washVegetables()\n\twaterCh := boilWater()\n\tfmt.Println(\"安排好洗菜烧水了，休息一下\")\n\ttime.Sleep(2 * time.Second)\n\tfmt.Println(\"开始做饭了，看下菜和水好了吗\")\n\tvegetables := <-vegetablesCh\n\twater := <-waterCh\n\tfmt.Println(\"准备好了，开始做饭:\", vegetables, water)\n}\n\n// 洗菜\nfunc washVegetables() <-chan string {\n\tvegetables := make(chan string)\n\tgo func() {\n\t\ttime.Sleep(5 * time.Second)\n\t\tvegetables <- \"菜洗好了\"\n\t}()\n\n\treturn vegetables\n}\n\n// 烧水\nfunc boilWater() <-chan string {\n\twater := make(chan string)\n\tgo func() {\n\t\ttime.Sleep(5 * time.Second)\n\t\twater <- \"水烧好了\"\n\t}()\n\n\treturn water\n}\n\n/**\n安排好洗菜烧水了，休息一下\n开始做饭了，看下菜和水好了吗\n准备好了，开始做饭: 菜洗好了 水烧好了\n*/\n```","source":"_posts/Go高效并发模式.md","raw":"---\ntitle: Go高效并发模式\ndate: 2022-03-05 18:28:38\ntags: go\n---\n\n`Golang`中实现高效并发场景模式。\n\n<!-- more -->\n\n#### 一，`for select`无限循环模式\n\n`for + select`实现多路复用，无条件`return`会一直执行`default`。\n\n```go\nfor {\n  select {\n    case <-done:\n    \treturn\n  \tdefault:\n    \t// TODO\n  }\n}\n```\n\n#### 二，`for range select`有限循环模式\n\n```go\nfor _, s := range []int {\n  select {\n    case <-done:\n    \treturn\n    case resultCh <-s:\n  }\n}\n```\n\n#### 三，`select timeout`模式\n\n设置超时时间，避免因网络等其他问题导致此次获取不到响应。\n\n```go\nfunc main() {\n  result := make(chan string)\n  timeout := time.After(3 * time.Second)\n  go func() {\n    time.Sleep(5 * time.Second)\n    result <- \"server result\"\n  }()\n  for {\n    select {\n      case v := result:\n      \tfmt.Println(v)\n      case <-timeout:\n      \tfmt.Println(\"timeout\")\n      \treturn\n    \tdefault:\n      \tfmt.Println(\"wait...\")\n      \ttime.Sleep(1 * time.Second)\n    }\n  }\n}\n\n// wait...\n// wait...\n// wait...\n// timeout\n```\n\n#### 四，`Context的WithTimeout`函数超时取消\n\n推荐使用`WithTimeout`而非`select+timeout`.\n\n```go\nfunc main() {\n  ctx, stop := context.WithTimeout(context.Background(), 3 * time.Second)\n  go func() {\n    worker(ctx, \"张三\")\n  }()\n  go func() {\n    worker(ctx, \"李四\")\n  }()\n  time.Sleep(5 * time.Second)\n  stop()\n  fmt.Println(\"...\")\n}\n\nfunc worker(ctx context.Context, name string) {\n  for {\n    select {\n      case <-ctx.Done():\n      \tfmt.Println(\"下班咯~\")\n      \treturn\n      default:\n      \tfmt.Println(name, \"摸鱼中~\")\n      time.Sleep(1 * time.Second)\n    }\n  }\n}\n\n// 张三 摸鱼中~\n// 李四 摸鱼中 ~\n// 张三 摸鱼中~\n// 李四 摸鱼中 ~\n// 张三 摸鱼中~\n// 李四 摸鱼中 ~\n// 下班咯~\n// 下班咯~\n// wait 2s\n// ...\n```\n\n#### 五，`Pipline`模式\n\n也称之为流水线模式，如生产手机：零件采购->组装->打包成品。\n\n```go\nfunc main() {\n  coms := buy(10)\n  phones := build(coms)\n  packs := pack(phones)\n  for p := range packs {\n    fmt.Println(p)\n  }\n}\n\n// 零件采购\nfunc buy(n int) <-chan string {\n  out := make(chan string)\n  go func() {\n    defer close(out)\n    for i := 0; i <= n; i++ {\n      out <-fmt.Sprint(\"零件\", i)\n    }\n  }()\n  return out\n}\n\n// 组装\nfunc build(in <-chan string) <-chan string {\n  out := make(chan string)\n  go func() {\n    defer close(out)\n    for c := range in {\n      out <- \"组装()\" + c + \")\"\n    }\n  }()\n  return out\n}\n\n// 打包\nfunc pack(in <-chan string) <-chan string {\n  out := make(chan string)\n  go func() {\n    defer close(out)\n    for c := range in {\n      out <- \"打包(\" + c + \")\"\n    }\n  }()\n  return out\n}\n\n/**\n打包(组装()零件0))\n打包(组装()零件1))\n打包(组装()零件2))\n打包(组装()零件3))\n打包(组装()零件4))\n打包(组装()零件5))\n打包(组装()零件6))\n打包(组装()零件7))\n打包(组装()零件8))\n打包(组装()零件9))\n打包(组装()零件10))\n*/\n```\n\n#### 六，扇入扇出模式\n\n流水线模式可以看出，中间某个环节如果耗时比较严重的情况下，相应的会拖慢其他环节效率，为了提升性能，可以考虑扇入扇出模式，考虑给中间环节增加成本，如上给组装环节增加人手：\n\n```go\nfunc main() {\n\tcoms := buy(10)\n\tphones1 := build(coms)\n\tphones2 := build(coms)\n\tphones3 := build(coms)\n\tphones := merge(phones1, phones2, phones3)\n\tpacks := pack(phones)\n\tfor p := range packs {\n\t\tfmt.Println(p)\n\t}\n}\n\n// 零件采购\nfunc buy(n int) <-chan string {\n\tout := make(chan string)\n\tgo func() {\n\t\tdefer close(out)\n\t\tfor i := 0; i <= n; i++ {\n\t\t\tout <- fmt.Sprint(\"零件\", i)\n\t\t}\n\t}()\n\treturn out\n}\n\n// 组装\nfunc build(in <-chan string) <-chan string {\n\tout := make(chan string)\n\tgo func() {\n\t\tdefer close(out)\n\t\tfor c := range in {\n\t\t\tout <- \"组装()\" + c + \")\"\n\t\t}\n\t}()\n\treturn out\n}\n\n// 打包\nfunc pack(in <-chan string) <-chan string {\n\tout := make(chan string)\n\tgo func() {\n\t\tdefer close(out)\n\t\tfor c := range in {\n\t\t\tout <- \"打包(\" + c + \")\"\n\t\t}\n\t}()\n\treturn out\n}\n\n// 扇入函数，把多个channel中的数据发送到一个channel中\nfunc merge(ins ...<-chan string) <-chan string {\n\tvar wg sync.WaitGroup\n\tout := make(chan string)\n\tp := func(in <-chan string) {\n\t\tdefer wg.Done()\n\t\tfor c := range in {\n\t\t\tout <- c\n\t\t}\n\t}\n\n\twg.Add(len(ins))\n\tfor _, cs := range ins {\n\t\tgo p(cs)\n\t}\n\tgo func() {\n\t\twg.Wait()\n\t\tclose(out)\n\t}()\n\n\treturn out\n}\n\n/**\n打包(组装()零件2))\n打包(组装()零件3))\n打包(组装()零件1))\n打包(组装()零件5))\n打包(组装()零件6))\n打包(组装()零件4))\n打包(组装()零件0))\n打包(组装()零件7))\n打包(组装()零件9))\n打包(组装()零件10))\n打包(组装()零件8))\n*/\n```\n\n#### 七，未来模式(`Futures`)\n\n我们发现有时候有的任务之间并不需要依赖，为了提高性能，有些独立的任务可以并发执行：\n\n> `Futures`模式主协程不用等待子协程返回的结果，可以先去做其他的事，等将来子协程结果返回后再来取，如果子协程没有返回，则继续等待。\n\n如以做饭为例：洗菜、烧水2个步骤之间没有依赖关系，可同时做：\n\n```go\nfunc main() {\n\tvegetablesCh := washVegetables()\n\twaterCh := boilWater()\n\tfmt.Println(\"安排好洗菜烧水了，休息一下\")\n\ttime.Sleep(2 * time.Second)\n\tfmt.Println(\"开始做饭了，看下菜和水好了吗\")\n\tvegetables := <-vegetablesCh\n\twater := <-waterCh\n\tfmt.Println(\"准备好了，开始做饭:\", vegetables, water)\n}\n\n// 洗菜\nfunc washVegetables() <-chan string {\n\tvegetables := make(chan string)\n\tgo func() {\n\t\ttime.Sleep(5 * time.Second)\n\t\tvegetables <- \"菜洗好了\"\n\t}()\n\n\treturn vegetables\n}\n\n// 烧水\nfunc boilWater() <-chan string {\n\twater := make(chan string)\n\tgo func() {\n\t\ttime.Sleep(5 * time.Second)\n\t\twater <- \"水烧好了\"\n\t}()\n\n\treturn water\n}\n\n/**\n安排好洗菜烧水了，休息一下\n开始做饭了，看下菜和水好了吗\n准备好了，开始做饭: 菜洗好了 水烧好了\n*/\n```","slug":"Go高效并发模式","published":1,"updated":"2022-03-05T10:32:46.606Z","_id":"cl0dpguqb0000qos67e9f6shl","comments":1,"layout":"post","photos":[],"link":"","content":"<p><code>Golang</code>中实现高效并发场景模式。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"一，for-select无限循环模式\"><a href=\"#一，for-select无限循环模式\" class=\"headerlink\" title=\"一，for select无限循环模式\"></a>一，<code>for select</code>无限循环模式</h4><p><code>for + select</code>实现多路复用，无条件<code>return</code>会一直执行<code>default</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-done:</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span></span><br><span class=\"line\">  \t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">    \t<span class=\"comment\">// TODO</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二，for-range-select有限循环模式\"><a href=\"#二，for-range-select有限循环模式\" class=\"headerlink\" title=\"二，for range select有限循环模式\"></a>二，<code>for range select</code>有限循环模式</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> _, s := <span class=\"keyword\">range</span> []<span class=\"keyword\">int</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-done:</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> resultCh &lt;-s:</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三，select-timeout模式\"><a href=\"#三，select-timeout模式\" class=\"headerlink\" title=\"三，select timeout模式\"></a>三，<code>select timeout</code>模式</h4><p>设置超时时间，避免因网络等其他问题导致此次获取不到响应。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  result := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">  timeout := time.After(<span class=\"number\">3</span> * time.Second)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    time.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">    result &lt;- <span class=\"string\">&quot;server result&quot;</span></span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> v := result:</span><br><span class=\"line\">      \tfmt.Println(v)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> &lt;-timeout:</span><br><span class=\"line\">      \tfmt.Println(<span class=\"string\">&quot;timeout&quot;</span>)</span><br><span class=\"line\">      \t<span class=\"keyword\">return</span></span><br><span class=\"line\">    \t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">      \tfmt.Println(<span class=\"string\">&quot;wait...&quot;</span>)</span><br><span class=\"line\">      \ttime.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// wait...</span></span><br><span class=\"line\"><span class=\"comment\">// wait...</span></span><br><span class=\"line\"><span class=\"comment\">// wait...</span></span><br><span class=\"line\"><span class=\"comment\">// timeout</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四，Context的WithTimeout函数超时取消\"><a href=\"#四，Context的WithTimeout函数超时取消\" class=\"headerlink\" title=\"四，Context的WithTimeout函数超时取消\"></a>四，<code>Context的WithTimeout</code>函数超时取消</h4><p>推荐使用<code>WithTimeout</code>而非<code>select+timeout</code>.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  ctx, stop := context.WithTimeout(context.Background(), <span class=\"number\">3</span> * time.Second)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    worker(ctx, <span class=\"string\">&quot;张三&quot;</span>)</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    worker(ctx, <span class=\"string\">&quot;李四&quot;</span>)</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  time.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">  stop()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;...&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">worker</span><span class=\"params\">(ctx context.Context, name <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">      \tfmt.Println(<span class=\"string\">&quot;下班咯~&quot;</span>)</span><br><span class=\"line\">      \t<span class=\"keyword\">return</span></span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      \tfmt.Println(name, <span class=\"string\">&quot;摸鱼中~&quot;</span>)</span><br><span class=\"line\">      time.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 张三 摸鱼中~</span></span><br><span class=\"line\"><span class=\"comment\">// 李四 摸鱼中 ~</span></span><br><span class=\"line\"><span class=\"comment\">// 张三 摸鱼中~</span></span><br><span class=\"line\"><span class=\"comment\">// 李四 摸鱼中 ~</span></span><br><span class=\"line\"><span class=\"comment\">// 张三 摸鱼中~</span></span><br><span class=\"line\"><span class=\"comment\">// 李四 摸鱼中 ~</span></span><br><span class=\"line\"><span class=\"comment\">// 下班咯~</span></span><br><span class=\"line\"><span class=\"comment\">// 下班咯~</span></span><br><span class=\"line\"><span class=\"comment\">// wait 2s</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"五，Pipline模式\"><a href=\"#五，Pipline模式\" class=\"headerlink\" title=\"五，Pipline模式\"></a>五，<code>Pipline</code>模式</h4><p>也称之为流水线模式，如生产手机：零件采购-&gt;组装-&gt;打包成品。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  coms := buy(<span class=\"number\">10</span>)</span><br><span class=\"line\">  phones := build(coms)</span><br><span class=\"line\">  packs := pack(phones)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> p := <span class=\"keyword\">range</span> packs &#123;</span><br><span class=\"line\">    fmt.Println(p)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 零件采购</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buy</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">  out := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"built_in\">close</span>(out)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">      out &lt;-fmt.Sprint(<span class=\"string\">&quot;零件&quot;</span>, i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> out</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组装</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">build</span><span class=\"params\">(in &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">  out := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"built_in\">close</span>(out)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> c := <span class=\"keyword\">range</span> in &#123;</span><br><span class=\"line\">      out &lt;- <span class=\"string\">&quot;组装()&quot;</span> + c + <span class=\"string\">&quot;)&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> out</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打包</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pack</span><span class=\"params\">(in &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">  out := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"built_in\">close</span>(out)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> c := <span class=\"keyword\">range</span> in &#123;</span><br><span class=\"line\">      out &lt;- <span class=\"string\">&quot;打包(&quot;</span> + c + <span class=\"string\">&quot;)&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> out</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件0))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件1))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件2))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件3))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件4))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件5))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件6))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件7))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件8))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件9))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件10))</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"六，扇入扇出模式\"><a href=\"#六，扇入扇出模式\" class=\"headerlink\" title=\"六，扇入扇出模式\"></a>六，扇入扇出模式</h4><p>流水线模式可以看出，中间某个环节如果耗时比较严重的情况下，相应的会拖慢其他环节效率，为了提升性能，可以考虑扇入扇出模式，考虑给中间环节增加成本，如上给组装环节增加人手：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tcoms := buy(<span class=\"number\">10</span>)</span><br><span class=\"line\">\tphones1 := build(coms)</span><br><span class=\"line\">\tphones2 := build(coms)</span><br><span class=\"line\">\tphones3 := build(coms)</span><br><span class=\"line\">\tphones := merge(phones1, phones2, phones3)</span><br><span class=\"line\">\tpacks := pack(phones)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> p := <span class=\"keyword\">range</span> packs &#123;</span><br><span class=\"line\">\t\tfmt.Println(p)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 零件采购</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buy</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tout := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> <span class=\"built_in\">close</span>(out)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\t\tout &lt;- fmt.Sprint(<span class=\"string\">&quot;零件&quot;</span>, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> out</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组装</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">build</span><span class=\"params\">(in &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tout := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> <span class=\"built_in\">close</span>(out)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> c := <span class=\"keyword\">range</span> in &#123;</span><br><span class=\"line\">\t\t\tout &lt;- <span class=\"string\">&quot;组装()&quot;</span> + c + <span class=\"string\">&quot;)&quot;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> out</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打包</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pack</span><span class=\"params\">(in &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tout := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> <span class=\"built_in\">close</span>(out)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> c := <span class=\"keyword\">range</span> in &#123;</span><br><span class=\"line\">\t\t\tout &lt;- <span class=\"string\">&quot;打包(&quot;</span> + c + <span class=\"string\">&quot;)&quot;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> out</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 扇入函数，把多个channel中的数据发送到一个channel中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">merge</span><span class=\"params\">(ins ...&lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">\tout := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\tp := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(in &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> c := <span class=\"keyword\">range</span> in &#123;</span><br><span class=\"line\">\t\t\tout &lt;- c</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Add(<span class=\"built_in\">len</span>(ins))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, cs := <span class=\"keyword\">range</span> ins &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> p(cs)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\twg.Wait()</span><br><span class=\"line\">\t\t<span class=\"built_in\">close</span>(out)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> out</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件2))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件3))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件1))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件5))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件6))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件4))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件0))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件7))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件9))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件10))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件8))</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"七，未来模式-Futures\"><a href=\"#七，未来模式-Futures\" class=\"headerlink\" title=\"七，未来模式(Futures)\"></a>七，未来模式(<code>Futures</code>)</h4><p>我们发现有时候有的任务之间并不需要依赖，为了提高性能，有些独立的任务可以并发执行：</p>\n<blockquote>\n<p><code>Futures</code>模式主协程不用等待子协程返回的结果，可以先去做其他的事，等将来子协程结果返回后再来取，如果子协程没有返回，则继续等待。</p>\n</blockquote>\n<p>如以做饭为例：洗菜、烧水2个步骤之间没有依赖关系，可同时做：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tvegetablesCh := washVegetables()</span><br><span class=\"line\">\twaterCh := boilWater()</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;安排好洗菜烧水了，休息一下&quot;</span>)</span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">2</span> * time.Second)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;开始做饭了，看下菜和水好了吗&quot;</span>)</span><br><span class=\"line\">\tvegetables := &lt;-vegetablesCh</span><br><span class=\"line\">\twater := &lt;-waterCh</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;准备好了，开始做饭:&quot;</span>, vegetables, water)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 洗菜</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">washVegetables</span><span class=\"params\">()</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tvegetables := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">\t\tvegetables &lt;- <span class=\"string\">&quot;菜洗好了&quot;</span></span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> vegetables</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 烧水</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">boilWater</span><span class=\"params\">()</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\twater := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">\t\twater &lt;- <span class=\"string\">&quot;水烧好了&quot;</span></span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> water</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">安排好洗菜烧水了，休息一下</span></span><br><span class=\"line\"><span class=\"comment\">开始做饭了，看下菜和水好了吗</span></span><br><span class=\"line\"><span class=\"comment\">准备好了，开始做饭: 菜洗好了 水烧好了</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><code>Golang</code>中实现高效并发场景模式。</p>","more":"<h4 id=\"一，for-select无限循环模式\"><a href=\"#一，for-select无限循环模式\" class=\"headerlink\" title=\"一，for select无限循环模式\"></a>一，<code>for select</code>无限循环模式</h4><p><code>for + select</code>实现多路复用，无条件<code>return</code>会一直执行<code>default</code>。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-done:</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span></span><br><span class=\"line\">  \t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">    \t<span class=\"comment\">// TODO</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二，for-range-select有限循环模式\"><a href=\"#二，for-range-select有限循环模式\" class=\"headerlink\" title=\"二，for range select有限循环模式\"></a>二，<code>for range select</code>有限循环模式</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> _, s := <span class=\"keyword\">range</span> []<span class=\"keyword\">int</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-done:</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> resultCh &lt;-s:</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三，select-timeout模式\"><a href=\"#三，select-timeout模式\" class=\"headerlink\" title=\"三，select timeout模式\"></a>三，<code>select timeout</code>模式</h4><p>设置超时时间，避免因网络等其他问题导致此次获取不到响应。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  result := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">  timeout := time.After(<span class=\"number\">3</span> * time.Second)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    time.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">    result &lt;- <span class=\"string\">&quot;server result&quot;</span></span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> v := result:</span><br><span class=\"line\">      \tfmt.Println(v)</span><br><span class=\"line\">      <span class=\"keyword\">case</span> &lt;-timeout:</span><br><span class=\"line\">      \tfmt.Println(<span class=\"string\">&quot;timeout&quot;</span>)</span><br><span class=\"line\">      \t<span class=\"keyword\">return</span></span><br><span class=\"line\">    \t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">      \tfmt.Println(<span class=\"string\">&quot;wait...&quot;</span>)</span><br><span class=\"line\">      \ttime.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// wait...</span></span><br><span class=\"line\"><span class=\"comment\">// wait...</span></span><br><span class=\"line\"><span class=\"comment\">// wait...</span></span><br><span class=\"line\"><span class=\"comment\">// timeout</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四，Context的WithTimeout函数超时取消\"><a href=\"#四，Context的WithTimeout函数超时取消\" class=\"headerlink\" title=\"四，Context的WithTimeout函数超时取消\"></a>四，<code>Context的WithTimeout</code>函数超时取消</h4><p>推荐使用<code>WithTimeout</code>而非<code>select+timeout</code>.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  ctx, stop := context.WithTimeout(context.Background(), <span class=\"number\">3</span> * time.Second)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    worker(ctx, <span class=\"string\">&quot;张三&quot;</span>)</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    worker(ctx, <span class=\"string\">&quot;李四&quot;</span>)</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  time.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">  stop()</span><br><span class=\"line\">  fmt.Println(<span class=\"string\">&quot;...&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">worker</span><span class=\"params\">(ctx context.Context, name <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> &lt;-ctx.Done():</span><br><span class=\"line\">      \tfmt.Println(<span class=\"string\">&quot;下班咯~&quot;</span>)</span><br><span class=\"line\">      \t<span class=\"keyword\">return</span></span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      \tfmt.Println(name, <span class=\"string\">&quot;摸鱼中~&quot;</span>)</span><br><span class=\"line\">      time.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 张三 摸鱼中~</span></span><br><span class=\"line\"><span class=\"comment\">// 李四 摸鱼中 ~</span></span><br><span class=\"line\"><span class=\"comment\">// 张三 摸鱼中~</span></span><br><span class=\"line\"><span class=\"comment\">// 李四 摸鱼中 ~</span></span><br><span class=\"line\"><span class=\"comment\">// 张三 摸鱼中~</span></span><br><span class=\"line\"><span class=\"comment\">// 李四 摸鱼中 ~</span></span><br><span class=\"line\"><span class=\"comment\">// 下班咯~</span></span><br><span class=\"line\"><span class=\"comment\">// 下班咯~</span></span><br><span class=\"line\"><span class=\"comment\">// wait 2s</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"五，Pipline模式\"><a href=\"#五，Pipline模式\" class=\"headerlink\" title=\"五，Pipline模式\"></a>五，<code>Pipline</code>模式</h4><p>也称之为流水线模式，如生产手机：零件采购-&gt;组装-&gt;打包成品。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  coms := buy(<span class=\"number\">10</span>)</span><br><span class=\"line\">  phones := build(coms)</span><br><span class=\"line\">  packs := pack(phones)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> p := <span class=\"keyword\">range</span> packs &#123;</span><br><span class=\"line\">    fmt.Println(p)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 零件采购</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buy</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">  out := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"built_in\">close</span>(out)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">      out &lt;-fmt.Sprint(<span class=\"string\">&quot;零件&quot;</span>, i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> out</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组装</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">build</span><span class=\"params\">(in &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">  out := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"built_in\">close</span>(out)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> c := <span class=\"keyword\">range</span> in &#123;</span><br><span class=\"line\">      out &lt;- <span class=\"string\">&quot;组装()&quot;</span> + c + <span class=\"string\">&quot;)&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> out</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打包</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pack</span><span class=\"params\">(in &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">  out := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"built_in\">close</span>(out)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> c := <span class=\"keyword\">range</span> in &#123;</span><br><span class=\"line\">      out &lt;- <span class=\"string\">&quot;打包(&quot;</span> + c + <span class=\"string\">&quot;)&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> out</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件0))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件1))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件2))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件3))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件4))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件5))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件6))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件7))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件8))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件9))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件10))</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"六，扇入扇出模式\"><a href=\"#六，扇入扇出模式\" class=\"headerlink\" title=\"六，扇入扇出模式\"></a>六，扇入扇出模式</h4><p>流水线模式可以看出，中间某个环节如果耗时比较严重的情况下，相应的会拖慢其他环节效率，为了提升性能，可以考虑扇入扇出模式，考虑给中间环节增加成本，如上给组装环节增加人手：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tcoms := buy(<span class=\"number\">10</span>)</span><br><span class=\"line\">\tphones1 := build(coms)</span><br><span class=\"line\">\tphones2 := build(coms)</span><br><span class=\"line\">\tphones3 := build(coms)</span><br><span class=\"line\">\tphones := merge(phones1, phones2, phones3)</span><br><span class=\"line\">\tpacks := pack(phones)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> p := <span class=\"keyword\">range</span> packs &#123;</span><br><span class=\"line\">\t\tfmt.Println(p)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 零件采购</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">buy</span><span class=\"params\">(n <span class=\"keyword\">int</span>)</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tout := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> <span class=\"built_in\">close</span>(out)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt;= n; i++ &#123;</span><br><span class=\"line\">\t\t\tout &lt;- fmt.Sprint(<span class=\"string\">&quot;零件&quot;</span>, i)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> out</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 组装</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">build</span><span class=\"params\">(in &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tout := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> <span class=\"built_in\">close</span>(out)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> c := <span class=\"keyword\">range</span> in &#123;</span><br><span class=\"line\">\t\t\tout &lt;- <span class=\"string\">&quot;组装()&quot;</span> + c + <span class=\"string\">&quot;)&quot;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> out</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打包</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pack</span><span class=\"params\">(in &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tout := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> <span class=\"built_in\">close</span>(out)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> c := <span class=\"keyword\">range</span> in &#123;</span><br><span class=\"line\">\t\t\tout &lt;- <span class=\"string\">&quot;打包(&quot;</span> + c + <span class=\"string\">&quot;)&quot;</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> out</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 扇入函数，把多个channel中的数据发送到一个channel中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">merge</span><span class=\"params\">(ins ...&lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\">\tout := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\tp := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(in &lt;-<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> c := <span class=\"keyword\">range</span> in &#123;</span><br><span class=\"line\">\t\t\tout &lt;- c</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\twg.Add(<span class=\"built_in\">len</span>(ins))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, cs := <span class=\"keyword\">range</span> ins &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> p(cs)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\twg.Wait()</span><br><span class=\"line\">\t\t<span class=\"built_in\">close</span>(out)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> out</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件2))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件3))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件1))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件5))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件6))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件4))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件0))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件7))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件9))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件10))</span></span><br><span class=\"line\"><span class=\"comment\">打包(组装()零件8))</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"七，未来模式-Futures\"><a href=\"#七，未来模式-Futures\" class=\"headerlink\" title=\"七，未来模式(Futures)\"></a>七，未来模式(<code>Futures</code>)</h4><p>我们发现有时候有的任务之间并不需要依赖，为了提高性能，有些独立的任务可以并发执行：</p>\n<blockquote>\n<p><code>Futures</code>模式主协程不用等待子协程返回的结果，可以先去做其他的事，等将来子协程结果返回后再来取，如果子协程没有返回，则继续等待。</p>\n</blockquote>\n<p>如以做饭为例：洗菜、烧水2个步骤之间没有依赖关系，可同时做：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tvegetablesCh := washVegetables()</span><br><span class=\"line\">\twaterCh := boilWater()</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;安排好洗菜烧水了，休息一下&quot;</span>)</span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">2</span> * time.Second)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;开始做饭了，看下菜和水好了吗&quot;</span>)</span><br><span class=\"line\">\tvegetables := &lt;-vegetablesCh</span><br><span class=\"line\">\twater := &lt;-waterCh</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;准备好了，开始做饭:&quot;</span>, vegetables, water)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 洗菜</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">washVegetables</span><span class=\"params\">()</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\tvegetables := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">\t\tvegetables &lt;- <span class=\"string\">&quot;菜洗好了&quot;</span></span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> vegetables</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 烧水</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">boilWater</span><span class=\"params\">()</span> &lt;-<span class=\"title\">chan</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">\twater := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">5</span> * time.Second)</span><br><span class=\"line\">\t\twater &lt;- <span class=\"string\">&quot;水烧好了&quot;</span></span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> water</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">安排好洗菜烧水了，休息一下</span></span><br><span class=\"line\"><span class=\"comment\">开始做饭了，看下菜和水好了吗</span></span><br><span class=\"line\"><span class=\"comment\">准备好了，开始做饭: 菜洗好了 水烧好了</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cknwscb210006w7c982svazsw","tag_id":"cknwscb1z0004w7c9b70l5yjj","_id":"cknwscb240009w7c99g6n0410"},{"post_id":"cknwscb1q0000w7c975asc7hl","tag_id":"cknwscb1z0004w7c9b70l5yjj","_id":"cknwscb25000bw7c971hw1ut9"},{"post_id":"cknwscb220007w7c94zuu799x","tag_id":"cknwscb1z0004w7c9b70l5yjj","_id":"cknwscb26000ew7c96b950bhr"},{"post_id":"cknwscb24000aw7c9h3f17smt","tag_id":"cknwscb1z0004w7c9b70l5yjj","_id":"cknwscb27000gw7c99ep0ctxc"},{"post_id":"cknwscb1w0002w7c94ww2a0vi","tag_id":"cknwscb1z0004w7c9b70l5yjj","_id":"cknwscb28000iw7c9gf2o8u91"},{"post_id":"cknwscb25000cw7c9baqucgsx","tag_id":"cknwscb1z0004w7c9b70l5yjj","_id":"cknwscb29000lw7c96qj3feg3"},{"post_id":"cknwscb27000fw7c9hdcwbrow","tag_id":"cknwscb1z0004w7c9b70l5yjj","_id":"cknwscb2b000nw7c99kt7d7ve"},{"post_id":"cknwscb200005w7c91jupargg","tag_id":"cknwscb1z0004w7c9b70l5yjj","_id":"cknwscb2c000pw7c9bwy30bdg"},{"post_id":"cknwscb27000hw7c9az4m49f5","tag_id":"cknwscb29000kw7c9dsav21vj","_id":"cknwscb2g000ww7c922oc32yy"},{"post_id":"cknwscb27000hw7c9az4m49f5","tag_id":"cknwscb2d000rw7c91xsc3abr","_id":"cknwscb2g000yw7c97u7h6xaz"},{"post_id":"cknwscb28000jw7c97g613i0f","tag_id":"cknwscb2f000uw7c92zyr3hv0","_id":"cknwscb2h0011w7c94h2u9wq0"},{"post_id":"cknwscb29000mw7c9c37aa4xq","tag_id":"cknwscb29000kw7c9dsav21vj","_id":"cknwscb2l0018w7c959qc40tn"},{"post_id":"cknwscb29000mw7c9c37aa4xq","tag_id":"cknwscb2d000rw7c91xsc3abr","_id":"cknwscb2l001aw7c927x612m1"},{"post_id":"cknwscb2k0017w7c9e9rt514k","tag_id":"cknwscb2k0016w7c93nx4htq3","_id":"cknwscb2m001dw7c9hl2m1h8y"},{"post_id":"cknwscb2b000ow7c96bruelyl","tag_id":"cknwscb2k0016w7c93nx4htq3","_id":"cknwscb2n001fw7c9ajr1hvgu"},{"post_id":"cknwscb2l0019w7c96vhl7zl7","tag_id":"cknwscb2k0016w7c93nx4htq3","_id":"cknwscb2o001hw7c96rjxatrd"},{"post_id":"cknwscb2m001cw7c90gl6gy9n","tag_id":"cknwscb2k0016w7c93nx4htq3","_id":"cknwscb2o001iw7c9e44gfybz"},{"post_id":"cknwscb2c000qw7c90cp86ypp","tag_id":"cknwscb2k0016w7c93nx4htq3","_id":"cknwscb2o001kw7c94h0q9im8"},{"post_id":"cknwscb2d000sw7c98m5u395v","tag_id":"cknwscb2k0016w7c93nx4htq3","_id":"cknwscb2p001lw7c90rnk4q45"},{"post_id":"cknwscb2e000tw7c9f1o879wc","tag_id":"cknwscb2k0016w7c93nx4htq3","_id":"cknwscb2p001nw7c9dyp6dwxx"},{"post_id":"cknwscb2f000vw7c96taceh6k","tag_id":"cknwscb2k0016w7c93nx4htq3","_id":"cknwscb2q001pw7c9c3f8dpdj"},{"post_id":"cknwscb2g000xw7c9cv7a757c","tag_id":"cknwscb2k0016w7c93nx4htq3","_id":"cknwscb2q001rw7c92fhd2fk8"},{"post_id":"cknwscb2h0010w7c91p8c1nxp","tag_id":"cknwscb2k0016w7c93nx4htq3","_id":"cknwscb2r001tw7c909wxeca3"},{"post_id":"cknwscb2i0012w7c92cd42mt8","tag_id":"cknwscb2k0016w7c93nx4htq3","_id":"cknwscb2r001vw7c91290025d"},{"post_id":"cknwscb2j0014w7c9c9ww9dd9","tag_id":"cknwscb2k0016w7c93nx4htq3","_id":"cknwscb2s001xw7c9425z0mp7"},{"post_id":"cknwscb2j0015w7c955x15u6c","tag_id":"cknwscb2k0016w7c93nx4htq3","_id":"cknwscb2s001zw7c96a8h3ajy"},{"post_id":"cknwscb2n001ew7c9bpbo8jed","tag_id":"cknwscb2s001yw7c910z7ftmw","_id":"cknwscb2t0020w7c9foye028q"},{"post_id":"cknwscb2u0021w7c9cwksfmzz","tag_id":"cknwscb2s001yw7c910z7ftmw","_id":"cknwscb2u0022w7c97on26etb"},{"post_id":"ckops58o900000bs6g3dn1cpd","tag_id":"cknwscb1z0004w7c9b70l5yjj","_id":"ckops58od00010bs65walchkh"},{"post_id":"cl0dpguqb0000qos67e9f6shl","tag_id":"cknwscb1z0004w7c9b70l5yjj","_id":"cl0dpguqg0001qos67b7udy1h"}],"Tag":[{"name":"go","_id":"cknwscb1z0004w7c9b70l5yjj"},{"name":"k8s","_id":"cknwscb29000kw7c9dsav21vj"},{"name":"kubernetes","_id":"cknwscb2d000rw7c91xsc3abr"},{"name":"mysql","_id":"cknwscb2f000uw7c92zyr3hv0"},{"name":"nginx","_id":"cknwscb2k0016w7c93nx4htq3"},{"name":"redis","_id":"cknwscb2s001yw7c910z7ftmw"},{"name":"Go","_id":"cku6b4g7u0001snc9hdgo0bji"}]}}